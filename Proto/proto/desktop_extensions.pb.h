// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: desktop_extensions.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_desktop_5fextensions_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_desktop_5fextensions_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_desktop_5fextensions_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_desktop_5fextensions_2eproto {
  static const uint32_t offsets[];
};
namespace proto {
class Pause;
struct PauseDefaultTypeInternal;
extern PauseDefaultTypeInternal _Pause_default_instance_;
class Point;
struct PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class PowerControl;
struct PowerControlDefaultTypeInternal;
extern PowerControlDefaultTypeInternal _PowerControl_default_instance_;
class PreferredSize;
struct PreferredSizeDefaultTypeInternal;
extern PreferredSizeDefaultTypeInternal _PreferredSize_default_instance_;
class Resolution;
struct ResolutionDefaultTypeInternal;
extern ResolutionDefaultTypeInternal _Resolution_default_instance_;
class Screen;
struct ScreenDefaultTypeInternal;
extern ScreenDefaultTypeInternal _Screen_default_instance_;
class ScreenList;
struct ScreenListDefaultTypeInternal;
extern ScreenListDefaultTypeInternal _ScreenList_default_instance_;
class VideoRecording;
struct VideoRecordingDefaultTypeInternal;
extern VideoRecordingDefaultTypeInternal _VideoRecording_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::Pause* Arena::CreateMaybeMessage<::proto::Pause>(Arena*);
template<> ::proto::Point* Arena::CreateMaybeMessage<::proto::Point>(Arena*);
template<> ::proto::PowerControl* Arena::CreateMaybeMessage<::proto::PowerControl>(Arena*);
template<> ::proto::PreferredSize* Arena::CreateMaybeMessage<::proto::PreferredSize>(Arena*);
template<> ::proto::Resolution* Arena::CreateMaybeMessage<::proto::Resolution>(Arena*);
template<> ::proto::Screen* Arena::CreateMaybeMessage<::proto::Screen>(Arena*);
template<> ::proto::ScreenList* Arena::CreateMaybeMessage<::proto::ScreenList>(Arena*);
template<> ::proto::VideoRecording* Arena::CreateMaybeMessage<::proto::VideoRecording>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

enum PowerControl_Action : int {
  PowerControl_Action_ACTION_UNKNOWN = 0,
  PowerControl_Action_ACTION_SHUTDOWN = 1,
  PowerControl_Action_ACTION_REBOOT = 2,
  PowerControl_Action_ACTION_LOGOFF = 3,
  PowerControl_Action_ACTION_LOCK = 4,
  PowerControl_Action_ACTION_REBOOT_SAFE_MODE = 5,
  PowerControl_Action_PowerControl_Action_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PowerControl_Action_PowerControl_Action_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PowerControl_Action_IsValid(int value);
constexpr PowerControl_Action PowerControl_Action_Action_MIN = PowerControl_Action_ACTION_UNKNOWN;
constexpr PowerControl_Action PowerControl_Action_Action_MAX = PowerControl_Action_ACTION_REBOOT_SAFE_MODE;
constexpr int PowerControl_Action_Action_ARRAYSIZE = PowerControl_Action_Action_MAX + 1;

const std::string& PowerControl_Action_Name(PowerControl_Action value);
template<typename T>
inline const std::string& PowerControl_Action_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PowerControl_Action>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PowerControl_Action_Name.");
  return PowerControl_Action_Name(static_cast<PowerControl_Action>(enum_t_value));
}
bool PowerControl_Action_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PowerControl_Action* value);
enum VideoRecording_Action : int {
  VideoRecording_Action_ACTION_UNKNOWN = 0,
  VideoRecording_Action_ACTION_STARTED = 1,
  VideoRecording_Action_ACTION_STOPPED = 2,
  VideoRecording_Action_VideoRecording_Action_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  VideoRecording_Action_VideoRecording_Action_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool VideoRecording_Action_IsValid(int value);
constexpr VideoRecording_Action VideoRecording_Action_Action_MIN = VideoRecording_Action_ACTION_UNKNOWN;
constexpr VideoRecording_Action VideoRecording_Action_Action_MAX = VideoRecording_Action_ACTION_STOPPED;
constexpr int VideoRecording_Action_Action_ARRAYSIZE = VideoRecording_Action_Action_MAX + 1;

const std::string& VideoRecording_Action_Name(VideoRecording_Action value);
template<typename T>
inline const std::string& VideoRecording_Action_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VideoRecording_Action>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VideoRecording_Action_Name.");
  return VideoRecording_Action_Name(static_cast<VideoRecording_Action>(enum_t_value));
}
bool VideoRecording_Action_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, VideoRecording_Action* value);
// ===================================================================

class Resolution final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:proto.Resolution) */ {
 public:
  inline Resolution() : Resolution(nullptr) {}
  ~Resolution() override;
  explicit PROTOBUF_CONSTEXPR Resolution(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Resolution(const Resolution& from);
  Resolution(Resolution&& from) noexcept
    : Resolution() {
    *this = ::std::move(from);
  }

  inline Resolution& operator=(const Resolution& from) {
    CopyFrom(from);
    return *this;
  }
  inline Resolution& operator=(Resolution&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Resolution& default_instance() {
    return *internal_default_instance();
  }
  static inline const Resolution* internal_default_instance() {
    return reinterpret_cast<const Resolution*>(
               &_Resolution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Resolution& a, Resolution& b) {
    a.Swap(&b);
  }
  inline void Swap(Resolution* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Resolution* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Resolution* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Resolution>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Resolution& from);
  void MergeFrom(const Resolution& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Resolution* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Resolution";
  }
  protected:
  explicit Resolution(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
  };
  // int32 width = 1;
  void clear_width();
  int32_t width() const;
  void set_width(int32_t value);
  private:
  int32_t _internal_width() const;
  void _internal_set_width(int32_t value);
  public:

  // int32 height = 2;
  void clear_height();
  int32_t height() const;
  void set_height(int32_t value);
  private:
  int32_t _internal_height() const;
  void _internal_set_height(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto.Resolution)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t width_;
    int32_t height_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_desktop_5fextensions_2eproto;
};
// -------------------------------------------------------------------

class Point final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:proto.Point) */ {
 public:
  inline Point() : Point(nullptr) {}
  ~Point() override;
  explicit PROTOBUF_CONSTEXPR Point(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Point(const Point& from);
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point& operator=(Point&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Point& default_instance() {
    return *internal_default_instance();
  }
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }
  inline void Swap(Point* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Point* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Point";
  }
  protected:
  explicit Point(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // int32 x = 1;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // int32 y = 2;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto.Point)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t x_;
    int32_t y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_desktop_5fextensions_2eproto;
};
// -------------------------------------------------------------------

class Screen final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:proto.Screen) */ {
 public:
  inline Screen() : Screen(nullptr) {}
  ~Screen() override;
  explicit PROTOBUF_CONSTEXPR Screen(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Screen(const Screen& from);
  Screen(Screen&& from) noexcept
    : Screen() {
    *this = ::std::move(from);
  }

  inline Screen& operator=(const Screen& from) {
    CopyFrom(from);
    return *this;
  }
  inline Screen& operator=(Screen&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Screen& default_instance() {
    return *internal_default_instance();
  }
  static inline const Screen* internal_default_instance() {
    return reinterpret_cast<const Screen*>(
               &_Screen_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Screen& a, Screen& b) {
    a.Swap(&b);
  }
  inline void Swap(Screen* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Screen* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Screen* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Screen>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Screen& from);
  void MergeFrom(const Screen& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Screen* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Screen";
  }
  protected:
  explicit Screen(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 2,
    kPositionFieldNumber = 3,
    kResolutionFieldNumber = 4,
    kDpiFieldNumber = 5,
    kIdFieldNumber = 1,
  };
  // string title = 2;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // .proto.Point position = 3;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::proto::Point& position() const;
  PROTOBUF_NODISCARD ::proto::Point* release_position();
  ::proto::Point* mutable_position();
  void set_allocated_position(::proto::Point* position);
  private:
  const ::proto::Point& _internal_position() const;
  ::proto::Point* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::proto::Point* position);
  ::proto::Point* unsafe_arena_release_position();

  // .proto.Resolution resolution = 4;
  bool has_resolution() const;
  private:
  bool _internal_has_resolution() const;
  public:
  void clear_resolution();
  const ::proto::Resolution& resolution() const;
  PROTOBUF_NODISCARD ::proto::Resolution* release_resolution();
  ::proto::Resolution* mutable_resolution();
  void set_allocated_resolution(::proto::Resolution* resolution);
  private:
  const ::proto::Resolution& _internal_resolution() const;
  ::proto::Resolution* _internal_mutable_resolution();
  public:
  void unsafe_arena_set_allocated_resolution(
      ::proto::Resolution* resolution);
  ::proto::Resolution* unsafe_arena_release_resolution();

  // .proto.Point dpi = 5;
  bool has_dpi() const;
  private:
  bool _internal_has_dpi() const;
  public:
  void clear_dpi();
  const ::proto::Point& dpi() const;
  PROTOBUF_NODISCARD ::proto::Point* release_dpi();
  ::proto::Point* mutable_dpi();
  void set_allocated_dpi(::proto::Point* dpi);
  private:
  const ::proto::Point& _internal_dpi() const;
  ::proto::Point* _internal_mutable_dpi();
  public:
  void unsafe_arena_set_allocated_dpi(
      ::proto::Point* dpi);
  ::proto::Point* unsafe_arena_release_dpi();

  // int64 id = 1;
  void clear_id();
  int64_t id() const;
  void set_id(int64_t value);
  private:
  int64_t _internal_id() const;
  void _internal_set_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto.Screen)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::proto::Point* position_;
    ::proto::Resolution* resolution_;
    ::proto::Point* dpi_;
    int64_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_desktop_5fextensions_2eproto;
};
// -------------------------------------------------------------------

class ScreenList final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:proto.ScreenList) */ {
 public:
  inline ScreenList() : ScreenList(nullptr) {}
  ~ScreenList() override;
  explicit PROTOBUF_CONSTEXPR ScreenList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScreenList(const ScreenList& from);
  ScreenList(ScreenList&& from) noexcept
    : ScreenList() {
    *this = ::std::move(from);
  }

  inline ScreenList& operator=(const ScreenList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScreenList& operator=(ScreenList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ScreenList& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScreenList* internal_default_instance() {
    return reinterpret_cast<const ScreenList*>(
               &_ScreenList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ScreenList& a, ScreenList& b) {
    a.Swap(&b);
  }
  inline void Swap(ScreenList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScreenList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScreenList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScreenList>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ScreenList& from);
  void MergeFrom(const ScreenList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ScreenList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.ScreenList";
  }
  protected:
  explicit ScreenList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScreenFieldNumber = 1,
    kResolutionFieldNumber = 4,
    kCurrentScreenFieldNumber = 2,
    kPrimaryScreenFieldNumber = 3,
  };
  // repeated .proto.Screen screen = 1;
  int screen_size() const;
  private:
  int _internal_screen_size() const;
  public:
  void clear_screen();
  ::proto::Screen* mutable_screen(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Screen >*
      mutable_screen();
  private:
  const ::proto::Screen& _internal_screen(int index) const;
  ::proto::Screen* _internal_add_screen();
  public:
  const ::proto::Screen& screen(int index) const;
  ::proto::Screen* add_screen();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Screen >&
      screen() const;

  // repeated .proto.Resolution resolution = 4;
  int resolution_size() const;
  private:
  int _internal_resolution_size() const;
  public:
  void clear_resolution();
  ::proto::Resolution* mutable_resolution(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Resolution >*
      mutable_resolution();
  private:
  const ::proto::Resolution& _internal_resolution(int index) const;
  ::proto::Resolution* _internal_add_resolution();
  public:
  const ::proto::Resolution& resolution(int index) const;
  ::proto::Resolution* add_resolution();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Resolution >&
      resolution() const;

  // int64 current_screen = 2;
  void clear_current_screen();
  int64_t current_screen() const;
  void set_current_screen(int64_t value);
  private:
  int64_t _internal_current_screen() const;
  void _internal_set_current_screen(int64_t value);
  public:

  // int64 primary_screen = 3;
  void clear_primary_screen();
  int64_t primary_screen() const;
  void set_primary_screen(int64_t value);
  private:
  int64_t _internal_primary_screen() const;
  void _internal_set_primary_screen(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto.ScreenList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Screen > screen_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Resolution > resolution_;
    int64_t current_screen_;
    int64_t primary_screen_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_desktop_5fextensions_2eproto;
};
// -------------------------------------------------------------------

class PreferredSize final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:proto.PreferredSize) */ {
 public:
  inline PreferredSize() : PreferredSize(nullptr) {}
  ~PreferredSize() override;
  explicit PROTOBUF_CONSTEXPR PreferredSize(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PreferredSize(const PreferredSize& from);
  PreferredSize(PreferredSize&& from) noexcept
    : PreferredSize() {
    *this = ::std::move(from);
  }

  inline PreferredSize& operator=(const PreferredSize& from) {
    CopyFrom(from);
    return *this;
  }
  inline PreferredSize& operator=(PreferredSize&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const PreferredSize& default_instance() {
    return *internal_default_instance();
  }
  static inline const PreferredSize* internal_default_instance() {
    return reinterpret_cast<const PreferredSize*>(
               &_PreferredSize_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PreferredSize& a, PreferredSize& b) {
    a.Swap(&b);
  }
  inline void Swap(PreferredSize* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PreferredSize* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PreferredSize* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PreferredSize>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PreferredSize& from);
  void MergeFrom(const PreferredSize& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PreferredSize* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.PreferredSize";
  }
  protected:
  explicit PreferredSize(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
  };
  // int32 width = 1;
  void clear_width();
  int32_t width() const;
  void set_width(int32_t value);
  private:
  int32_t _internal_width() const;
  void _internal_set_width(int32_t value);
  public:

  // int32 height = 2;
  void clear_height();
  int32_t height() const;
  void set_height(int32_t value);
  private:
  int32_t _internal_height() const;
  void _internal_set_height(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto.PreferredSize)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t width_;
    int32_t height_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_desktop_5fextensions_2eproto;
};
// -------------------------------------------------------------------

class Pause final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:proto.Pause) */ {
 public:
  inline Pause() : Pause(nullptr) {}
  ~Pause() override;
  explicit PROTOBUF_CONSTEXPR Pause(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Pause(const Pause& from);
  Pause(Pause&& from) noexcept
    : Pause() {
    *this = ::std::move(from);
  }

  inline Pause& operator=(const Pause& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pause& operator=(Pause&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Pause& default_instance() {
    return *internal_default_instance();
  }
  static inline const Pause* internal_default_instance() {
    return reinterpret_cast<const Pause*>(
               &_Pause_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Pause& a, Pause& b) {
    a.Swap(&b);
  }
  inline void Swap(Pause* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pause* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Pause* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Pause>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Pause& from);
  void MergeFrom(const Pause& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Pause* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Pause";
  }
  protected:
  explicit Pause(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnableFieldNumber = 1,
  };
  // bool enable = 1;
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:proto.Pause)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool enable_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_desktop_5fextensions_2eproto;
};
// -------------------------------------------------------------------

class PowerControl final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:proto.PowerControl) */ {
 public:
  inline PowerControl() : PowerControl(nullptr) {}
  ~PowerControl() override;
  explicit PROTOBUF_CONSTEXPR PowerControl(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PowerControl(const PowerControl& from);
  PowerControl(PowerControl&& from) noexcept
    : PowerControl() {
    *this = ::std::move(from);
  }

  inline PowerControl& operator=(const PowerControl& from) {
    CopyFrom(from);
    return *this;
  }
  inline PowerControl& operator=(PowerControl&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const PowerControl& default_instance() {
    return *internal_default_instance();
  }
  static inline const PowerControl* internal_default_instance() {
    return reinterpret_cast<const PowerControl*>(
               &_PowerControl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PowerControl& a, PowerControl& b) {
    a.Swap(&b);
  }
  inline void Swap(PowerControl* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PowerControl* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PowerControl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PowerControl>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PowerControl& from);
  void MergeFrom(const PowerControl& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PowerControl* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.PowerControl";
  }
  protected:
  explicit PowerControl(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef PowerControl_Action Action;
  static constexpr Action ACTION_UNKNOWN =
    PowerControl_Action_ACTION_UNKNOWN;
  static constexpr Action ACTION_SHUTDOWN =
    PowerControl_Action_ACTION_SHUTDOWN;
  static constexpr Action ACTION_REBOOT =
    PowerControl_Action_ACTION_REBOOT;
  static constexpr Action ACTION_LOGOFF =
    PowerControl_Action_ACTION_LOGOFF;
  static constexpr Action ACTION_LOCK =
    PowerControl_Action_ACTION_LOCK;
  static constexpr Action ACTION_REBOOT_SAFE_MODE =
    PowerControl_Action_ACTION_REBOOT_SAFE_MODE;
  static inline bool Action_IsValid(int value) {
    return PowerControl_Action_IsValid(value);
  }
  static constexpr Action Action_MIN =
    PowerControl_Action_Action_MIN;
  static constexpr Action Action_MAX =
    PowerControl_Action_Action_MAX;
  static constexpr int Action_ARRAYSIZE =
    PowerControl_Action_Action_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Action_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Action>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Action_Name.");
    return PowerControl_Action_Name(enum_t_value);
  }
  static inline bool Action_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Action* value) {
    return PowerControl_Action_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
  };
  // .proto.PowerControl.Action action = 1;
  void clear_action();
  ::proto::PowerControl_Action action() const;
  void set_action(::proto::PowerControl_Action value);
  private:
  ::proto::PowerControl_Action _internal_action() const;
  void _internal_set_action(::proto::PowerControl_Action value);
  public:

  // @@protoc_insertion_point(class_scope:proto.PowerControl)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int action_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_desktop_5fextensions_2eproto;
};
// -------------------------------------------------------------------

class VideoRecording final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:proto.VideoRecording) */ {
 public:
  inline VideoRecording() : VideoRecording(nullptr) {}
  ~VideoRecording() override;
  explicit PROTOBUF_CONSTEXPR VideoRecording(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VideoRecording(const VideoRecording& from);
  VideoRecording(VideoRecording&& from) noexcept
    : VideoRecording() {
    *this = ::std::move(from);
  }

  inline VideoRecording& operator=(const VideoRecording& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoRecording& operator=(VideoRecording&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const VideoRecording& default_instance() {
    return *internal_default_instance();
  }
  static inline const VideoRecording* internal_default_instance() {
    return reinterpret_cast<const VideoRecording*>(
               &_VideoRecording_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(VideoRecording& a, VideoRecording& b) {
    a.Swap(&b);
  }
  inline void Swap(VideoRecording* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VideoRecording* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VideoRecording* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VideoRecording>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const VideoRecording& from);
  void MergeFrom(const VideoRecording& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VideoRecording* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.VideoRecording";
  }
  protected:
  explicit VideoRecording(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef VideoRecording_Action Action;
  static constexpr Action ACTION_UNKNOWN =
    VideoRecording_Action_ACTION_UNKNOWN;
  static constexpr Action ACTION_STARTED =
    VideoRecording_Action_ACTION_STARTED;
  static constexpr Action ACTION_STOPPED =
    VideoRecording_Action_ACTION_STOPPED;
  static inline bool Action_IsValid(int value) {
    return VideoRecording_Action_IsValid(value);
  }
  static constexpr Action Action_MIN =
    VideoRecording_Action_Action_MIN;
  static constexpr Action Action_MAX =
    VideoRecording_Action_Action_MAX;
  static constexpr int Action_ARRAYSIZE =
    VideoRecording_Action_Action_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Action_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Action>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Action_Name.");
    return VideoRecording_Action_Name(enum_t_value);
  }
  static inline bool Action_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Action* value) {
    return VideoRecording_Action_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
  };
  // .proto.VideoRecording.Action action = 1;
  void clear_action();
  ::proto::VideoRecording_Action action() const;
  void set_action(::proto::VideoRecording_Action value);
  private:
  ::proto::VideoRecording_Action _internal_action() const;
  void _internal_set_action(::proto::VideoRecording_Action value);
  public:

  // @@protoc_insertion_point(class_scope:proto.VideoRecording)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int action_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_desktop_5fextensions_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Resolution

// int32 width = 1;
inline void Resolution::clear_width() {
  _impl_.width_ = 0;
}
inline int32_t Resolution::_internal_width() const {
  return _impl_.width_;
}
inline int32_t Resolution::width() const {
  // @@protoc_insertion_point(field_get:proto.Resolution.width)
  return _internal_width();
}
inline void Resolution::_internal_set_width(int32_t value) {
  
  _impl_.width_ = value;
}
inline void Resolution::set_width(int32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:proto.Resolution.width)
}

// int32 height = 2;
inline void Resolution::clear_height() {
  _impl_.height_ = 0;
}
inline int32_t Resolution::_internal_height() const {
  return _impl_.height_;
}
inline int32_t Resolution::height() const {
  // @@protoc_insertion_point(field_get:proto.Resolution.height)
  return _internal_height();
}
inline void Resolution::_internal_set_height(int32_t value) {
  
  _impl_.height_ = value;
}
inline void Resolution::set_height(int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:proto.Resolution.height)
}

// -------------------------------------------------------------------

// Point

// int32 x = 1;
inline void Point::clear_x() {
  _impl_.x_ = 0;
}
inline int32_t Point::_internal_x() const {
  return _impl_.x_;
}
inline int32_t Point::x() const {
  // @@protoc_insertion_point(field_get:proto.Point.x)
  return _internal_x();
}
inline void Point::_internal_set_x(int32_t value) {
  
  _impl_.x_ = value;
}
inline void Point::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:proto.Point.x)
}

// int32 y = 2;
inline void Point::clear_y() {
  _impl_.y_ = 0;
}
inline int32_t Point::_internal_y() const {
  return _impl_.y_;
}
inline int32_t Point::y() const {
  // @@protoc_insertion_point(field_get:proto.Point.y)
  return _internal_y();
}
inline void Point::_internal_set_y(int32_t value) {
  
  _impl_.y_ = value;
}
inline void Point::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:proto.Point.y)
}

// -------------------------------------------------------------------

// Screen

// int64 id = 1;
inline void Screen::clear_id() {
  _impl_.id_ = int64_t{0};
}
inline int64_t Screen::_internal_id() const {
  return _impl_.id_;
}
inline int64_t Screen::id() const {
  // @@protoc_insertion_point(field_get:proto.Screen.id)
  return _internal_id();
}
inline void Screen::_internal_set_id(int64_t value) {
  
  _impl_.id_ = value;
}
inline void Screen::set_id(int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:proto.Screen.id)
}

// string title = 2;
inline void Screen::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& Screen::title() const {
  // @@protoc_insertion_point(field_get:proto.Screen.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Screen::set_title(ArgT0&& arg0, ArgT... args) {
 
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.Screen.title)
}
inline std::string* Screen::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:proto.Screen.title)
  return _s;
}
inline const std::string& Screen::_internal_title() const {
  return _impl_.title_.Get();
}
inline void Screen::_internal_set_title(const std::string& value) {
  
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* Screen::_internal_mutable_title() {
  
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* Screen::release_title() {
  // @@protoc_insertion_point(field_release:proto.Screen.title)
  return _impl_.title_.Release();
}
inline void Screen::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.Screen.title)
}

// .proto.Point position = 3;
inline bool Screen::_internal_has_position() const {
  return this != internal_default_instance() && _impl_.position_ != nullptr;
}
inline bool Screen::has_position() const {
  return _internal_has_position();
}
inline void Screen::clear_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
}
inline const ::proto::Point& Screen::_internal_position() const {
  const ::proto::Point* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Point&>(
      ::proto::_Point_default_instance_);
}
inline const ::proto::Point& Screen::position() const {
  // @@protoc_insertion_point(field_get:proto.Screen.position)
  return _internal_position();
}
inline void Screen::unsafe_arena_set_allocated_position(
    ::proto::Point* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Screen.position)
}
inline ::proto::Point* Screen::release_position() {
  
  ::proto::Point* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Point* Screen::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:proto.Screen.position)
  
  ::proto::Point* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::proto::Point* Screen::_internal_mutable_position() {
  
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Point>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::proto::Point* Screen::mutable_position() {
  ::proto::Point* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:proto.Screen.position)
  return _msg;
}
inline void Screen::set_allocated_position(::proto::Point* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:proto.Screen.position)
}

// .proto.Resolution resolution = 4;
inline bool Screen::_internal_has_resolution() const {
  return this != internal_default_instance() && _impl_.resolution_ != nullptr;
}
inline bool Screen::has_resolution() const {
  return _internal_has_resolution();
}
inline void Screen::clear_resolution() {
  if (GetArenaForAllocation() == nullptr && _impl_.resolution_ != nullptr) {
    delete _impl_.resolution_;
  }
  _impl_.resolution_ = nullptr;
}
inline const ::proto::Resolution& Screen::_internal_resolution() const {
  const ::proto::Resolution* p = _impl_.resolution_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Resolution&>(
      ::proto::_Resolution_default_instance_);
}
inline const ::proto::Resolution& Screen::resolution() const {
  // @@protoc_insertion_point(field_get:proto.Screen.resolution)
  return _internal_resolution();
}
inline void Screen::unsafe_arena_set_allocated_resolution(
    ::proto::Resolution* resolution) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.resolution_);
  }
  _impl_.resolution_ = resolution;
  if (resolution) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Screen.resolution)
}
inline ::proto::Resolution* Screen::release_resolution() {
  
  ::proto::Resolution* temp = _impl_.resolution_;
  _impl_.resolution_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Resolution* Screen::unsafe_arena_release_resolution() {
  // @@protoc_insertion_point(field_release:proto.Screen.resolution)
  
  ::proto::Resolution* temp = _impl_.resolution_;
  _impl_.resolution_ = nullptr;
  return temp;
}
inline ::proto::Resolution* Screen::_internal_mutable_resolution() {
  
  if (_impl_.resolution_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Resolution>(GetArenaForAllocation());
    _impl_.resolution_ = p;
  }
  return _impl_.resolution_;
}
inline ::proto::Resolution* Screen::mutable_resolution() {
  ::proto::Resolution* _msg = _internal_mutable_resolution();
  // @@protoc_insertion_point(field_mutable:proto.Screen.resolution)
  return _msg;
}
inline void Screen::set_allocated_resolution(::proto::Resolution* resolution) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.resolution_;
  }
  if (resolution) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resolution);
    if (message_arena != submessage_arena) {
      resolution = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolution, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.resolution_ = resolution;
  // @@protoc_insertion_point(field_set_allocated:proto.Screen.resolution)
}

// .proto.Point dpi = 5;
inline bool Screen::_internal_has_dpi() const {
  return this != internal_default_instance() && _impl_.dpi_ != nullptr;
}
inline bool Screen::has_dpi() const {
  return _internal_has_dpi();
}
inline void Screen::clear_dpi() {
  if (GetArenaForAllocation() == nullptr && _impl_.dpi_ != nullptr) {
    delete _impl_.dpi_;
  }
  _impl_.dpi_ = nullptr;
}
inline const ::proto::Point& Screen::_internal_dpi() const {
  const ::proto::Point* p = _impl_.dpi_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::Point&>(
      ::proto::_Point_default_instance_);
}
inline const ::proto::Point& Screen::dpi() const {
  // @@protoc_insertion_point(field_get:proto.Screen.dpi)
  return _internal_dpi();
}
inline void Screen::unsafe_arena_set_allocated_dpi(
    ::proto::Point* dpi) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dpi_);
  }
  _impl_.dpi_ = dpi;
  if (dpi) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Screen.dpi)
}
inline ::proto::Point* Screen::release_dpi() {
  
  ::proto::Point* temp = _impl_.dpi_;
  _impl_.dpi_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::Point* Screen::unsafe_arena_release_dpi() {
  // @@protoc_insertion_point(field_release:proto.Screen.dpi)
  
  ::proto::Point* temp = _impl_.dpi_;
  _impl_.dpi_ = nullptr;
  return temp;
}
inline ::proto::Point* Screen::_internal_mutable_dpi() {
  
  if (_impl_.dpi_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Point>(GetArenaForAllocation());
    _impl_.dpi_ = p;
  }
  return _impl_.dpi_;
}
inline ::proto::Point* Screen::mutable_dpi() {
  ::proto::Point* _msg = _internal_mutable_dpi();
  // @@protoc_insertion_point(field_mutable:proto.Screen.dpi)
  return _msg;
}
inline void Screen::set_allocated_dpi(::proto::Point* dpi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.dpi_;
  }
  if (dpi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(dpi);
    if (message_arena != submessage_arena) {
      dpi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dpi, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.dpi_ = dpi;
  // @@protoc_insertion_point(field_set_allocated:proto.Screen.dpi)
}

// -------------------------------------------------------------------

// ScreenList

// repeated .proto.Screen screen = 1;
inline int ScreenList::_internal_screen_size() const {
  return _impl_.screen_.size();
}
inline int ScreenList::screen_size() const {
  return _internal_screen_size();
}
inline void ScreenList::clear_screen() {
  _impl_.screen_.Clear();
}
inline ::proto::Screen* ScreenList::mutable_screen(int index) {
  // @@protoc_insertion_point(field_mutable:proto.ScreenList.screen)
  return _impl_.screen_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Screen >*
ScreenList::mutable_screen() {
  // @@protoc_insertion_point(field_mutable_list:proto.ScreenList.screen)
  return &_impl_.screen_;
}
inline const ::proto::Screen& ScreenList::_internal_screen(int index) const {
  return _impl_.screen_.Get(index);
}
inline const ::proto::Screen& ScreenList::screen(int index) const {
  // @@protoc_insertion_point(field_get:proto.ScreenList.screen)
  return _internal_screen(index);
}
inline ::proto::Screen* ScreenList::_internal_add_screen() {
  return _impl_.screen_.Add();
}
inline ::proto::Screen* ScreenList::add_screen() {
  ::proto::Screen* _add = _internal_add_screen();
  // @@protoc_insertion_point(field_add:proto.ScreenList.screen)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Screen >&
ScreenList::screen() const {
  // @@protoc_insertion_point(field_list:proto.ScreenList.screen)
  return _impl_.screen_;
}

// int64 current_screen = 2;
inline void ScreenList::clear_current_screen() {
  _impl_.current_screen_ = int64_t{0};
}
inline int64_t ScreenList::_internal_current_screen() const {
  return _impl_.current_screen_;
}
inline int64_t ScreenList::current_screen() const {
  // @@protoc_insertion_point(field_get:proto.ScreenList.current_screen)
  return _internal_current_screen();
}
inline void ScreenList::_internal_set_current_screen(int64_t value) {
  
  _impl_.current_screen_ = value;
}
inline void ScreenList::set_current_screen(int64_t value) {
  _internal_set_current_screen(value);
  // @@protoc_insertion_point(field_set:proto.ScreenList.current_screen)
}

// int64 primary_screen = 3;
inline void ScreenList::clear_primary_screen() {
  _impl_.primary_screen_ = int64_t{0};
}
inline int64_t ScreenList::_internal_primary_screen() const {
  return _impl_.primary_screen_;
}
inline int64_t ScreenList::primary_screen() const {
  // @@protoc_insertion_point(field_get:proto.ScreenList.primary_screen)
  return _internal_primary_screen();
}
inline void ScreenList::_internal_set_primary_screen(int64_t value) {
  
  _impl_.primary_screen_ = value;
}
inline void ScreenList::set_primary_screen(int64_t value) {
  _internal_set_primary_screen(value);
  // @@protoc_insertion_point(field_set:proto.ScreenList.primary_screen)
}

// repeated .proto.Resolution resolution = 4;
inline int ScreenList::_internal_resolution_size() const {
  return _impl_.resolution_.size();
}
inline int ScreenList::resolution_size() const {
  return _internal_resolution_size();
}
inline void ScreenList::clear_resolution() {
  _impl_.resolution_.Clear();
}
inline ::proto::Resolution* ScreenList::mutable_resolution(int index) {
  // @@protoc_insertion_point(field_mutable:proto.ScreenList.resolution)
  return _impl_.resolution_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Resolution >*
ScreenList::mutable_resolution() {
  // @@protoc_insertion_point(field_mutable_list:proto.ScreenList.resolution)
  return &_impl_.resolution_;
}
inline const ::proto::Resolution& ScreenList::_internal_resolution(int index) const {
  return _impl_.resolution_.Get(index);
}
inline const ::proto::Resolution& ScreenList::resolution(int index) const {
  // @@protoc_insertion_point(field_get:proto.ScreenList.resolution)
  return _internal_resolution(index);
}
inline ::proto::Resolution* ScreenList::_internal_add_resolution() {
  return _impl_.resolution_.Add();
}
inline ::proto::Resolution* ScreenList::add_resolution() {
  ::proto::Resolution* _add = _internal_add_resolution();
  // @@protoc_insertion_point(field_add:proto.ScreenList.resolution)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Resolution >&
ScreenList::resolution() const {
  // @@protoc_insertion_point(field_list:proto.ScreenList.resolution)
  return _impl_.resolution_;
}

// -------------------------------------------------------------------

// PreferredSize

// int32 width = 1;
inline void PreferredSize::clear_width() {
  _impl_.width_ = 0;
}
inline int32_t PreferredSize::_internal_width() const {
  return _impl_.width_;
}
inline int32_t PreferredSize::width() const {
  // @@protoc_insertion_point(field_get:proto.PreferredSize.width)
  return _internal_width();
}
inline void PreferredSize::_internal_set_width(int32_t value) {
  
  _impl_.width_ = value;
}
inline void PreferredSize::set_width(int32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:proto.PreferredSize.width)
}

// int32 height = 2;
inline void PreferredSize::clear_height() {
  _impl_.height_ = 0;
}
inline int32_t PreferredSize::_internal_height() const {
  return _impl_.height_;
}
inline int32_t PreferredSize::height() const {
  // @@protoc_insertion_point(field_get:proto.PreferredSize.height)
  return _internal_height();
}
inline void PreferredSize::_internal_set_height(int32_t value) {
  
  _impl_.height_ = value;
}
inline void PreferredSize::set_height(int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:proto.PreferredSize.height)
}

// -------------------------------------------------------------------

// Pause

// bool enable = 1;
inline void Pause::clear_enable() {
  _impl_.enable_ = false;
}
inline bool Pause::_internal_enable() const {
  return _impl_.enable_;
}
inline bool Pause::enable() const {
  // @@protoc_insertion_point(field_get:proto.Pause.enable)
  return _internal_enable();
}
inline void Pause::_internal_set_enable(bool value) {
  
  _impl_.enable_ = value;
}
inline void Pause::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:proto.Pause.enable)
}

// -------------------------------------------------------------------

// PowerControl

// .proto.PowerControl.Action action = 1;
inline void PowerControl::clear_action() {
  _impl_.action_ = 0;
}
inline ::proto::PowerControl_Action PowerControl::_internal_action() const {
  return static_cast< ::proto::PowerControl_Action >(_impl_.action_);
}
inline ::proto::PowerControl_Action PowerControl::action() const {
  // @@protoc_insertion_point(field_get:proto.PowerControl.action)
  return _internal_action();
}
inline void PowerControl::_internal_set_action(::proto::PowerControl_Action value) {
  
  _impl_.action_ = value;
}
inline void PowerControl::set_action(::proto::PowerControl_Action value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:proto.PowerControl.action)
}

// -------------------------------------------------------------------

// VideoRecording

// .proto.VideoRecording.Action action = 1;
inline void VideoRecording::clear_action() {
  _impl_.action_ = 0;
}
inline ::proto::VideoRecording_Action VideoRecording::_internal_action() const {
  return static_cast< ::proto::VideoRecording_Action >(_impl_.action_);
}
inline ::proto::VideoRecording_Action VideoRecording::action() const {
  // @@protoc_insertion_point(field_get:proto.VideoRecording.action)
  return _internal_action();
}
inline void VideoRecording::_internal_set_action(::proto::VideoRecording_Action value) {
  
  _impl_.action_ = value;
}
inline void VideoRecording::set_action(::proto::VideoRecording_Action value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:proto.VideoRecording.action)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::proto::PowerControl_Action> : ::std::true_type {};
template <> struct is_proto_enum< ::proto::VideoRecording_Action> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_desktop_5fextensions_2eproto
