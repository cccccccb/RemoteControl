// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: router_common.proto

#include "router_common.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace proto {
PROTOBUF_CONSTEXPR RelayKey::RelayKey(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.public_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.iv_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.key_id_)*/0u
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.encryption_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RelayKeyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RelayKeyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RelayKeyDefaultTypeInternal() {}
  union {
    RelayKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RelayKeyDefaultTypeInternal _RelayKey_default_instance_;
PROTOBUF_CONSTEXPR RelayCredentials::RelayCredentials(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.host_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.secret_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.key_)*/nullptr
  , /*decltype(_impl_.port_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RelayCredentialsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RelayCredentialsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RelayCredentialsDefaultTypeInternal() {}
  union {
    RelayCredentials _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RelayCredentialsDefaultTypeInternal _RelayCredentials_default_instance_;
PROTOBUF_CONSTEXPR PeerConnection::PeerConnection(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.client_address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.client_user_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.host_address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.session_id_)*/uint64_t{0u}
  , /*decltype(_impl_.host_id_)*/uint64_t{0u}
  , /*decltype(_impl_.bytes_transferred_)*/int64_t{0}
  , /*decltype(_impl_.duration_)*/int64_t{0}
  , /*decltype(_impl_.idle_time_)*/int64_t{0}
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PeerConnectionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PeerConnectionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PeerConnectionDefaultTypeInternal() {}
  union {
    PeerConnection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PeerConnectionDefaultTypeInternal _PeerConnection_default_instance_;
PROTOBUF_CONSTEXPR PeerConnectionRequest::PeerConnectionRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.relay_session_id_)*/int64_t{0}
  , /*decltype(_impl_.peer_session_id_)*/uint64_t{0u}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PeerConnectionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PeerConnectionRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PeerConnectionRequestDefaultTypeInternal() {}
  union {
    PeerConnectionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PeerConnectionRequestDefaultTypeInternal _PeerConnectionRequest_default_instance_;
}  // namespace proto
namespace proto {
bool RelayKey_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> RelayKey_Type_strings[2] = {};

static const char RelayKey_Type_names[] =
  "TYPE_UNKNOWN"
  "TYPE_X25519";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry RelayKey_Type_entries[] = {
  { {RelayKey_Type_names + 0, 12}, 0 },
  { {RelayKey_Type_names + 12, 11}, 1 },
};

static const int RelayKey_Type_entries_by_number[] = {
  0, // 0 -> TYPE_UNKNOWN
  1, // 1 -> TYPE_X25519
};

const std::string& RelayKey_Type_Name(
    RelayKey_Type value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          RelayKey_Type_entries,
          RelayKey_Type_entries_by_number,
          2, RelayKey_Type_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      RelayKey_Type_entries,
      RelayKey_Type_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     RelayKey_Type_strings[idx].get();
}
bool RelayKey_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RelayKey_Type* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      RelayKey_Type_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<RelayKey_Type>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr RelayKey_Type RelayKey::TYPE_UNKNOWN;
constexpr RelayKey_Type RelayKey::TYPE_X25519;
constexpr RelayKey_Type RelayKey::Type_MIN;
constexpr RelayKey_Type RelayKey::Type_MAX;
constexpr int RelayKey::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool RelayKey_Encryption_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> RelayKey_Encryption_strings[2] = {};

static const char RelayKey_Encryption_names[] =
  "ENCRYPTION_CHACHA20_POLY1305"
  "ENCRYPTION_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry RelayKey_Encryption_entries[] = {
  { {RelayKey_Encryption_names + 0, 28}, 1 },
  { {RelayKey_Encryption_names + 28, 18}, 0 },
};

static const int RelayKey_Encryption_entries_by_number[] = {
  1, // 0 -> ENCRYPTION_UNKNOWN
  0, // 1 -> ENCRYPTION_CHACHA20_POLY1305
};

const std::string& RelayKey_Encryption_Name(
    RelayKey_Encryption value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          RelayKey_Encryption_entries,
          RelayKey_Encryption_entries_by_number,
          2, RelayKey_Encryption_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      RelayKey_Encryption_entries,
      RelayKey_Encryption_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     RelayKey_Encryption_strings[idx].get();
}
bool RelayKey_Encryption_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RelayKey_Encryption* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      RelayKey_Encryption_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<RelayKey_Encryption>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr RelayKey_Encryption RelayKey::ENCRYPTION_UNKNOWN;
constexpr RelayKey_Encryption RelayKey::ENCRYPTION_CHACHA20_POLY1305;
constexpr RelayKey_Encryption RelayKey::Encryption_MIN;
constexpr RelayKey_Encryption RelayKey::Encryption_MAX;
constexpr int RelayKey::Encryption_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool PeerConnection_PeerStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> PeerConnection_PeerStatus_strings[3] = {};

static const char PeerConnection_PeerStatus_names[] =
  "PEER_STATUS_ACTIVE"
  "PEER_STATUS_FINISHED"
  "PEER_STATUS_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry PeerConnection_PeerStatus_entries[] = {
  { {PeerConnection_PeerStatus_names + 0, 18}, 1 },
  { {PeerConnection_PeerStatus_names + 18, 20}, 2 },
  { {PeerConnection_PeerStatus_names + 38, 19}, 0 },
};

static const int PeerConnection_PeerStatus_entries_by_number[] = {
  2, // 0 -> PEER_STATUS_UNKNOWN
  0, // 1 -> PEER_STATUS_ACTIVE
  1, // 2 -> PEER_STATUS_FINISHED
};

const std::string& PeerConnection_PeerStatus_Name(
    PeerConnection_PeerStatus value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          PeerConnection_PeerStatus_entries,
          PeerConnection_PeerStatus_entries_by_number,
          3, PeerConnection_PeerStatus_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      PeerConnection_PeerStatus_entries,
      PeerConnection_PeerStatus_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     PeerConnection_PeerStatus_strings[idx].get();
}
bool PeerConnection_PeerStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PeerConnection_PeerStatus* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      PeerConnection_PeerStatus_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<PeerConnection_PeerStatus>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PeerConnection_PeerStatus PeerConnection::PEER_STATUS_UNKNOWN;
constexpr PeerConnection_PeerStatus PeerConnection::PEER_STATUS_ACTIVE;
constexpr PeerConnection_PeerStatus PeerConnection::PEER_STATUS_FINISHED;
constexpr PeerConnection_PeerStatus PeerConnection::PeerStatus_MIN;
constexpr PeerConnection_PeerStatus PeerConnection::PeerStatus_MAX;
constexpr int PeerConnection::PeerStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool RouterChannelId_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> RouterChannelId_strings[1] = {};

static const char RouterChannelId_names[] =
  "ROUTER_CHANNEL_ID_SESSION";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry RouterChannelId_entries[] = {
  { {RouterChannelId_names + 0, 25}, 0 },
};

static const int RouterChannelId_entries_by_number[] = {
  0, // 0 -> ROUTER_CHANNEL_ID_SESSION
};

const std::string& RouterChannelId_Name(
    RouterChannelId value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          RouterChannelId_entries,
          RouterChannelId_entries_by_number,
          1, RouterChannelId_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      RouterChannelId_entries,
      RouterChannelId_entries_by_number,
      1, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     RouterChannelId_strings[idx].get();
}
bool RouterChannelId_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RouterChannelId* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      RouterChannelId_entries, 1, name, &int_value);
  if (success) {
    *value = static_cast<RouterChannelId>(int_value);
  }
  return success;
}
bool RouterSession_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> RouterSession_strings[5] = {};

static const char RouterSession_names[] =
  "ROUTER_SESSION_ADMIN"
  "ROUTER_SESSION_CLIENT"
  "ROUTER_SESSION_HOST"
  "ROUTER_SESSION_RELAY"
  "ROUTER_SESSION_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry RouterSession_entries[] = {
  { {RouterSession_names + 0, 20}, 1 },
  { {RouterSession_names + 20, 21}, 2 },
  { {RouterSession_names + 41, 19}, 4 },
  { {RouterSession_names + 60, 20}, 8 },
  { {RouterSession_names + 80, 22}, 0 },
};

static const int RouterSession_entries_by_number[] = {
  4, // 0 -> ROUTER_SESSION_UNKNOWN
  0, // 1 -> ROUTER_SESSION_ADMIN
  1, // 2 -> ROUTER_SESSION_CLIENT
  2, // 4 -> ROUTER_SESSION_HOST
  3, // 8 -> ROUTER_SESSION_RELAY
};

const std::string& RouterSession_Name(
    RouterSession value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          RouterSession_entries,
          RouterSession_entries_by_number,
          5, RouterSession_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      RouterSession_entries,
      RouterSession_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     RouterSession_strings[idx].get();
}
bool RouterSession_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RouterSession* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      RouterSession_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<RouterSession>(int_value);
  }
  return success;
}
bool PeerConnectionRequestType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> PeerConnectionRequestType_strings[2] = {};

static const char PeerConnectionRequestType_names[] =
  "PEER_CONNECTION_REQUEST_DISCONNECT"
  "PEER_CONNECTION_REQUEST_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry PeerConnectionRequestType_entries[] = {
  { {PeerConnectionRequestType_names + 0, 34}, 1 },
  { {PeerConnectionRequestType_names + 34, 31}, 0 },
};

static const int PeerConnectionRequestType_entries_by_number[] = {
  1, // 0 -> PEER_CONNECTION_REQUEST_UNKNOWN
  0, // 1 -> PEER_CONNECTION_REQUEST_DISCONNECT
};

const std::string& PeerConnectionRequestType_Name(
    PeerConnectionRequestType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          PeerConnectionRequestType_entries,
          PeerConnectionRequestType_entries_by_number,
          2, PeerConnectionRequestType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      PeerConnectionRequestType_entries,
      PeerConnectionRequestType_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     PeerConnectionRequestType_strings[idx].get();
}
bool PeerConnectionRequestType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PeerConnectionRequestType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      PeerConnectionRequestType_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<PeerConnectionRequestType>(int_value);
  }
  return success;
}

// ===================================================================

class RelayKey::_Internal {
 public:
};

RelayKey::RelayKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.RelayKey)
}
RelayKey::RelayKey(const RelayKey& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  RelayKey* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.public_key_){}
    , decltype(_impl_.iv_){}
    , decltype(_impl_.key_id_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.encryption_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.public_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.public_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_public_key().empty()) {
    _this->_impl_.public_key_.Set(from._internal_public_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.iv_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.iv_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_iv().empty()) {
    _this->_impl_.iv_.Set(from._internal_iv(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.key_id_, &from._impl_.key_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.encryption_) -
    reinterpret_cast<char*>(&_impl_.key_id_)) + sizeof(_impl_.encryption_));
  // @@protoc_insertion_point(copy_constructor:proto.RelayKey)
}

inline void RelayKey::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.public_key_){}
    , decltype(_impl_.iv_){}
    , decltype(_impl_.key_id_){0u}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.encryption_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.public_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.public_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.iv_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.iv_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RelayKey::~RelayKey() {
  // @@protoc_insertion_point(destructor:proto.RelayKey)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RelayKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.public_key_.Destroy();
  _impl_.iv_.Destroy();
}

void RelayKey::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RelayKey::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.RelayKey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.public_key_.ClearToEmpty();
  _impl_.iv_.ClearToEmpty();
  ::memset(&_impl_.key_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.encryption_) -
      reinterpret_cast<char*>(&_impl_.key_id_)) + sizeof(_impl_.encryption_));
  _internal_metadata_.Clear<std::string>();
}

const char* RelayKey::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 key_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.key_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.RelayKey.Type type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::proto::RelayKey_Type>(val));
        } else
          goto handle_unusual;
        continue;
      // .proto.RelayKey.Encryption encryption = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_encryption(static_cast<::proto::RelayKey_Encryption>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes public_key = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_public_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes iv = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_iv();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RelayKey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.RelayKey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 key_id = 1;
  if (this->_internal_key_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_key_id(), target);
  }

  // .proto.RelayKey.Type type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // .proto.RelayKey.Encryption encryption = 3;
  if (this->_internal_encryption() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_encryption(), target);
  }

  // bytes public_key = 4;
  if (!this->_internal_public_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_public_key(), target);
  }

  // bytes iv = 5;
  if (!this->_internal_iv().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_iv(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.RelayKey)
  return target;
}

size_t RelayKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.RelayKey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes public_key = 4;
  if (!this->_internal_public_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_public_key());
  }

  // bytes iv = 5;
  if (!this->_internal_iv().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_iv());
  }

  // uint32 key_id = 1;
  if (this->_internal_key_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_key_id());
  }

  // .proto.RelayKey.Type type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .proto.RelayKey.Encryption encryption = 3;
  if (this->_internal_encryption() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_encryption());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RelayKey::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RelayKey*>(
      &from));
}

void RelayKey::MergeFrom(const RelayKey& from) {
  RelayKey* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.RelayKey)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_public_key().empty()) {
    _this->_internal_set_public_key(from._internal_public_key());
  }
  if (!from._internal_iv().empty()) {
    _this->_internal_set_iv(from._internal_iv());
  }
  if (from._internal_key_id() != 0) {
    _this->_internal_set_key_id(from._internal_key_id());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_encryption() != 0) {
    _this->_internal_set_encryption(from._internal_encryption());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RelayKey::CopyFrom(const RelayKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.RelayKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelayKey::IsInitialized() const {
  return true;
}

void RelayKey::InternalSwap(RelayKey* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.public_key_, lhs_arena,
      &other->_impl_.public_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.iv_, lhs_arena,
      &other->_impl_.iv_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RelayKey, _impl_.encryption_)
      + sizeof(RelayKey::_impl_.encryption_)
      - PROTOBUF_FIELD_OFFSET(RelayKey, _impl_.key_id_)>(
          reinterpret_cast<char*>(&_impl_.key_id_),
          reinterpret_cast<char*>(&other->_impl_.key_id_));
}

std::string RelayKey::GetTypeName() const {
  return "proto.RelayKey";
}


// ===================================================================

class RelayCredentials::_Internal {
 public:
  static const ::proto::RelayKey& key(const RelayCredentials* msg);
};

const ::proto::RelayKey&
RelayCredentials::_Internal::key(const RelayCredentials* msg) {
  return *msg->_impl_.key_;
}
RelayCredentials::RelayCredentials(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.RelayCredentials)
}
RelayCredentials::RelayCredentials(const RelayCredentials& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  RelayCredentials* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.host_){}
    , decltype(_impl_.secret_){}
    , decltype(_impl_.key_){nullptr}
    , decltype(_impl_.port_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_host().empty()) {
    _this->_impl_.host_.Set(from._internal_host(), 
      _this->GetArenaForAllocation());
  }
  _impl_.secret_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.secret_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_secret().empty()) {
    _this->_impl_.secret_.Set(from._internal_secret(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_key()) {
    _this->_impl_.key_ = new ::proto::RelayKey(*from._impl_.key_);
  }
  _this->_impl_.port_ = from._impl_.port_;
  // @@protoc_insertion_point(copy_constructor:proto.RelayCredentials)
}

inline void RelayCredentials::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.host_){}
    , decltype(_impl_.secret_){}
    , decltype(_impl_.key_){nullptr}
    , decltype(_impl_.port_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.secret_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.secret_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RelayCredentials::~RelayCredentials() {
  // @@protoc_insertion_point(destructor:proto.RelayCredentials)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RelayCredentials::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.host_.Destroy();
  _impl_.secret_.Destroy();
  if (this != internal_default_instance()) delete _impl_.key_;
}

void RelayCredentials::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RelayCredentials::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.RelayCredentials)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.host_.ClearToEmpty();
  _impl_.secret_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.key_ != nullptr) {
    delete _impl_.key_;
  }
  _impl_.key_ = nullptr;
  _impl_.port_ = 0u;
  _internal_metadata_.Clear<std::string>();
}

const char* RelayCredentials::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string host = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_host();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.RelayKey key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes secret = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_secret();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RelayCredentials::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.RelayCredentials)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string host = 1;
  if (!this->_internal_host().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host().data(), static_cast<int>(this->_internal_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.RelayCredentials.host");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_host(), target);
  }

  // uint32 port = 2;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_port(), target);
  }

  // .proto.RelayKey key = 3;
  if (this->_internal_has_key()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::key(this),
        _Internal::key(this).GetCachedSize(), target, stream);
  }

  // bytes secret = 4;
  if (!this->_internal_secret().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_secret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.RelayCredentials)
  return target;
}

size_t RelayCredentials::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.RelayCredentials)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string host = 1;
  if (!this->_internal_host().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host());
  }

  // bytes secret = 4;
  if (!this->_internal_secret().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_secret());
  }

  // .proto.RelayKey key = 3;
  if (this->_internal_has_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.key_);
  }

  // uint32 port = 2;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RelayCredentials::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RelayCredentials*>(
      &from));
}

void RelayCredentials::MergeFrom(const RelayCredentials& from) {
  RelayCredentials* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.RelayCredentials)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_host().empty()) {
    _this->_internal_set_host(from._internal_host());
  }
  if (!from._internal_secret().empty()) {
    _this->_internal_set_secret(from._internal_secret());
  }
  if (from._internal_has_key()) {
    _this->_internal_mutable_key()->::proto::RelayKey::MergeFrom(
        from._internal_key());
  }
  if (from._internal_port() != 0) {
    _this->_internal_set_port(from._internal_port());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RelayCredentials::CopyFrom(const RelayCredentials& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.RelayCredentials)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelayCredentials::IsInitialized() const {
  return true;
}

void RelayCredentials::InternalSwap(RelayCredentials* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.host_, lhs_arena,
      &other->_impl_.host_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.secret_, lhs_arena,
      &other->_impl_.secret_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RelayCredentials, _impl_.port_)
      + sizeof(RelayCredentials::_impl_.port_)
      - PROTOBUF_FIELD_OFFSET(RelayCredentials, _impl_.key_)>(
          reinterpret_cast<char*>(&_impl_.key_),
          reinterpret_cast<char*>(&other->_impl_.key_));
}

std::string RelayCredentials::GetTypeName() const {
  return "proto.RelayCredentials";
}


// ===================================================================

class PeerConnection::_Internal {
 public:
};

PeerConnection::PeerConnection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.PeerConnection)
}
PeerConnection::PeerConnection(const PeerConnection& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  PeerConnection* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.client_address_){}
    , decltype(_impl_.client_user_name_){}
    , decltype(_impl_.host_address_){}
    , decltype(_impl_.session_id_){}
    , decltype(_impl_.host_id_){}
    , decltype(_impl_.bytes_transferred_){}
    , decltype(_impl_.duration_){}
    , decltype(_impl_.idle_time_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.client_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client_address().empty()) {
    _this->_impl_.client_address_.Set(from._internal_client_address(), 
      _this->GetArenaForAllocation());
  }
  _impl_.client_user_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_user_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client_user_name().empty()) {
    _this->_impl_.client_user_name_.Set(from._internal_client_user_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.host_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_host_address().empty()) {
    _this->_impl_.host_address_.Set(from._internal_host_address(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.session_id_, &from._impl_.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.session_id_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:proto.PeerConnection)
}

inline void PeerConnection::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.client_address_){}
    , decltype(_impl_.client_user_name_){}
    , decltype(_impl_.host_address_){}
    , decltype(_impl_.session_id_){uint64_t{0u}}
    , decltype(_impl_.host_id_){uint64_t{0u}}
    , decltype(_impl_.bytes_transferred_){int64_t{0}}
    , decltype(_impl_.duration_){int64_t{0}}
    , decltype(_impl_.idle_time_){int64_t{0}}
    , decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.client_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.client_user_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_user_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.host_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PeerConnection::~PeerConnection() {
  // @@protoc_insertion_point(destructor:proto.PeerConnection)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PeerConnection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.client_address_.Destroy();
  _impl_.client_user_name_.Destroy();
  _impl_.host_address_.Destroy();
}

void PeerConnection::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PeerConnection::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PeerConnection)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.client_address_.ClearToEmpty();
  _impl_.client_user_name_.ClearToEmpty();
  _impl_.host_address_.ClearToEmpty();
  ::memset(&_impl_.session_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.status_) -
      reinterpret_cast<char*>(&_impl_.session_id_)) + sizeof(_impl_.status_));
  _internal_metadata_.Clear<std::string>();
}

const char* PeerConnection::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.PeerConnection.PeerStatus status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::proto::PeerConnection_PeerStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // string client_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_client_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // string client_user_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_client_user_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // string host_address = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_host_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // fixed64 host_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _impl_.host_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // int64 bytes_transferred = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.bytes_transferred_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 duration = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 idle_time = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.idle_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PeerConnection::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.PeerConnection)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 session_id = 1;
  if (this->_internal_session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_session_id(), target);
  }

  // .proto.PeerConnection.PeerStatus status = 2;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  // string client_address = 3;
  if (!this->_internal_client_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_address().data(), static_cast<int>(this->_internal_client_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.PeerConnection.client_address");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_client_address(), target);
  }

  // string client_user_name = 4;
  if (!this->_internal_client_user_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_user_name().data(), static_cast<int>(this->_internal_client_user_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.PeerConnection.client_user_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_client_user_name(), target);
  }

  // string host_address = 5;
  if (!this->_internal_host_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host_address().data(), static_cast<int>(this->_internal_host_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.PeerConnection.host_address");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_host_address(), target);
  }

  // fixed64 host_id = 6;
  if (this->_internal_host_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(6, this->_internal_host_id(), target);
  }

  // int64 bytes_transferred = 7;
  if (this->_internal_bytes_transferred() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_bytes_transferred(), target);
  }

  // int64 duration = 8;
  if (this->_internal_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_duration(), target);
  }

  // int64 idle_time = 9;
  if (this->_internal_idle_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_idle_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.PeerConnection)
  return target;
}

size_t PeerConnection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PeerConnection)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_address = 3;
  if (!this->_internal_client_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_address());
  }

  // string client_user_name = 4;
  if (!this->_internal_client_user_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_user_name());
  }

  // string host_address = 5;
  if (!this->_internal_host_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host_address());
  }

  // uint64 session_id = 1;
  if (this->_internal_session_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_session_id());
  }

  // fixed64 host_id = 6;
  if (this->_internal_host_id() != 0) {
    total_size += 1 + 8;
  }

  // int64 bytes_transferred = 7;
  if (this->_internal_bytes_transferred() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_bytes_transferred());
  }

  // int64 duration = 8;
  if (this->_internal_duration() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_duration());
  }

  // int64 idle_time = 9;
  if (this->_internal_idle_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_idle_time());
  }

  // .proto.PeerConnection.PeerStatus status = 2;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeerConnection::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PeerConnection*>(
      &from));
}

void PeerConnection::MergeFrom(const PeerConnection& from) {
  PeerConnection* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.PeerConnection)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_client_address().empty()) {
    _this->_internal_set_client_address(from._internal_client_address());
  }
  if (!from._internal_client_user_name().empty()) {
    _this->_internal_set_client_user_name(from._internal_client_user_name());
  }
  if (!from._internal_host_address().empty()) {
    _this->_internal_set_host_address(from._internal_host_address());
  }
  if (from._internal_session_id() != 0) {
    _this->_internal_set_session_id(from._internal_session_id());
  }
  if (from._internal_host_id() != 0) {
    _this->_internal_set_host_id(from._internal_host_id());
  }
  if (from._internal_bytes_transferred() != 0) {
    _this->_internal_set_bytes_transferred(from._internal_bytes_transferred());
  }
  if (from._internal_duration() != 0) {
    _this->_internal_set_duration(from._internal_duration());
  }
  if (from._internal_idle_time() != 0) {
    _this->_internal_set_idle_time(from._internal_idle_time());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PeerConnection::CopyFrom(const PeerConnection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PeerConnection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerConnection::IsInitialized() const {
  return true;
}

void PeerConnection::InternalSwap(PeerConnection* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.client_address_, lhs_arena,
      &other->_impl_.client_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.client_user_name_, lhs_arena,
      &other->_impl_.client_user_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.host_address_, lhs_arena,
      &other->_impl_.host_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PeerConnection, _impl_.status_)
      + sizeof(PeerConnection::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(PeerConnection, _impl_.session_id_)>(
          reinterpret_cast<char*>(&_impl_.session_id_),
          reinterpret_cast<char*>(&other->_impl_.session_id_));
}

std::string PeerConnection::GetTypeName() const {
  return "proto.PeerConnection";
}


// ===================================================================

class PeerConnectionRequest::_Internal {
 public:
};

PeerConnectionRequest::PeerConnectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.PeerConnectionRequest)
}
PeerConnectionRequest::PeerConnectionRequest(const PeerConnectionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  PeerConnectionRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.relay_session_id_){}
    , decltype(_impl_.peer_session_id_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.relay_session_id_, &from._impl_.relay_session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.relay_session_id_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:proto.PeerConnectionRequest)
}

inline void PeerConnectionRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.relay_session_id_){int64_t{0}}
    , decltype(_impl_.peer_session_id_){uint64_t{0u}}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PeerConnectionRequest::~PeerConnectionRequest() {
  // @@protoc_insertion_point(destructor:proto.PeerConnectionRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PeerConnectionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PeerConnectionRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PeerConnectionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PeerConnectionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.relay_session_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.relay_session_id_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<std::string>();
}

const char* PeerConnectionRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 relay_session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.relay_session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.PeerConnectionRequestType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::proto::PeerConnectionRequestType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 peer_session_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.peer_session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PeerConnectionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.PeerConnectionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 relay_session_id = 1;
  if (this->_internal_relay_session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_relay_session_id(), target);
  }

  // .proto.PeerConnectionRequestType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // uint64 peer_session_id = 3;
  if (this->_internal_peer_session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_peer_session_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.PeerConnectionRequest)
  return target;
}

size_t PeerConnectionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PeerConnectionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 relay_session_id = 1;
  if (this->_internal_relay_session_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_relay_session_id());
  }

  // uint64 peer_session_id = 3;
  if (this->_internal_peer_session_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_peer_session_id());
  }

  // .proto.PeerConnectionRequestType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeerConnectionRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PeerConnectionRequest*>(
      &from));
}

void PeerConnectionRequest::MergeFrom(const PeerConnectionRequest& from) {
  PeerConnectionRequest* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.PeerConnectionRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_relay_session_id() != 0) {
    _this->_internal_set_relay_session_id(from._internal_relay_session_id());
  }
  if (from._internal_peer_session_id() != 0) {
    _this->_internal_set_peer_session_id(from._internal_peer_session_id());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PeerConnectionRequest::CopyFrom(const PeerConnectionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PeerConnectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerConnectionRequest::IsInitialized() const {
  return true;
}

void PeerConnectionRequest::InternalSwap(PeerConnectionRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PeerConnectionRequest, _impl_.type_)
      + sizeof(PeerConnectionRequest::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(PeerConnectionRequest, _impl_.relay_session_id_)>(
          reinterpret_cast<char*>(&_impl_.relay_session_id_),
          reinterpret_cast<char*>(&other->_impl_.relay_session_id_));
}

std::string PeerConnectionRequest::GetTypeName() const {
  return "proto.PeerConnectionRequest";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::RelayKey*
Arena::CreateMaybeMessage< ::proto::RelayKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::RelayKey >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::RelayCredentials*
Arena::CreateMaybeMessage< ::proto::RelayCredentials >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::RelayCredentials >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::PeerConnection*
Arena::CreateMaybeMessage< ::proto::PeerConnection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::PeerConnection >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::PeerConnectionRequest*
Arena::CreateMaybeMessage< ::proto::PeerConnectionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::PeerConnectionRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
