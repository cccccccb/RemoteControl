// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#include "common.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace proto {
PROTOBUF_CONSTEXPR Version::Version(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.major_)*/0u
  , /*decltype(_impl_.minor_)*/0u
  , /*decltype(_impl_.patch_)*/0u
  , /*decltype(_impl_.revision_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VersionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VersionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VersionDefaultTypeInternal() {}
  union {
    Version _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VersionDefaultTypeInternal _Version_default_instance_;
PROTOBUF_CONSTEXPR DirectConnectionOffer::DirectConnectionOffer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.host_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.conv_)*/0u
  , /*decltype(_impl_.port_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DirectConnectionOfferDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DirectConnectionOfferDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DirectConnectionOfferDefaultTypeInternal() {}
  union {
    DirectConnectionOffer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DirectConnectionOfferDefaultTypeInternal _DirectConnectionOffer_default_instance_;
PROTOBUF_CONSTEXPR Service_ClientToHost::Service_ClientToHost(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.direct_connection_offer_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Service_ClientToHostDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Service_ClientToHostDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Service_ClientToHostDefaultTypeInternal() {}
  union {
    Service_ClientToHost _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Service_ClientToHostDefaultTypeInternal _Service_ClientToHost_default_instance_;
}  // namespace proto
namespace proto {
bool HostChannelId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> HostChannelId_strings[2] = {};

static const char HostChannelId_names[] =
  "HOST_CHANNEL_ID_SERVICE"
  "HOST_CHANNEL_ID_SESSION";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry HostChannelId_entries[] = {
  { {HostChannelId_names + 0, 23}, 1 },
  { {HostChannelId_names + 23, 23}, 0 },
};

static const int HostChannelId_entries_by_number[] = {
  1, // 0 -> HOST_CHANNEL_ID_SESSION
  0, // 1 -> HOST_CHANNEL_ID_SERVICE
};

const std::string& HostChannelId_Name(
    HostChannelId value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          HostChannelId_entries,
          HostChannelId_entries_by_number,
          2, HostChannelId_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      HostChannelId_entries,
      HostChannelId_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     HostChannelId_strings[idx].get();
}
bool HostChannelId_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, HostChannelId* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      HostChannelId_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<HostChannelId>(int_value);
  }
  return success;
}
bool SessionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 31:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SessionType_strings[7] = {};

static const char SessionType_names[] =
  "SESSION_TYPE_ALL"
  "SESSION_TYPE_DESKTOP_MANAGE"
  "SESSION_TYPE_DESKTOP_VIEW"
  "SESSION_TYPE_FILE_TRANSFER"
  "SESSION_TYPE_SYSTEM_INFO"
  "SESSION_TYPE_TEXT_CHAT"
  "SESSION_TYPE_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SessionType_entries[] = {
  { {SessionType_names + 0, 16}, 31 },
  { {SessionType_names + 16, 27}, 1 },
  { {SessionType_names + 43, 25}, 2 },
  { {SessionType_names + 68, 26}, 4 },
  { {SessionType_names + 94, 24}, 8 },
  { {SessionType_names + 118, 22}, 16 },
  { {SessionType_names + 140, 20}, 0 },
};

static const int SessionType_entries_by_number[] = {
  6, // 0 -> SESSION_TYPE_UNKNOWN
  1, // 1 -> SESSION_TYPE_DESKTOP_MANAGE
  2, // 2 -> SESSION_TYPE_DESKTOP_VIEW
  3, // 4 -> SESSION_TYPE_FILE_TRANSFER
  4, // 8 -> SESSION_TYPE_SYSTEM_INFO
  5, // 16 -> SESSION_TYPE_TEXT_CHAT
  0, // 31 -> SESSION_TYPE_ALL
};

const std::string& SessionType_Name(
    SessionType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SessionType_entries,
          SessionType_entries_by_number,
          7, SessionType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SessionType_entries,
      SessionType_entries_by_number,
      7, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SessionType_strings[idx].get();
}
bool SessionType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SessionType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SessionType_entries, 7, name, &int_value);
  if (success) {
    *value = static_cast<SessionType>(int_value);
  }
  return success;
}

// ===================================================================

class Version::_Internal {
 public:
};

Version::Version(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Version)
}
Version::Version(const Version& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Version* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.major_){}
    , decltype(_impl_.minor_){}
    , decltype(_impl_.patch_){}
    , decltype(_impl_.revision_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.major_, &from._impl_.major_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.revision_) -
    reinterpret_cast<char*>(&_impl_.major_)) + sizeof(_impl_.revision_));
  // @@protoc_insertion_point(copy_constructor:proto.Version)
}

inline void Version::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.major_){0u}
    , decltype(_impl_.minor_){0u}
    , decltype(_impl_.patch_){0u}
    , decltype(_impl_.revision_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Version::~Version() {
  // @@protoc_insertion_point(destructor:proto.Version)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Version::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Version::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Version::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Version)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.major_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.revision_) -
      reinterpret_cast<char*>(&_impl_.major_)) + sizeof(_impl_.revision_));
  _internal_metadata_.Clear<std::string>();
}

const char* Version::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 major = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.major_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 minor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.minor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 patch = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.patch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 revision = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.revision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Version::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Version)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 major = 1;
  if (this->_internal_major() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_major(), target);
  }

  // uint32 minor = 2;
  if (this->_internal_minor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_minor(), target);
  }

  // uint32 patch = 3;
  if (this->_internal_patch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_patch(), target);
  }

  // uint32 revision = 4;
  if (this->_internal_revision() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_revision(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Version)
  return target;
}

size_t Version::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Version)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 major = 1;
  if (this->_internal_major() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_major());
  }

  // uint32 minor = 2;
  if (this->_internal_minor() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_minor());
  }

  // uint32 patch = 3;
  if (this->_internal_patch() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_patch());
  }

  // uint32 revision = 4;
  if (this->_internal_revision() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_revision());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Version::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Version*>(
      &from));
}

void Version::MergeFrom(const Version& from) {
  Version* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Version)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_major() != 0) {
    _this->_internal_set_major(from._internal_major());
  }
  if (from._internal_minor() != 0) {
    _this->_internal_set_minor(from._internal_minor());
  }
  if (from._internal_patch() != 0) {
    _this->_internal_set_patch(from._internal_patch());
  }
  if (from._internal_revision() != 0) {
    _this->_internal_set_revision(from._internal_revision());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Version::CopyFrom(const Version& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Version)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Version::IsInitialized() const {
  return true;
}

void Version::InternalSwap(Version* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Version, _impl_.revision_)
      + sizeof(Version::_impl_.revision_)
      - PROTOBUF_FIELD_OFFSET(Version, _impl_.major_)>(
          reinterpret_cast<char*>(&_impl_.major_),
          reinterpret_cast<char*>(&other->_impl_.major_));
}

std::string Version::GetTypeName() const {
  return "proto.Version";
}


// ===================================================================

class DirectConnectionOffer::_Internal {
 public:
};

DirectConnectionOffer::DirectConnectionOffer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.DirectConnectionOffer)
}
DirectConnectionOffer::DirectConnectionOffer(const DirectConnectionOffer& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  DirectConnectionOffer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.host_){}
    , decltype(_impl_.conv_){}
    , decltype(_impl_.port_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_host().empty()) {
    _this->_impl_.host_.Set(from._internal_host(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.conv_, &from._impl_.conv_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.port_) -
    reinterpret_cast<char*>(&_impl_.conv_)) + sizeof(_impl_.port_));
  // @@protoc_insertion_point(copy_constructor:proto.DirectConnectionOffer)
}

inline void DirectConnectionOffer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.host_){}
    , decltype(_impl_.conv_){0u}
    , decltype(_impl_.port_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DirectConnectionOffer::~DirectConnectionOffer() {
  // @@protoc_insertion_point(destructor:proto.DirectConnectionOffer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DirectConnectionOffer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.host_.Destroy();
}

void DirectConnectionOffer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DirectConnectionOffer::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DirectConnectionOffer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.host_.ClearToEmpty();
  ::memset(&_impl_.conv_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.port_) -
      reinterpret_cast<char*>(&_impl_.conv_)) + sizeof(_impl_.port_));
  _internal_metadata_.Clear<std::string>();
}

const char* DirectConnectionOffer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 conv = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.conv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string host = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_host();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DirectConnectionOffer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.DirectConnectionOffer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 conv = 1;
  if (this->_internal_conv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_conv(), target);
  }

  // string host = 2;
  if (!this->_internal_host().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host().data(), static_cast<int>(this->_internal_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.DirectConnectionOffer.host");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_host(), target);
  }

  // uint32 port = 3;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DirectConnectionOffer)
  return target;
}

size_t DirectConnectionOffer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DirectConnectionOffer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string host = 2;
  if (!this->_internal_host().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host());
  }

  // uint32 conv = 1;
  if (this->_internal_conv() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_conv());
  }

  // uint32 port = 3;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DirectConnectionOffer::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DirectConnectionOffer*>(
      &from));
}

void DirectConnectionOffer::MergeFrom(const DirectConnectionOffer& from) {
  DirectConnectionOffer* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.DirectConnectionOffer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_host().empty()) {
    _this->_internal_set_host(from._internal_host());
  }
  if (from._internal_conv() != 0) {
    _this->_internal_set_conv(from._internal_conv());
  }
  if (from._internal_port() != 0) {
    _this->_internal_set_port(from._internal_port());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DirectConnectionOffer::CopyFrom(const DirectConnectionOffer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DirectConnectionOffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectConnectionOffer::IsInitialized() const {
  return true;
}

void DirectConnectionOffer::InternalSwap(DirectConnectionOffer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.host_, lhs_arena,
      &other->_impl_.host_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DirectConnectionOffer, _impl_.port_)
      + sizeof(DirectConnectionOffer::_impl_.port_)
      - PROTOBUF_FIELD_OFFSET(DirectConnectionOffer, _impl_.conv_)>(
          reinterpret_cast<char*>(&_impl_.conv_),
          reinterpret_cast<char*>(&other->_impl_.conv_));
}

std::string DirectConnectionOffer::GetTypeName() const {
  return "proto.DirectConnectionOffer";
}


// ===================================================================

class Service_ClientToHost::_Internal {
 public:
  static const ::proto::DirectConnectionOffer& direct_connection_offer(const Service_ClientToHost* msg);
};

const ::proto::DirectConnectionOffer&
Service_ClientToHost::_Internal::direct_connection_offer(const Service_ClientToHost* msg) {
  return *msg->_impl_.direct_connection_offer_;
}
Service_ClientToHost::Service_ClientToHost(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Service_ClientToHost)
}
Service_ClientToHost::Service_ClientToHost(const Service_ClientToHost& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Service_ClientToHost* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.direct_connection_offer_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_direct_connection_offer()) {
    _this->_impl_.direct_connection_offer_ = new ::proto::DirectConnectionOffer(*from._impl_.direct_connection_offer_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.Service_ClientToHost)
}

inline void Service_ClientToHost::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.direct_connection_offer_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Service_ClientToHost::~Service_ClientToHost() {
  // @@protoc_insertion_point(destructor:proto.Service_ClientToHost)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Service_ClientToHost::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.direct_connection_offer_;
}

void Service_ClientToHost::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Service_ClientToHost::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Service_ClientToHost)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.direct_connection_offer_ != nullptr) {
    delete _impl_.direct_connection_offer_;
  }
  _impl_.direct_connection_offer_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* Service_ClientToHost::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.DirectConnectionOffer direct_connection_offer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_direct_connection_offer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Service_ClientToHost::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Service_ClientToHost)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.DirectConnectionOffer direct_connection_offer = 1;
  if (this->_internal_has_direct_connection_offer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::direct_connection_offer(this),
        _Internal::direct_connection_offer(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Service_ClientToHost)
  return target;
}

size_t Service_ClientToHost::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Service_ClientToHost)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.DirectConnectionOffer direct_connection_offer = 1;
  if (this->_internal_has_direct_connection_offer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.direct_connection_offer_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Service_ClientToHost::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Service_ClientToHost*>(
      &from));
}

void Service_ClientToHost::MergeFrom(const Service_ClientToHost& from) {
  Service_ClientToHost* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Service_ClientToHost)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_direct_connection_offer()) {
    _this->_internal_mutable_direct_connection_offer()->::proto::DirectConnectionOffer::MergeFrom(
        from._internal_direct_connection_offer());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Service_ClientToHost::CopyFrom(const Service_ClientToHost& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Service_ClientToHost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Service_ClientToHost::IsInitialized() const {
  return true;
}

void Service_ClientToHost::InternalSwap(Service_ClientToHost* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.direct_connection_offer_, other->_impl_.direct_connection_offer_);
}

std::string Service_ClientToHost::GetTypeName() const {
  return "proto.Service_ClientToHost";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::Version*
Arena::CreateMaybeMessage< ::proto::Version >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Version >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::DirectConnectionOffer*
Arena::CreateMaybeMessage< ::proto::DirectConnectionOffer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::DirectConnectionOffer >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Service_ClientToHost*
Arena::CreateMaybeMessage< ::proto::Service_ClientToHost >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Service_ClientToHost >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
