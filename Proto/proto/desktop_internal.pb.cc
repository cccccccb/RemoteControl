// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: desktop_internal.proto

#include "desktop_internal.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace proto {
namespace internal {
PROTOBUF_CONSTEXPR DesktopFrame::DesktopFrame(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dirty_rect_)*/{}
  , /*decltype(_impl_.capturer_type_)*/0u
  , /*decltype(_impl_.shared_buffer_id_)*/0
  , /*decltype(_impl_.width_)*/0
  , /*decltype(_impl_.height_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DesktopFrameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DesktopFrameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DesktopFrameDefaultTypeInternal() {}
  union {
    DesktopFrame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DesktopFrameDefaultTypeInternal _DesktopFrame_default_instance_;
PROTOBUF_CONSTEXPR MouseCursor::MouseCursor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.width_)*/0
  , /*decltype(_impl_.height_)*/0
  , /*decltype(_impl_.hotspot_x_)*/0
  , /*decltype(_impl_.hotspot_y_)*/0
  , /*decltype(_impl_.dpi_x_)*/0
  , /*decltype(_impl_.dpi_y_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MouseCursorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MouseCursorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MouseCursorDefaultTypeInternal() {}
  union {
    MouseCursor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MouseCursorDefaultTypeInternal _MouseCursor_default_instance_;
PROTOBUF_CONSTEXPR SharedBuffer::SharedBuffer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.shared_buffer_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SharedBufferDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SharedBufferDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SharedBufferDefaultTypeInternal() {}
  union {
    SharedBuffer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SharedBufferDefaultTypeInternal _SharedBuffer_default_instance_;
PROTOBUF_CONSTEXPR ScreenCaptured::ScreenCaptured(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.frame_)*/nullptr
  , /*decltype(_impl_.mouse_cursor_)*/nullptr
  , /*decltype(_impl_.error_code_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ScreenCapturedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScreenCapturedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScreenCapturedDefaultTypeInternal() {}
  union {
    ScreenCaptured _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScreenCapturedDefaultTypeInternal _ScreenCaptured_default_instance_;
PROTOBUF_CONSTEXPR NextScreenCapture::NextScreenCapture(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.update_interval_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NextScreenCaptureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NextScreenCaptureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NextScreenCaptureDefaultTypeInternal() {}
  union {
    NextScreenCapture _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NextScreenCaptureDefaultTypeInternal _NextScreenCapture_default_instance_;
PROTOBUF_CONSTEXPR SelectSource::SelectSource(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.screen_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SelectSourceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SelectSourceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SelectSourceDefaultTypeInternal() {}
  union {
    SelectSource _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SelectSourceDefaultTypeInternal _SelectSource_default_instance_;
PROTOBUF_CONSTEXPR Configure::Configure(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.disable_font_smoothing_)*/false
  , /*decltype(_impl_.disable_wallpaper_)*/false
  , /*decltype(_impl_.disable_effects_)*/false
  , /*decltype(_impl_.block_input_)*/false
  , /*decltype(_impl_.lock_at_disconnect_)*/false
  , /*decltype(_impl_.clear_clipboard_)*/false
  , /*decltype(_impl_.cursor_position_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConfigureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigureDefaultTypeInternal() {}
  union {
    Configure _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigureDefaultTypeInternal _Configure_default_instance_;
PROTOBUF_CONSTEXPR DesktopControl::DesktopControl(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.action_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DesktopControlDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DesktopControlDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DesktopControlDefaultTypeInternal() {}
  union {
    DesktopControl _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DesktopControlDefaultTypeInternal _DesktopControl_default_instance_;
PROTOBUF_CONSTEXPR ServiceToDesktop::ServiceToDesktop(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.control_)*/nullptr
  , /*decltype(_impl_.configure_)*/nullptr
  , /*decltype(_impl_.select_source_)*/nullptr
  , /*decltype(_impl_.next_screen_capture_)*/nullptr
  , /*decltype(_impl_.key_event_)*/nullptr
  , /*decltype(_impl_.text_event_)*/nullptr
  , /*decltype(_impl_.mouse_event_)*/nullptr
  , /*decltype(_impl_.clipboard_event_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServiceToDesktopDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServiceToDesktopDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServiceToDesktopDefaultTypeInternal() {}
  union {
    ServiceToDesktop _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServiceToDesktopDefaultTypeInternal _ServiceToDesktop_default_instance_;
PROTOBUF_CONSTEXPR DesktopToService::DesktopToService(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.screen_list_)*/nullptr
  , /*decltype(_impl_.shared_buffer_)*/nullptr
  , /*decltype(_impl_.screen_captured_)*/nullptr
  , /*decltype(_impl_.audio_packet_)*/nullptr
  , /*decltype(_impl_.clipboard_event_)*/nullptr
  , /*decltype(_impl_.cursor_position_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DesktopToServiceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DesktopToServiceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DesktopToServiceDefaultTypeInternal() {}
  union {
    DesktopToService _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DesktopToServiceDefaultTypeInternal _DesktopToService_default_instance_;
}  // namespace internal
}  // namespace proto
namespace proto {
namespace internal {
bool SharedBuffer_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SharedBuffer_Type_strings[2] = {};

static const char SharedBuffer_Type_names[] =
  "CREATE"
  "RELEASE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SharedBuffer_Type_entries[] = {
  { {SharedBuffer_Type_names + 0, 6}, 0 },
  { {SharedBuffer_Type_names + 6, 7}, 1 },
};

static const int SharedBuffer_Type_entries_by_number[] = {
  0, // 0 -> CREATE
  1, // 1 -> RELEASE
};

const std::string& SharedBuffer_Type_Name(
    SharedBuffer_Type value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SharedBuffer_Type_entries,
          SharedBuffer_Type_entries_by_number,
          2, SharedBuffer_Type_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SharedBuffer_Type_entries,
      SharedBuffer_Type_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SharedBuffer_Type_strings[idx].get();
}
bool SharedBuffer_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SharedBuffer_Type* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SharedBuffer_Type_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<SharedBuffer_Type>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SharedBuffer_Type SharedBuffer::CREATE;
constexpr SharedBuffer_Type SharedBuffer::RELEASE;
constexpr SharedBuffer_Type SharedBuffer::Type_MIN;
constexpr SharedBuffer_Type SharedBuffer::Type_MAX;
constexpr int SharedBuffer::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool DesktopControl_Action_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DesktopControl_Action_strings[5] = {};

static const char DesktopControl_Action_names[] =
  "DISABLE"
  "ENABLE"
  "LOCK"
  "LOGOFF"
  "UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DesktopControl_Action_entries[] = {
  { {DesktopControl_Action_names + 0, 7}, 1 },
  { {DesktopControl_Action_names + 7, 6}, 2 },
  { {DesktopControl_Action_names + 13, 4}, 4 },
  { {DesktopControl_Action_names + 17, 6}, 3 },
  { {DesktopControl_Action_names + 23, 7}, 0 },
};

static const int DesktopControl_Action_entries_by_number[] = {
  4, // 0 -> UNKNOWN
  0, // 1 -> DISABLE
  1, // 2 -> ENABLE
  3, // 3 -> LOGOFF
  2, // 4 -> LOCK
};

const std::string& DesktopControl_Action_Name(
    DesktopControl_Action value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DesktopControl_Action_entries,
          DesktopControl_Action_entries_by_number,
          5, DesktopControl_Action_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DesktopControl_Action_entries,
      DesktopControl_Action_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DesktopControl_Action_strings[idx].get();
}
bool DesktopControl_Action_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DesktopControl_Action* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DesktopControl_Action_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<DesktopControl_Action>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr DesktopControl_Action DesktopControl::UNKNOWN;
constexpr DesktopControl_Action DesktopControl::DISABLE;
constexpr DesktopControl_Action DesktopControl::ENABLE;
constexpr DesktopControl_Action DesktopControl::LOGOFF;
constexpr DesktopControl_Action DesktopControl::LOCK;
constexpr DesktopControl_Action DesktopControl::Action_MIN;
constexpr DesktopControl_Action DesktopControl::Action_MAX;
constexpr int DesktopControl::Action_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class DesktopFrame::_Internal {
 public:
};

void DesktopFrame::clear_dirty_rect() {
  _impl_.dirty_rect_.Clear();
}
DesktopFrame::DesktopFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.internal.DesktopFrame)
}
DesktopFrame::DesktopFrame(const DesktopFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  DesktopFrame* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dirty_rect_){from._impl_.dirty_rect_}
    , decltype(_impl_.capturer_type_){}
    , decltype(_impl_.shared_buffer_id_){}
    , decltype(_impl_.width_){}
    , decltype(_impl_.height_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.capturer_type_, &from._impl_.capturer_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.height_) -
    reinterpret_cast<char*>(&_impl_.capturer_type_)) + sizeof(_impl_.height_));
  // @@protoc_insertion_point(copy_constructor:proto.internal.DesktopFrame)
}

inline void DesktopFrame::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dirty_rect_){arena}
    , decltype(_impl_.capturer_type_){0u}
    , decltype(_impl_.shared_buffer_id_){0}
    , decltype(_impl_.width_){0}
    , decltype(_impl_.height_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DesktopFrame::~DesktopFrame() {
  // @@protoc_insertion_point(destructor:proto.internal.DesktopFrame)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DesktopFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dirty_rect_.~RepeatedPtrField();
}

void DesktopFrame::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DesktopFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.internal.DesktopFrame)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dirty_rect_.Clear();
  ::memset(&_impl_.capturer_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.height_) -
      reinterpret_cast<char*>(&_impl_.capturer_type_)) + sizeof(_impl_.height_));
  _internal_metadata_.Clear<std::string>();
}

const char* DesktopFrame::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 capturer_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.capturer_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 shared_buffer_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.shared_buffer_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.Rect dirty_rect = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dirty_rect(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DesktopFrame::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.internal.DesktopFrame)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 capturer_type = 1;
  if (this->_internal_capturer_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_capturer_type(), target);
  }

  // int32 shared_buffer_id = 2;
  if (this->_internal_shared_buffer_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_shared_buffer_id(), target);
  }

  // int32 width = 3;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_width(), target);
  }

  // int32 height = 4;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_height(), target);
  }

  // repeated .proto.Rect dirty_rect = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_dirty_rect_size()); i < n; i++) {
    const auto& repfield = this->_internal_dirty_rect(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.internal.DesktopFrame)
  return target;
}

size_t DesktopFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.internal.DesktopFrame)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.Rect dirty_rect = 5;
  total_size += 1UL * this->_internal_dirty_rect_size();
  for (const auto& msg : this->_impl_.dirty_rect_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 capturer_type = 1;
  if (this->_internal_capturer_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_capturer_type());
  }

  // int32 shared_buffer_id = 2;
  if (this->_internal_shared_buffer_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_shared_buffer_id());
  }

  // int32 width = 3;
  if (this->_internal_width() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_width());
  }

  // int32 height = 4;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DesktopFrame::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DesktopFrame*>(
      &from));
}

void DesktopFrame::MergeFrom(const DesktopFrame& from) {
  DesktopFrame* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.internal.DesktopFrame)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.dirty_rect_.MergeFrom(from._impl_.dirty_rect_);
  if (from._internal_capturer_type() != 0) {
    _this->_internal_set_capturer_type(from._internal_capturer_type());
  }
  if (from._internal_shared_buffer_id() != 0) {
    _this->_internal_set_shared_buffer_id(from._internal_shared_buffer_id());
  }
  if (from._internal_width() != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DesktopFrame::CopyFrom(const DesktopFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.internal.DesktopFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DesktopFrame::IsInitialized() const {
  return true;
}

void DesktopFrame::InternalSwap(DesktopFrame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.dirty_rect_.InternalSwap(&other->_impl_.dirty_rect_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DesktopFrame, _impl_.height_)
      + sizeof(DesktopFrame::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(DesktopFrame, _impl_.capturer_type_)>(
          reinterpret_cast<char*>(&_impl_.capturer_type_),
          reinterpret_cast<char*>(&other->_impl_.capturer_type_));
}

std::string DesktopFrame::GetTypeName() const {
  return "proto.internal.DesktopFrame";
}


// ===================================================================

class MouseCursor::_Internal {
 public:
};

MouseCursor::MouseCursor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.internal.MouseCursor)
}
MouseCursor::MouseCursor(const MouseCursor& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  MouseCursor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.width_){}
    , decltype(_impl_.height_){}
    , decltype(_impl_.hotspot_x_){}
    , decltype(_impl_.hotspot_y_){}
    , decltype(_impl_.dpi_x_){}
    , decltype(_impl_.dpi_y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.width_, &from._impl_.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.dpi_y_) -
    reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.dpi_y_));
  // @@protoc_insertion_point(copy_constructor:proto.internal.MouseCursor)
}

inline void MouseCursor::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.width_){0}
    , decltype(_impl_.height_){0}
    , decltype(_impl_.hotspot_x_){0}
    , decltype(_impl_.hotspot_y_){0}
    , decltype(_impl_.dpi_x_){0}
    , decltype(_impl_.dpi_y_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MouseCursor::~MouseCursor() {
  // @@protoc_insertion_point(destructor:proto.internal.MouseCursor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MouseCursor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void MouseCursor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MouseCursor::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.internal.MouseCursor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  ::memset(&_impl_.width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.dpi_y_) -
      reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.dpi_y_));
  _internal_metadata_.Clear<std::string>();
}

const char* MouseCursor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 hotspot_x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.hotspot_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 hotspot_y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.hotspot_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 dpi_x = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.dpi_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 dpi_y = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.dpi_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MouseCursor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.internal.MouseCursor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 width = 1;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_width(), target);
  }

  // int32 height = 2;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_height(), target);
  }

  // int32 hotspot_x = 3;
  if (this->_internal_hotspot_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_hotspot_x(), target);
  }

  // int32 hotspot_y = 4;
  if (this->_internal_hotspot_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_hotspot_y(), target);
  }

  // int32 dpi_x = 5;
  if (this->_internal_dpi_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_dpi_x(), target);
  }

  // int32 dpi_y = 6;
  if (this->_internal_dpi_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_dpi_y(), target);
  }

  // bytes data = 7;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.internal.MouseCursor)
  return target;
}

size_t MouseCursor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.internal.MouseCursor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 7;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // int32 width = 1;
  if (this->_internal_width() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_width());
  }

  // int32 height = 2;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_height());
  }

  // int32 hotspot_x = 3;
  if (this->_internal_hotspot_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hotspot_x());
  }

  // int32 hotspot_y = 4;
  if (this->_internal_hotspot_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hotspot_y());
  }

  // int32 dpi_x = 5;
  if (this->_internal_dpi_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dpi_x());
  }

  // int32 dpi_y = 6;
  if (this->_internal_dpi_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dpi_y());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MouseCursor::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MouseCursor*>(
      &from));
}

void MouseCursor::MergeFrom(const MouseCursor& from) {
  MouseCursor* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.internal.MouseCursor)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_width() != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  if (from._internal_hotspot_x() != 0) {
    _this->_internal_set_hotspot_x(from._internal_hotspot_x());
  }
  if (from._internal_hotspot_y() != 0) {
    _this->_internal_set_hotspot_y(from._internal_hotspot_y());
  }
  if (from._internal_dpi_x() != 0) {
    _this->_internal_set_dpi_x(from._internal_dpi_x());
  }
  if (from._internal_dpi_y() != 0) {
    _this->_internal_set_dpi_y(from._internal_dpi_y());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MouseCursor::CopyFrom(const MouseCursor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.internal.MouseCursor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MouseCursor::IsInitialized() const {
  return true;
}

void MouseCursor::InternalSwap(MouseCursor* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MouseCursor, _impl_.dpi_y_)
      + sizeof(MouseCursor::_impl_.dpi_y_)
      - PROTOBUF_FIELD_OFFSET(MouseCursor, _impl_.width_)>(
          reinterpret_cast<char*>(&_impl_.width_),
          reinterpret_cast<char*>(&other->_impl_.width_));
}

std::string MouseCursor::GetTypeName() const {
  return "proto.internal.MouseCursor";
}


// ===================================================================

class SharedBuffer::_Internal {
 public:
};

SharedBuffer::SharedBuffer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.internal.SharedBuffer)
}
SharedBuffer::SharedBuffer(const SharedBuffer& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SharedBuffer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.shared_buffer_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.shared_buffer_id_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.shared_buffer_id_));
  // @@protoc_insertion_point(copy_constructor:proto.internal.SharedBuffer)
}

inline void SharedBuffer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){0}
    , decltype(_impl_.shared_buffer_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SharedBuffer::~SharedBuffer() {
  // @@protoc_insertion_point(destructor:proto.internal.SharedBuffer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SharedBuffer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SharedBuffer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SharedBuffer::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.internal.SharedBuffer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.shared_buffer_id_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.shared_buffer_id_));
  _internal_metadata_.Clear<std::string>();
}

const char* SharedBuffer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.internal.SharedBuffer.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::proto::internal::SharedBuffer_Type>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 shared_buffer_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.shared_buffer_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharedBuffer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.internal.SharedBuffer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.internal.SharedBuffer.Type type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // int32 shared_buffer_id = 2;
  if (this->_internal_shared_buffer_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_shared_buffer_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.internal.SharedBuffer)
  return target;
}

size_t SharedBuffer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.internal.SharedBuffer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.internal.SharedBuffer.Type type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 shared_buffer_id = 2;
  if (this->_internal_shared_buffer_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_shared_buffer_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharedBuffer::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SharedBuffer*>(
      &from));
}

void SharedBuffer::MergeFrom(const SharedBuffer& from) {
  SharedBuffer* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.internal.SharedBuffer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_shared_buffer_id() != 0) {
    _this->_internal_set_shared_buffer_id(from._internal_shared_buffer_id());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharedBuffer::CopyFrom(const SharedBuffer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.internal.SharedBuffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharedBuffer::IsInitialized() const {
  return true;
}

void SharedBuffer::InternalSwap(SharedBuffer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SharedBuffer, _impl_.shared_buffer_id_)
      + sizeof(SharedBuffer::_impl_.shared_buffer_id_)
      - PROTOBUF_FIELD_OFFSET(SharedBuffer, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

std::string SharedBuffer::GetTypeName() const {
  return "proto.internal.SharedBuffer";
}


// ===================================================================

class ScreenCaptured::_Internal {
 public:
  static const ::proto::internal::DesktopFrame& frame(const ScreenCaptured* msg);
  static const ::proto::internal::MouseCursor& mouse_cursor(const ScreenCaptured* msg);
};

const ::proto::internal::DesktopFrame&
ScreenCaptured::_Internal::frame(const ScreenCaptured* msg) {
  return *msg->_impl_.frame_;
}
const ::proto::internal::MouseCursor&
ScreenCaptured::_Internal::mouse_cursor(const ScreenCaptured* msg) {
  return *msg->_impl_.mouse_cursor_;
}
ScreenCaptured::ScreenCaptured(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.internal.ScreenCaptured)
}
ScreenCaptured::ScreenCaptured(const ScreenCaptured& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ScreenCaptured* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.frame_){nullptr}
    , decltype(_impl_.mouse_cursor_){nullptr}
    , decltype(_impl_.error_code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_frame()) {
    _this->_impl_.frame_ = new ::proto::internal::DesktopFrame(*from._impl_.frame_);
  }
  if (from._internal_has_mouse_cursor()) {
    _this->_impl_.mouse_cursor_ = new ::proto::internal::MouseCursor(*from._impl_.mouse_cursor_);
  }
  _this->_impl_.error_code_ = from._impl_.error_code_;
  // @@protoc_insertion_point(copy_constructor:proto.internal.ScreenCaptured)
}

inline void ScreenCaptured::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.frame_){nullptr}
    , decltype(_impl_.mouse_cursor_){nullptr}
    , decltype(_impl_.error_code_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ScreenCaptured::~ScreenCaptured() {
  // @@protoc_insertion_point(destructor:proto.internal.ScreenCaptured)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScreenCaptured::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.frame_;
  if (this != internal_default_instance()) delete _impl_.mouse_cursor_;
}

void ScreenCaptured::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScreenCaptured::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.internal.ScreenCaptured)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.frame_ != nullptr) {
    delete _impl_.frame_;
  }
  _impl_.frame_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mouse_cursor_ != nullptr) {
    delete _impl_.mouse_cursor_;
  }
  _impl_.mouse_cursor_ = nullptr;
  _impl_.error_code_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* ScreenCaptured::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.VideoErrorCode error_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error_code(static_cast<::proto::VideoErrorCode>(val));
        } else
          goto handle_unusual;
        continue;
      // .proto.internal.DesktopFrame frame = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_frame(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.internal.MouseCursor mouse_cursor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_mouse_cursor(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ScreenCaptured::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.internal.ScreenCaptured)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.VideoErrorCode error_code = 1;
  if (this->_internal_error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_error_code(), target);
  }

  // .proto.internal.DesktopFrame frame = 2;
  if (this->_internal_has_frame()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::frame(this),
        _Internal::frame(this).GetCachedSize(), target, stream);
  }

  // .proto.internal.MouseCursor mouse_cursor = 3;
  if (this->_internal_has_mouse_cursor()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::mouse_cursor(this),
        _Internal::mouse_cursor(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.internal.ScreenCaptured)
  return target;
}

size_t ScreenCaptured::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.internal.ScreenCaptured)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.internal.DesktopFrame frame = 2;
  if (this->_internal_has_frame()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.frame_);
  }

  // .proto.internal.MouseCursor mouse_cursor = 3;
  if (this->_internal_has_mouse_cursor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mouse_cursor_);
  }

  // .proto.VideoErrorCode error_code = 1;
  if (this->_internal_error_code() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_error_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScreenCaptured::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ScreenCaptured*>(
      &from));
}

void ScreenCaptured::MergeFrom(const ScreenCaptured& from) {
  ScreenCaptured* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.internal.ScreenCaptured)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_frame()) {
    _this->_internal_mutable_frame()->::proto::internal::DesktopFrame::MergeFrom(
        from._internal_frame());
  }
  if (from._internal_has_mouse_cursor()) {
    _this->_internal_mutable_mouse_cursor()->::proto::internal::MouseCursor::MergeFrom(
        from._internal_mouse_cursor());
  }
  if (from._internal_error_code() != 0) {
    _this->_internal_set_error_code(from._internal_error_code());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ScreenCaptured::CopyFrom(const ScreenCaptured& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.internal.ScreenCaptured)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScreenCaptured::IsInitialized() const {
  return true;
}

void ScreenCaptured::InternalSwap(ScreenCaptured* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScreenCaptured, _impl_.error_code_)
      + sizeof(ScreenCaptured::_impl_.error_code_)
      - PROTOBUF_FIELD_OFFSET(ScreenCaptured, _impl_.frame_)>(
          reinterpret_cast<char*>(&_impl_.frame_),
          reinterpret_cast<char*>(&other->_impl_.frame_));
}

std::string ScreenCaptured::GetTypeName() const {
  return "proto.internal.ScreenCaptured";
}


// ===================================================================

class NextScreenCapture::_Internal {
 public:
};

NextScreenCapture::NextScreenCapture(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.internal.NextScreenCapture)
}
NextScreenCapture::NextScreenCapture(const NextScreenCapture& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  NextScreenCapture* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.update_interval_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _this->_impl_.update_interval_ = from._impl_.update_interval_;
  // @@protoc_insertion_point(copy_constructor:proto.internal.NextScreenCapture)
}

inline void NextScreenCapture::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.update_interval_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NextScreenCapture::~NextScreenCapture() {
  // @@protoc_insertion_point(destructor:proto.internal.NextScreenCapture)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NextScreenCapture::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NextScreenCapture::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NextScreenCapture::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.internal.NextScreenCapture)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.update_interval_ = int64_t{0};
  _internal_metadata_.Clear<std::string>();
}

const char* NextScreenCapture::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 update_interval = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.update_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NextScreenCapture::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.internal.NextScreenCapture)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 update_interval = 1;
  if (this->_internal_update_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_update_interval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.internal.NextScreenCapture)
  return target;
}

size_t NextScreenCapture::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.internal.NextScreenCapture)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 update_interval = 1;
  if (this->_internal_update_interval() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_update_interval());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NextScreenCapture::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const NextScreenCapture*>(
      &from));
}

void NextScreenCapture::MergeFrom(const NextScreenCapture& from) {
  NextScreenCapture* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.internal.NextScreenCapture)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_update_interval() != 0) {
    _this->_internal_set_update_interval(from._internal_update_interval());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void NextScreenCapture::CopyFrom(const NextScreenCapture& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.internal.NextScreenCapture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NextScreenCapture::IsInitialized() const {
  return true;
}

void NextScreenCapture::InternalSwap(NextScreenCapture* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.update_interval_, other->_impl_.update_interval_);
}

std::string NextScreenCapture::GetTypeName() const {
  return "proto.internal.NextScreenCapture";
}


// ===================================================================

class SelectSource::_Internal {
 public:
  static const ::proto::Screen& screen(const SelectSource* msg);
};

const ::proto::Screen&
SelectSource::_Internal::screen(const SelectSource* msg) {
  return *msg->_impl_.screen_;
}
void SelectSource::clear_screen() {
  if (GetArenaForAllocation() == nullptr && _impl_.screen_ != nullptr) {
    delete _impl_.screen_;
  }
  _impl_.screen_ = nullptr;
}
SelectSource::SelectSource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.internal.SelectSource)
}
SelectSource::SelectSource(const SelectSource& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SelectSource* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.screen_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_screen()) {
    _this->_impl_.screen_ = new ::proto::Screen(*from._impl_.screen_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.internal.SelectSource)
}

inline void SelectSource::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.screen_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SelectSource::~SelectSource() {
  // @@protoc_insertion_point(destructor:proto.internal.SelectSource)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SelectSource::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.screen_;
}

void SelectSource::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SelectSource::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.internal.SelectSource)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.screen_ != nullptr) {
    delete _impl_.screen_;
  }
  _impl_.screen_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* SelectSource::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.Screen screen = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_screen(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SelectSource::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.internal.SelectSource)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.Screen screen = 1;
  if (this->_internal_has_screen()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::screen(this),
        _Internal::screen(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.internal.SelectSource)
  return target;
}

size_t SelectSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.internal.SelectSource)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.Screen screen = 1;
  if (this->_internal_has_screen()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.screen_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SelectSource::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SelectSource*>(
      &from));
}

void SelectSource::MergeFrom(const SelectSource& from) {
  SelectSource* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.internal.SelectSource)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_screen()) {
    _this->_internal_mutable_screen()->::proto::Screen::MergeFrom(
        from._internal_screen());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SelectSource::CopyFrom(const SelectSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.internal.SelectSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectSource::IsInitialized() const {
  return true;
}

void SelectSource::InternalSwap(SelectSource* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.screen_, other->_impl_.screen_);
}

std::string SelectSource::GetTypeName() const {
  return "proto.internal.SelectSource";
}


// ===================================================================

class Configure::_Internal {
 public:
};

Configure::Configure(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.internal.Configure)
}
Configure::Configure(const Configure& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Configure* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.disable_font_smoothing_){}
    , decltype(_impl_.disable_wallpaper_){}
    , decltype(_impl_.disable_effects_){}
    , decltype(_impl_.block_input_){}
    , decltype(_impl_.lock_at_disconnect_){}
    , decltype(_impl_.clear_clipboard_){}
    , decltype(_impl_.cursor_position_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.disable_font_smoothing_, &from._impl_.disable_font_smoothing_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cursor_position_) -
    reinterpret_cast<char*>(&_impl_.disable_font_smoothing_)) + sizeof(_impl_.cursor_position_));
  // @@protoc_insertion_point(copy_constructor:proto.internal.Configure)
}

inline void Configure::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.disable_font_smoothing_){false}
    , decltype(_impl_.disable_wallpaper_){false}
    , decltype(_impl_.disable_effects_){false}
    , decltype(_impl_.block_input_){false}
    , decltype(_impl_.lock_at_disconnect_){false}
    , decltype(_impl_.clear_clipboard_){false}
    , decltype(_impl_.cursor_position_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Configure::~Configure() {
  // @@protoc_insertion_point(destructor:proto.internal.Configure)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Configure::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Configure::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Configure::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.internal.Configure)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.disable_font_smoothing_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.cursor_position_) -
      reinterpret_cast<char*>(&_impl_.disable_font_smoothing_)) + sizeof(_impl_.cursor_position_));
  _internal_metadata_.Clear<std::string>();
}

const char* Configure::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool disable_font_smoothing = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.disable_font_smoothing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool disable_wallpaper = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.disable_wallpaper_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool disable_effects = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.disable_effects_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool block_input = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.block_input_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool lock_at_disconnect = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.lock_at_disconnect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool clear_clipboard = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.clear_clipboard_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool cursor_position = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.cursor_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Configure::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.internal.Configure)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool disable_font_smoothing = 1;
  if (this->_internal_disable_font_smoothing() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_disable_font_smoothing(), target);
  }

  // bool disable_wallpaper = 2;
  if (this->_internal_disable_wallpaper() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_disable_wallpaper(), target);
  }

  // bool disable_effects = 3;
  if (this->_internal_disable_effects() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_disable_effects(), target);
  }

  // bool block_input = 4;
  if (this->_internal_block_input() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_block_input(), target);
  }

  // bool lock_at_disconnect = 5;
  if (this->_internal_lock_at_disconnect() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_lock_at_disconnect(), target);
  }

  // bool clear_clipboard = 6;
  if (this->_internal_clear_clipboard() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_clear_clipboard(), target);
  }

  // bool cursor_position = 7;
  if (this->_internal_cursor_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_cursor_position(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.internal.Configure)
  return target;
}

size_t Configure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.internal.Configure)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool disable_font_smoothing = 1;
  if (this->_internal_disable_font_smoothing() != 0) {
    total_size += 1 + 1;
  }

  // bool disable_wallpaper = 2;
  if (this->_internal_disable_wallpaper() != 0) {
    total_size += 1 + 1;
  }

  // bool disable_effects = 3;
  if (this->_internal_disable_effects() != 0) {
    total_size += 1 + 1;
  }

  // bool block_input = 4;
  if (this->_internal_block_input() != 0) {
    total_size += 1 + 1;
  }

  // bool lock_at_disconnect = 5;
  if (this->_internal_lock_at_disconnect() != 0) {
    total_size += 1 + 1;
  }

  // bool clear_clipboard = 6;
  if (this->_internal_clear_clipboard() != 0) {
    total_size += 1 + 1;
  }

  // bool cursor_position = 7;
  if (this->_internal_cursor_position() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Configure::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Configure*>(
      &from));
}

void Configure::MergeFrom(const Configure& from) {
  Configure* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.internal.Configure)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_disable_font_smoothing() != 0) {
    _this->_internal_set_disable_font_smoothing(from._internal_disable_font_smoothing());
  }
  if (from._internal_disable_wallpaper() != 0) {
    _this->_internal_set_disable_wallpaper(from._internal_disable_wallpaper());
  }
  if (from._internal_disable_effects() != 0) {
    _this->_internal_set_disable_effects(from._internal_disable_effects());
  }
  if (from._internal_block_input() != 0) {
    _this->_internal_set_block_input(from._internal_block_input());
  }
  if (from._internal_lock_at_disconnect() != 0) {
    _this->_internal_set_lock_at_disconnect(from._internal_lock_at_disconnect());
  }
  if (from._internal_clear_clipboard() != 0) {
    _this->_internal_set_clear_clipboard(from._internal_clear_clipboard());
  }
  if (from._internal_cursor_position() != 0) {
    _this->_internal_set_cursor_position(from._internal_cursor_position());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Configure::CopyFrom(const Configure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.internal.Configure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Configure::IsInitialized() const {
  return true;
}

void Configure::InternalSwap(Configure* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Configure, _impl_.cursor_position_)
      + sizeof(Configure::_impl_.cursor_position_)
      - PROTOBUF_FIELD_OFFSET(Configure, _impl_.disable_font_smoothing_)>(
          reinterpret_cast<char*>(&_impl_.disable_font_smoothing_),
          reinterpret_cast<char*>(&other->_impl_.disable_font_smoothing_));
}

std::string Configure::GetTypeName() const {
  return "proto.internal.Configure";
}


// ===================================================================

class DesktopControl::_Internal {
 public:
};

DesktopControl::DesktopControl(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.internal.DesktopControl)
}
DesktopControl::DesktopControl(const DesktopControl& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  DesktopControl* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.action_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _this->_impl_.action_ = from._impl_.action_;
  // @@protoc_insertion_point(copy_constructor:proto.internal.DesktopControl)
}

inline void DesktopControl::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.action_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DesktopControl::~DesktopControl() {
  // @@protoc_insertion_point(destructor:proto.internal.DesktopControl)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DesktopControl::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DesktopControl::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DesktopControl::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.internal.DesktopControl)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.action_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* DesktopControl::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.internal.DesktopControl.Action action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_action(static_cast<::proto::internal::DesktopControl_Action>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DesktopControl::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.internal.DesktopControl)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.internal.DesktopControl.Action action = 1;
  if (this->_internal_action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.internal.DesktopControl)
  return target;
}

size_t DesktopControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.internal.DesktopControl)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.internal.DesktopControl.Action action = 1;
  if (this->_internal_action() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_action());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DesktopControl::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DesktopControl*>(
      &from));
}

void DesktopControl::MergeFrom(const DesktopControl& from) {
  DesktopControl* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.internal.DesktopControl)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_action() != 0) {
    _this->_internal_set_action(from._internal_action());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DesktopControl::CopyFrom(const DesktopControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.internal.DesktopControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DesktopControl::IsInitialized() const {
  return true;
}

void DesktopControl::InternalSwap(DesktopControl* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.action_, other->_impl_.action_);
}

std::string DesktopControl::GetTypeName() const {
  return "proto.internal.DesktopControl";
}


// ===================================================================

class ServiceToDesktop::_Internal {
 public:
  static const ::proto::internal::DesktopControl& control(const ServiceToDesktop* msg);
  static const ::proto::internal::Configure& configure(const ServiceToDesktop* msg);
  static const ::proto::internal::SelectSource& select_source(const ServiceToDesktop* msg);
  static const ::proto::internal::NextScreenCapture& next_screen_capture(const ServiceToDesktop* msg);
  static const ::proto::KeyEvent& key_event(const ServiceToDesktop* msg);
  static const ::proto::TextEvent& text_event(const ServiceToDesktop* msg);
  static const ::proto::MouseEvent& mouse_event(const ServiceToDesktop* msg);
  static const ::proto::ClipboardEvent& clipboard_event(const ServiceToDesktop* msg);
};

const ::proto::internal::DesktopControl&
ServiceToDesktop::_Internal::control(const ServiceToDesktop* msg) {
  return *msg->_impl_.control_;
}
const ::proto::internal::Configure&
ServiceToDesktop::_Internal::configure(const ServiceToDesktop* msg) {
  return *msg->_impl_.configure_;
}
const ::proto::internal::SelectSource&
ServiceToDesktop::_Internal::select_source(const ServiceToDesktop* msg) {
  return *msg->_impl_.select_source_;
}
const ::proto::internal::NextScreenCapture&
ServiceToDesktop::_Internal::next_screen_capture(const ServiceToDesktop* msg) {
  return *msg->_impl_.next_screen_capture_;
}
const ::proto::KeyEvent&
ServiceToDesktop::_Internal::key_event(const ServiceToDesktop* msg) {
  return *msg->_impl_.key_event_;
}
const ::proto::TextEvent&
ServiceToDesktop::_Internal::text_event(const ServiceToDesktop* msg) {
  return *msg->_impl_.text_event_;
}
const ::proto::MouseEvent&
ServiceToDesktop::_Internal::mouse_event(const ServiceToDesktop* msg) {
  return *msg->_impl_.mouse_event_;
}
const ::proto::ClipboardEvent&
ServiceToDesktop::_Internal::clipboard_event(const ServiceToDesktop* msg) {
  return *msg->_impl_.clipboard_event_;
}
void ServiceToDesktop::clear_key_event() {
  if (GetArenaForAllocation() == nullptr && _impl_.key_event_ != nullptr) {
    delete _impl_.key_event_;
  }
  _impl_.key_event_ = nullptr;
}
void ServiceToDesktop::clear_text_event() {
  if (GetArenaForAllocation() == nullptr && _impl_.text_event_ != nullptr) {
    delete _impl_.text_event_;
  }
  _impl_.text_event_ = nullptr;
}
void ServiceToDesktop::clear_mouse_event() {
  if (GetArenaForAllocation() == nullptr && _impl_.mouse_event_ != nullptr) {
    delete _impl_.mouse_event_;
  }
  _impl_.mouse_event_ = nullptr;
}
void ServiceToDesktop::clear_clipboard_event() {
  if (GetArenaForAllocation() == nullptr && _impl_.clipboard_event_ != nullptr) {
    delete _impl_.clipboard_event_;
  }
  _impl_.clipboard_event_ = nullptr;
}
ServiceToDesktop::ServiceToDesktop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.internal.ServiceToDesktop)
}
ServiceToDesktop::ServiceToDesktop(const ServiceToDesktop& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ServiceToDesktop* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.control_){nullptr}
    , decltype(_impl_.configure_){nullptr}
    , decltype(_impl_.select_source_){nullptr}
    , decltype(_impl_.next_screen_capture_){nullptr}
    , decltype(_impl_.key_event_){nullptr}
    , decltype(_impl_.text_event_){nullptr}
    , decltype(_impl_.mouse_event_){nullptr}
    , decltype(_impl_.clipboard_event_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_control()) {
    _this->_impl_.control_ = new ::proto::internal::DesktopControl(*from._impl_.control_);
  }
  if (from._internal_has_configure()) {
    _this->_impl_.configure_ = new ::proto::internal::Configure(*from._impl_.configure_);
  }
  if (from._internal_has_select_source()) {
    _this->_impl_.select_source_ = new ::proto::internal::SelectSource(*from._impl_.select_source_);
  }
  if (from._internal_has_next_screen_capture()) {
    _this->_impl_.next_screen_capture_ = new ::proto::internal::NextScreenCapture(*from._impl_.next_screen_capture_);
  }
  if (from._internal_has_key_event()) {
    _this->_impl_.key_event_ = new ::proto::KeyEvent(*from._impl_.key_event_);
  }
  if (from._internal_has_text_event()) {
    _this->_impl_.text_event_ = new ::proto::TextEvent(*from._impl_.text_event_);
  }
  if (from._internal_has_mouse_event()) {
    _this->_impl_.mouse_event_ = new ::proto::MouseEvent(*from._impl_.mouse_event_);
  }
  if (from._internal_has_clipboard_event()) {
    _this->_impl_.clipboard_event_ = new ::proto::ClipboardEvent(*from._impl_.clipboard_event_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.internal.ServiceToDesktop)
}

inline void ServiceToDesktop::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.control_){nullptr}
    , decltype(_impl_.configure_){nullptr}
    , decltype(_impl_.select_source_){nullptr}
    , decltype(_impl_.next_screen_capture_){nullptr}
    , decltype(_impl_.key_event_){nullptr}
    , decltype(_impl_.text_event_){nullptr}
    , decltype(_impl_.mouse_event_){nullptr}
    , decltype(_impl_.clipboard_event_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ServiceToDesktop::~ServiceToDesktop() {
  // @@protoc_insertion_point(destructor:proto.internal.ServiceToDesktop)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServiceToDesktop::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.control_;
  if (this != internal_default_instance()) delete _impl_.configure_;
  if (this != internal_default_instance()) delete _impl_.select_source_;
  if (this != internal_default_instance()) delete _impl_.next_screen_capture_;
  if (this != internal_default_instance()) delete _impl_.key_event_;
  if (this != internal_default_instance()) delete _impl_.text_event_;
  if (this != internal_default_instance()) delete _impl_.mouse_event_;
  if (this != internal_default_instance()) delete _impl_.clipboard_event_;
}

void ServiceToDesktop::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServiceToDesktop::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.internal.ServiceToDesktop)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.control_ != nullptr) {
    delete _impl_.control_;
  }
  _impl_.control_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.configure_ != nullptr) {
    delete _impl_.configure_;
  }
  _impl_.configure_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.select_source_ != nullptr) {
    delete _impl_.select_source_;
  }
  _impl_.select_source_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.next_screen_capture_ != nullptr) {
    delete _impl_.next_screen_capture_;
  }
  _impl_.next_screen_capture_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.key_event_ != nullptr) {
    delete _impl_.key_event_;
  }
  _impl_.key_event_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.text_event_ != nullptr) {
    delete _impl_.text_event_;
  }
  _impl_.text_event_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mouse_event_ != nullptr) {
    delete _impl_.mouse_event_;
  }
  _impl_.mouse_event_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.clipboard_event_ != nullptr) {
    delete _impl_.clipboard_event_;
  }
  _impl_.clipboard_event_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* ServiceToDesktop::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.internal.DesktopControl control = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_control(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.internal.Configure configure = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_configure(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.internal.SelectSource select_source = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_select_source(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.internal.NextScreenCapture next_screen_capture = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_next_screen_capture(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.KeyEvent key_event = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_key_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.TextEvent text_event = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_text_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.MouseEvent mouse_event = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_mouse_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.ClipboardEvent clipboard_event = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_clipboard_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServiceToDesktop::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.internal.ServiceToDesktop)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.internal.DesktopControl control = 1;
  if (this->_internal_has_control()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::control(this),
        _Internal::control(this).GetCachedSize(), target, stream);
  }

  // .proto.internal.Configure configure = 2;
  if (this->_internal_has_configure()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::configure(this),
        _Internal::configure(this).GetCachedSize(), target, stream);
  }

  // .proto.internal.SelectSource select_source = 3;
  if (this->_internal_has_select_source()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::select_source(this),
        _Internal::select_source(this).GetCachedSize(), target, stream);
  }

  // .proto.internal.NextScreenCapture next_screen_capture = 4;
  if (this->_internal_has_next_screen_capture()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::next_screen_capture(this),
        _Internal::next_screen_capture(this).GetCachedSize(), target, stream);
  }

  // .proto.KeyEvent key_event = 5;
  if (this->_internal_has_key_event()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::key_event(this),
        _Internal::key_event(this).GetCachedSize(), target, stream);
  }

  // .proto.TextEvent text_event = 6;
  if (this->_internal_has_text_event()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::text_event(this),
        _Internal::text_event(this).GetCachedSize(), target, stream);
  }

  // .proto.MouseEvent mouse_event = 7;
  if (this->_internal_has_mouse_event()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::mouse_event(this),
        _Internal::mouse_event(this).GetCachedSize(), target, stream);
  }

  // .proto.ClipboardEvent clipboard_event = 8;
  if (this->_internal_has_clipboard_event()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::clipboard_event(this),
        _Internal::clipboard_event(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.internal.ServiceToDesktop)
  return target;
}

size_t ServiceToDesktop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.internal.ServiceToDesktop)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.internal.DesktopControl control = 1;
  if (this->_internal_has_control()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.control_);
  }

  // .proto.internal.Configure configure = 2;
  if (this->_internal_has_configure()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.configure_);
  }

  // .proto.internal.SelectSource select_source = 3;
  if (this->_internal_has_select_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.select_source_);
  }

  // .proto.internal.NextScreenCapture next_screen_capture = 4;
  if (this->_internal_has_next_screen_capture()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.next_screen_capture_);
  }

  // .proto.KeyEvent key_event = 5;
  if (this->_internal_has_key_event()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.key_event_);
  }

  // .proto.TextEvent text_event = 6;
  if (this->_internal_has_text_event()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.text_event_);
  }

  // .proto.MouseEvent mouse_event = 7;
  if (this->_internal_has_mouse_event()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mouse_event_);
  }

  // .proto.ClipboardEvent clipboard_event = 8;
  if (this->_internal_has_clipboard_event()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.clipboard_event_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServiceToDesktop::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ServiceToDesktop*>(
      &from));
}

void ServiceToDesktop::MergeFrom(const ServiceToDesktop& from) {
  ServiceToDesktop* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.internal.ServiceToDesktop)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_control()) {
    _this->_internal_mutable_control()->::proto::internal::DesktopControl::MergeFrom(
        from._internal_control());
  }
  if (from._internal_has_configure()) {
    _this->_internal_mutable_configure()->::proto::internal::Configure::MergeFrom(
        from._internal_configure());
  }
  if (from._internal_has_select_source()) {
    _this->_internal_mutable_select_source()->::proto::internal::SelectSource::MergeFrom(
        from._internal_select_source());
  }
  if (from._internal_has_next_screen_capture()) {
    _this->_internal_mutable_next_screen_capture()->::proto::internal::NextScreenCapture::MergeFrom(
        from._internal_next_screen_capture());
  }
  if (from._internal_has_key_event()) {
    _this->_internal_mutable_key_event()->::proto::KeyEvent::MergeFrom(
        from._internal_key_event());
  }
  if (from._internal_has_text_event()) {
    _this->_internal_mutable_text_event()->::proto::TextEvent::MergeFrom(
        from._internal_text_event());
  }
  if (from._internal_has_mouse_event()) {
    _this->_internal_mutable_mouse_event()->::proto::MouseEvent::MergeFrom(
        from._internal_mouse_event());
  }
  if (from._internal_has_clipboard_event()) {
    _this->_internal_mutable_clipboard_event()->::proto::ClipboardEvent::MergeFrom(
        from._internal_clipboard_event());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ServiceToDesktop::CopyFrom(const ServiceToDesktop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.internal.ServiceToDesktop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceToDesktop::IsInitialized() const {
  return true;
}

void ServiceToDesktop::InternalSwap(ServiceToDesktop* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServiceToDesktop, _impl_.clipboard_event_)
      + sizeof(ServiceToDesktop::_impl_.clipboard_event_)
      - PROTOBUF_FIELD_OFFSET(ServiceToDesktop, _impl_.control_)>(
          reinterpret_cast<char*>(&_impl_.control_),
          reinterpret_cast<char*>(&other->_impl_.control_));
}

std::string ServiceToDesktop::GetTypeName() const {
  return "proto.internal.ServiceToDesktop";
}


// ===================================================================

class DesktopToService::_Internal {
 public:
  static const ::proto::ScreenList& screen_list(const DesktopToService* msg);
  static const ::proto::internal::SharedBuffer& shared_buffer(const DesktopToService* msg);
  static const ::proto::internal::ScreenCaptured& screen_captured(const DesktopToService* msg);
  static const ::proto::AudioPacket& audio_packet(const DesktopToService* msg);
  static const ::proto::ClipboardEvent& clipboard_event(const DesktopToService* msg);
  static const ::proto::CursorPosition& cursor_position(const DesktopToService* msg);
};

const ::proto::ScreenList&
DesktopToService::_Internal::screen_list(const DesktopToService* msg) {
  return *msg->_impl_.screen_list_;
}
const ::proto::internal::SharedBuffer&
DesktopToService::_Internal::shared_buffer(const DesktopToService* msg) {
  return *msg->_impl_.shared_buffer_;
}
const ::proto::internal::ScreenCaptured&
DesktopToService::_Internal::screen_captured(const DesktopToService* msg) {
  return *msg->_impl_.screen_captured_;
}
const ::proto::AudioPacket&
DesktopToService::_Internal::audio_packet(const DesktopToService* msg) {
  return *msg->_impl_.audio_packet_;
}
const ::proto::ClipboardEvent&
DesktopToService::_Internal::clipboard_event(const DesktopToService* msg) {
  return *msg->_impl_.clipboard_event_;
}
const ::proto::CursorPosition&
DesktopToService::_Internal::cursor_position(const DesktopToService* msg) {
  return *msg->_impl_.cursor_position_;
}
void DesktopToService::clear_screen_list() {
  if (GetArenaForAllocation() == nullptr && _impl_.screen_list_ != nullptr) {
    delete _impl_.screen_list_;
  }
  _impl_.screen_list_ = nullptr;
}
void DesktopToService::clear_audio_packet() {
  if (GetArenaForAllocation() == nullptr && _impl_.audio_packet_ != nullptr) {
    delete _impl_.audio_packet_;
  }
  _impl_.audio_packet_ = nullptr;
}
void DesktopToService::clear_clipboard_event() {
  if (GetArenaForAllocation() == nullptr && _impl_.clipboard_event_ != nullptr) {
    delete _impl_.clipboard_event_;
  }
  _impl_.clipboard_event_ = nullptr;
}
void DesktopToService::clear_cursor_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.cursor_position_ != nullptr) {
    delete _impl_.cursor_position_;
  }
  _impl_.cursor_position_ = nullptr;
}
DesktopToService::DesktopToService(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.internal.DesktopToService)
}
DesktopToService::DesktopToService(const DesktopToService& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  DesktopToService* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.screen_list_){nullptr}
    , decltype(_impl_.shared_buffer_){nullptr}
    , decltype(_impl_.screen_captured_){nullptr}
    , decltype(_impl_.audio_packet_){nullptr}
    , decltype(_impl_.clipboard_event_){nullptr}
    , decltype(_impl_.cursor_position_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_screen_list()) {
    _this->_impl_.screen_list_ = new ::proto::ScreenList(*from._impl_.screen_list_);
  }
  if (from._internal_has_shared_buffer()) {
    _this->_impl_.shared_buffer_ = new ::proto::internal::SharedBuffer(*from._impl_.shared_buffer_);
  }
  if (from._internal_has_screen_captured()) {
    _this->_impl_.screen_captured_ = new ::proto::internal::ScreenCaptured(*from._impl_.screen_captured_);
  }
  if (from._internal_has_audio_packet()) {
    _this->_impl_.audio_packet_ = new ::proto::AudioPacket(*from._impl_.audio_packet_);
  }
  if (from._internal_has_clipboard_event()) {
    _this->_impl_.clipboard_event_ = new ::proto::ClipboardEvent(*from._impl_.clipboard_event_);
  }
  if (from._internal_has_cursor_position()) {
    _this->_impl_.cursor_position_ = new ::proto::CursorPosition(*from._impl_.cursor_position_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.internal.DesktopToService)
}

inline void DesktopToService::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.screen_list_){nullptr}
    , decltype(_impl_.shared_buffer_){nullptr}
    , decltype(_impl_.screen_captured_){nullptr}
    , decltype(_impl_.audio_packet_){nullptr}
    , decltype(_impl_.clipboard_event_){nullptr}
    , decltype(_impl_.cursor_position_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DesktopToService::~DesktopToService() {
  // @@protoc_insertion_point(destructor:proto.internal.DesktopToService)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DesktopToService::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.screen_list_;
  if (this != internal_default_instance()) delete _impl_.shared_buffer_;
  if (this != internal_default_instance()) delete _impl_.screen_captured_;
  if (this != internal_default_instance()) delete _impl_.audio_packet_;
  if (this != internal_default_instance()) delete _impl_.clipboard_event_;
  if (this != internal_default_instance()) delete _impl_.cursor_position_;
}

void DesktopToService::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DesktopToService::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.internal.DesktopToService)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.screen_list_ != nullptr) {
    delete _impl_.screen_list_;
  }
  _impl_.screen_list_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.shared_buffer_ != nullptr) {
    delete _impl_.shared_buffer_;
  }
  _impl_.shared_buffer_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.screen_captured_ != nullptr) {
    delete _impl_.screen_captured_;
  }
  _impl_.screen_captured_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.audio_packet_ != nullptr) {
    delete _impl_.audio_packet_;
  }
  _impl_.audio_packet_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.clipboard_event_ != nullptr) {
    delete _impl_.clipboard_event_;
  }
  _impl_.clipboard_event_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.cursor_position_ != nullptr) {
    delete _impl_.cursor_position_;
  }
  _impl_.cursor_position_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* DesktopToService::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.ScreenList screen_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_screen_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.internal.SharedBuffer shared_buffer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_shared_buffer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.internal.ScreenCaptured screen_captured = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_screen_captured(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.AudioPacket audio_packet = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_audio_packet(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.ClipboardEvent clipboard_event = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_clipboard_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.CursorPosition cursor_position = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_cursor_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DesktopToService::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.internal.DesktopToService)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.ScreenList screen_list = 1;
  if (this->_internal_has_screen_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::screen_list(this),
        _Internal::screen_list(this).GetCachedSize(), target, stream);
  }

  // .proto.internal.SharedBuffer shared_buffer = 2;
  if (this->_internal_has_shared_buffer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::shared_buffer(this),
        _Internal::shared_buffer(this).GetCachedSize(), target, stream);
  }

  // .proto.internal.ScreenCaptured screen_captured = 3;
  if (this->_internal_has_screen_captured()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::screen_captured(this),
        _Internal::screen_captured(this).GetCachedSize(), target, stream);
  }

  // .proto.AudioPacket audio_packet = 4;
  if (this->_internal_has_audio_packet()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::audio_packet(this),
        _Internal::audio_packet(this).GetCachedSize(), target, stream);
  }

  // .proto.ClipboardEvent clipboard_event = 5;
  if (this->_internal_has_clipboard_event()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::clipboard_event(this),
        _Internal::clipboard_event(this).GetCachedSize(), target, stream);
  }

  // .proto.CursorPosition cursor_position = 6;
  if (this->_internal_has_cursor_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::cursor_position(this),
        _Internal::cursor_position(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.internal.DesktopToService)
  return target;
}

size_t DesktopToService::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.internal.DesktopToService)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.ScreenList screen_list = 1;
  if (this->_internal_has_screen_list()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.screen_list_);
  }

  // .proto.internal.SharedBuffer shared_buffer = 2;
  if (this->_internal_has_shared_buffer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.shared_buffer_);
  }

  // .proto.internal.ScreenCaptured screen_captured = 3;
  if (this->_internal_has_screen_captured()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.screen_captured_);
  }

  // .proto.AudioPacket audio_packet = 4;
  if (this->_internal_has_audio_packet()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.audio_packet_);
  }

  // .proto.ClipboardEvent clipboard_event = 5;
  if (this->_internal_has_clipboard_event()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.clipboard_event_);
  }

  // .proto.CursorPosition cursor_position = 6;
  if (this->_internal_has_cursor_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cursor_position_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DesktopToService::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DesktopToService*>(
      &from));
}

void DesktopToService::MergeFrom(const DesktopToService& from) {
  DesktopToService* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.internal.DesktopToService)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_screen_list()) {
    _this->_internal_mutable_screen_list()->::proto::ScreenList::MergeFrom(
        from._internal_screen_list());
  }
  if (from._internal_has_shared_buffer()) {
    _this->_internal_mutable_shared_buffer()->::proto::internal::SharedBuffer::MergeFrom(
        from._internal_shared_buffer());
  }
  if (from._internal_has_screen_captured()) {
    _this->_internal_mutable_screen_captured()->::proto::internal::ScreenCaptured::MergeFrom(
        from._internal_screen_captured());
  }
  if (from._internal_has_audio_packet()) {
    _this->_internal_mutable_audio_packet()->::proto::AudioPacket::MergeFrom(
        from._internal_audio_packet());
  }
  if (from._internal_has_clipboard_event()) {
    _this->_internal_mutable_clipboard_event()->::proto::ClipboardEvent::MergeFrom(
        from._internal_clipboard_event());
  }
  if (from._internal_has_cursor_position()) {
    _this->_internal_mutable_cursor_position()->::proto::CursorPosition::MergeFrom(
        from._internal_cursor_position());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DesktopToService::CopyFrom(const DesktopToService& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.internal.DesktopToService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DesktopToService::IsInitialized() const {
  return true;
}

void DesktopToService::InternalSwap(DesktopToService* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DesktopToService, _impl_.cursor_position_)
      + sizeof(DesktopToService::_impl_.cursor_position_)
      - PROTOBUF_FIELD_OFFSET(DesktopToService, _impl_.screen_list_)>(
          reinterpret_cast<char*>(&_impl_.screen_list_),
          reinterpret_cast<char*>(&other->_impl_.screen_list_));
}

std::string DesktopToService::GetTypeName() const {
  return "proto.internal.DesktopToService";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace internal
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::internal::DesktopFrame*
Arena::CreateMaybeMessage< ::proto::internal::DesktopFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::internal::DesktopFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::internal::MouseCursor*
Arena::CreateMaybeMessage< ::proto::internal::MouseCursor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::internal::MouseCursor >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::internal::SharedBuffer*
Arena::CreateMaybeMessage< ::proto::internal::SharedBuffer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::internal::SharedBuffer >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::internal::ScreenCaptured*
Arena::CreateMaybeMessage< ::proto::internal::ScreenCaptured >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::internal::ScreenCaptured >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::internal::NextScreenCapture*
Arena::CreateMaybeMessage< ::proto::internal::NextScreenCapture >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::internal::NextScreenCapture >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::internal::SelectSource*
Arena::CreateMaybeMessage< ::proto::internal::SelectSource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::internal::SelectSource >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::internal::Configure*
Arena::CreateMaybeMessage< ::proto::internal::Configure >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::internal::Configure >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::internal::DesktopControl*
Arena::CreateMaybeMessage< ::proto::internal::DesktopControl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::internal::DesktopControl >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::internal::ServiceToDesktop*
Arena::CreateMaybeMessage< ::proto::internal::ServiceToDesktop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::internal::ServiceToDesktop >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::internal::DesktopToService*
Arena::CreateMaybeMessage< ::proto::internal::DesktopToService >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::internal::DesktopToService >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
