// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: key_exchange.proto

#include "key_exchange.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace proto {
PROTOBUF_CONSTEXPR ClientHello::ClientHello(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.public_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.iv_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.encryption_)*/0u
  , /*decltype(_impl_.identify_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ClientHelloDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientHelloDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientHelloDefaultTypeInternal() {}
  union {
    ClientHello _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientHelloDefaultTypeInternal _ClientHello_default_instance_;
PROTOBUF_CONSTEXPR ServerHello::ServerHello(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.iv_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.encryption_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerHelloDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerHelloDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerHelloDefaultTypeInternal() {}
  union {
    ServerHello _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerHelloDefaultTypeInternal _ServerHello_default_instance_;
PROTOBUF_CONSTEXPR SrpIdentify::SrpIdentify(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SrpIdentifyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SrpIdentifyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SrpIdentifyDefaultTypeInternal() {}
  union {
    SrpIdentify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SrpIdentifyDefaultTypeInternal _SrpIdentify_default_instance_;
PROTOBUF_CONSTEXPR SrpServerKeyExchange::SrpServerKeyExchange(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.number_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.generator_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.salt_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.b_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.iv_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SrpServerKeyExchangeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SrpServerKeyExchangeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SrpServerKeyExchangeDefaultTypeInternal() {}
  union {
    SrpServerKeyExchange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SrpServerKeyExchangeDefaultTypeInternal _SrpServerKeyExchange_default_instance_;
PROTOBUF_CONSTEXPR SrpClientKeyExchange::SrpClientKeyExchange(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.a_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.iv_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SrpClientKeyExchangeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SrpClientKeyExchangeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SrpClientKeyExchangeDefaultTypeInternal() {}
  union {
    SrpClientKeyExchange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SrpClientKeyExchangeDefaultTypeInternal _SrpClientKeyExchange_default_instance_;
PROTOBUF_CONSTEXPR SessionChallenge::SessionChallenge(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.os_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.computer_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/nullptr
  , /*decltype(_impl_.session_types_)*/0u
  , /*decltype(_impl_.cpu_cores_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SessionChallengeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SessionChallengeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SessionChallengeDefaultTypeInternal() {}
  union {
    SessionChallenge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SessionChallengeDefaultTypeInternal _SessionChallenge_default_instance_;
PROTOBUF_CONSTEXPR SessionResponse::SessionResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.os_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.computer_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/nullptr
  , /*decltype(_impl_.session_type_)*/0u
  , /*decltype(_impl_.cpu_cores_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SessionResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SessionResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SessionResponseDefaultTypeInternal() {}
  union {
    SessionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SessionResponseDefaultTypeInternal _SessionResponse_default_instance_;
}  // namespace proto
namespace proto {
bool Identify_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Identify_strings[2] = {};

static const char Identify_names[] =
  "IDENTIFY_ANONYMOUS"
  "IDENTIFY_SRP";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Identify_entries[] = {
  { {Identify_names + 0, 18}, 1 },
  { {Identify_names + 18, 12}, 0 },
};

static const int Identify_entries_by_number[] = {
  1, // 0 -> IDENTIFY_SRP
  0, // 1 -> IDENTIFY_ANONYMOUS
};

const std::string& Identify_Name(
    Identify value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Identify_entries,
          Identify_entries_by_number,
          2, Identify_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Identify_entries,
      Identify_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Identify_strings[idx].get();
}
bool Identify_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Identify* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Identify_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<Identify>(int_value);
  }
  return success;
}
bool Encryption_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Encryption_strings[3] = {};

static const char Encryption_names[] =
  "ENCRYPTION_AES256_GCM"
  "ENCRYPTION_CHACHA20_POLY1305"
  "ENCRYPTION_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Encryption_entries[] = {
  { {Encryption_names + 0, 21}, 2 },
  { {Encryption_names + 21, 28}, 1 },
  { {Encryption_names + 49, 18}, 0 },
};

static const int Encryption_entries_by_number[] = {
  2, // 0 -> ENCRYPTION_UNKNOWN
  1, // 1 -> ENCRYPTION_CHACHA20_POLY1305
  0, // 2 -> ENCRYPTION_AES256_GCM
};

const std::string& Encryption_Name(
    Encryption value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Encryption_entries,
          Encryption_entries_by_number,
          3, Encryption_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Encryption_entries,
      Encryption_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Encryption_strings[idx].get();
}
bool Encryption_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Encryption* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Encryption_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<Encryption>(int_value);
  }
  return success;
}

// ===================================================================

class ClientHello::_Internal {
 public:
};

ClientHello::ClientHello(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ClientHello)
}
ClientHello::ClientHello(const ClientHello& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ClientHello* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.public_key_){}
    , decltype(_impl_.iv_){}
    , decltype(_impl_.encryption_){}
    , decltype(_impl_.identify_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.public_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.public_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_public_key().empty()) {
    _this->_impl_.public_key_.Set(from._internal_public_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.iv_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.iv_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_iv().empty()) {
    _this->_impl_.iv_.Set(from._internal_iv(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.encryption_, &from._impl_.encryption_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.identify_) -
    reinterpret_cast<char*>(&_impl_.encryption_)) + sizeof(_impl_.identify_));
  // @@protoc_insertion_point(copy_constructor:proto.ClientHello)
}

inline void ClientHello::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.public_key_){}
    , decltype(_impl_.iv_){}
    , decltype(_impl_.encryption_){0u}
    , decltype(_impl_.identify_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.public_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.public_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.iv_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.iv_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ClientHello::~ClientHello() {
  // @@protoc_insertion_point(destructor:proto.ClientHello)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientHello::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.public_key_.Destroy();
  _impl_.iv_.Destroy();
}

void ClientHello::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClientHello::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ClientHello)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.public_key_.ClearToEmpty();
  _impl_.iv_.ClearToEmpty();
  ::memset(&_impl_.encryption_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.identify_) -
      reinterpret_cast<char*>(&_impl_.encryption_)) + sizeof(_impl_.identify_));
  _internal_metadata_.Clear<std::string>();
}

const char* ClientHello::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 encryption = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.encryption_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Identify identify = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_identify(static_cast<::proto::Identify>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes public_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_public_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes iv = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_iv();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientHello::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ClientHello)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 encryption = 1;
  if (this->_internal_encryption() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_encryption(), target);
  }

  // .proto.Identify identify = 2;
  if (this->_internal_identify() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_identify(), target);
  }

  // bytes public_key = 3;
  if (!this->_internal_public_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_public_key(), target);
  }

  // bytes iv = 4;
  if (!this->_internal_iv().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_iv(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ClientHello)
  return target;
}

size_t ClientHello::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ClientHello)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes public_key = 3;
  if (!this->_internal_public_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_public_key());
  }

  // bytes iv = 4;
  if (!this->_internal_iv().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_iv());
  }

  // uint32 encryption = 1;
  if (this->_internal_encryption() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_encryption());
  }

  // .proto.Identify identify = 2;
  if (this->_internal_identify() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_identify());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientHello::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientHello*>(
      &from));
}

void ClientHello::MergeFrom(const ClientHello& from) {
  ClientHello* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ClientHello)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_public_key().empty()) {
    _this->_internal_set_public_key(from._internal_public_key());
  }
  if (!from._internal_iv().empty()) {
    _this->_internal_set_iv(from._internal_iv());
  }
  if (from._internal_encryption() != 0) {
    _this->_internal_set_encryption(from._internal_encryption());
  }
  if (from._internal_identify() != 0) {
    _this->_internal_set_identify(from._internal_identify());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientHello::CopyFrom(const ClientHello& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ClientHello)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientHello::IsInitialized() const {
  return true;
}

void ClientHello::InternalSwap(ClientHello* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.public_key_, lhs_arena,
      &other->_impl_.public_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.iv_, lhs_arena,
      &other->_impl_.iv_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientHello, _impl_.identify_)
      + sizeof(ClientHello::_impl_.identify_)
      - PROTOBUF_FIELD_OFFSET(ClientHello, _impl_.encryption_)>(
          reinterpret_cast<char*>(&_impl_.encryption_),
          reinterpret_cast<char*>(&other->_impl_.encryption_));
}

std::string ClientHello::GetTypeName() const {
  return "proto.ClientHello";
}


// ===================================================================

class ServerHello::_Internal {
 public:
};

ServerHello::ServerHello(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ServerHello)
}
ServerHello::ServerHello(const ServerHello& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ServerHello* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.iv_){}
    , decltype(_impl_.encryption_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.iv_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.iv_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_iv().empty()) {
    _this->_impl_.iv_.Set(from._internal_iv(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.encryption_ = from._impl_.encryption_;
  // @@protoc_insertion_point(copy_constructor:proto.ServerHello)
}

inline void ServerHello::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.iv_){}
    , decltype(_impl_.encryption_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.iv_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.iv_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ServerHello::~ServerHello() {
  // @@protoc_insertion_point(destructor:proto.ServerHello)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerHello::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.iv_.Destroy();
}

void ServerHello::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerHello::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ServerHello)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.iv_.ClearToEmpty();
  _impl_.encryption_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* ServerHello::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.Encryption encryption = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_encryption(static_cast<::proto::Encryption>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes iv = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_iv();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerHello::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ServerHello)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.Encryption encryption = 1;
  if (this->_internal_encryption() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_encryption(), target);
  }

  // bytes iv = 2;
  if (!this->_internal_iv().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_iv(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ServerHello)
  return target;
}

size_t ServerHello::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ServerHello)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes iv = 2;
  if (!this->_internal_iv().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_iv());
  }

  // .proto.Encryption encryption = 1;
  if (this->_internal_encryption() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_encryption());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerHello::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ServerHello*>(
      &from));
}

void ServerHello::MergeFrom(const ServerHello& from) {
  ServerHello* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ServerHello)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_iv().empty()) {
    _this->_internal_set_iv(from._internal_iv());
  }
  if (from._internal_encryption() != 0) {
    _this->_internal_set_encryption(from._internal_encryption());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ServerHello::CopyFrom(const ServerHello& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ServerHello)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerHello::IsInitialized() const {
  return true;
}

void ServerHello::InternalSwap(ServerHello* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.iv_, lhs_arena,
      &other->_impl_.iv_, rhs_arena
  );
  swap(_impl_.encryption_, other->_impl_.encryption_);
}

std::string ServerHello::GetTypeName() const {
  return "proto.ServerHello";
}


// ===================================================================

class SrpIdentify::_Internal {
 public:
};

SrpIdentify::SrpIdentify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.SrpIdentify)
}
SrpIdentify::SrpIdentify(const SrpIdentify& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SrpIdentify* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    _this->_impl_.username_.Set(from._internal_username(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.SrpIdentify)
}

inline void SrpIdentify::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SrpIdentify::~SrpIdentify() {
  // @@protoc_insertion_point(destructor:proto.SrpIdentify)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SrpIdentify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.username_.Destroy();
}

void SrpIdentify::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SrpIdentify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SrpIdentify)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.username_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* SrpIdentify::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SrpIdentify::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.SrpIdentify)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.SrpIdentify.username");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SrpIdentify)
  return target;
}

size_t SrpIdentify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SrpIdentify)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 1;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SrpIdentify::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SrpIdentify*>(
      &from));
}

void SrpIdentify::MergeFrom(const SrpIdentify& from) {
  SrpIdentify* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.SrpIdentify)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_username().empty()) {
    _this->_internal_set_username(from._internal_username());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SrpIdentify::CopyFrom(const SrpIdentify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SrpIdentify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SrpIdentify::IsInitialized() const {
  return true;
}

void SrpIdentify::InternalSwap(SrpIdentify* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.username_, lhs_arena,
      &other->_impl_.username_, rhs_arena
  );
}

std::string SrpIdentify::GetTypeName() const {
  return "proto.SrpIdentify";
}


// ===================================================================

class SrpServerKeyExchange::_Internal {
 public:
};

SrpServerKeyExchange::SrpServerKeyExchange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.SrpServerKeyExchange)
}
SrpServerKeyExchange::SrpServerKeyExchange(const SrpServerKeyExchange& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SrpServerKeyExchange* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.number_){}
    , decltype(_impl_.generator_){}
    , decltype(_impl_.salt_){}
    , decltype(_impl_.b_){}
    , decltype(_impl_.iv_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_number().empty()) {
    _this->_impl_.number_.Set(from._internal_number(), 
      _this->GetArenaForAllocation());
  }
  _impl_.generator_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.generator_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_generator().empty()) {
    _this->_impl_.generator_.Set(from._internal_generator(), 
      _this->GetArenaForAllocation());
  }
  _impl_.salt_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.salt_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_salt().empty()) {
    _this->_impl_.salt_.Set(from._internal_salt(), 
      _this->GetArenaForAllocation());
  }
  _impl_.b_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.b_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_b().empty()) {
    _this->_impl_.b_.Set(from._internal_b(), 
      _this->GetArenaForAllocation());
  }
  _impl_.iv_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.iv_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_iv().empty()) {
    _this->_impl_.iv_.Set(from._internal_iv(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.SrpServerKeyExchange)
}

inline void SrpServerKeyExchange::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.number_){}
    , decltype(_impl_.generator_){}
    , decltype(_impl_.salt_){}
    , decltype(_impl_.b_){}
    , decltype(_impl_.iv_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.generator_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.generator_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.salt_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.salt_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.b_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.b_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.iv_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.iv_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SrpServerKeyExchange::~SrpServerKeyExchange() {
  // @@protoc_insertion_point(destructor:proto.SrpServerKeyExchange)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SrpServerKeyExchange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.number_.Destroy();
  _impl_.generator_.Destroy();
  _impl_.salt_.Destroy();
  _impl_.b_.Destroy();
  _impl_.iv_.Destroy();
}

void SrpServerKeyExchange::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SrpServerKeyExchange::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SrpServerKeyExchange)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.number_.ClearToEmpty();
  _impl_.generator_.ClearToEmpty();
  _impl_.salt_.ClearToEmpty();
  _impl_.b_.ClearToEmpty();
  _impl_.iv_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* SrpServerKeyExchange::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_number();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes generator = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_generator();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes salt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_salt();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes B = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_b();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes iv = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_iv();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SrpServerKeyExchange::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.SrpServerKeyExchange)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes number = 1;
  if (!this->_internal_number().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_number(), target);
  }

  // bytes generator = 2;
  if (!this->_internal_generator().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_generator(), target);
  }

  // bytes salt = 3;
  if (!this->_internal_salt().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_salt(), target);
  }

  // bytes B = 4;
  if (!this->_internal_b().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_b(), target);
  }

  // bytes iv = 5;
  if (!this->_internal_iv().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_iv(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SrpServerKeyExchange)
  return target;
}

size_t SrpServerKeyExchange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SrpServerKeyExchange)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes number = 1;
  if (!this->_internal_number().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_number());
  }

  // bytes generator = 2;
  if (!this->_internal_generator().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_generator());
  }

  // bytes salt = 3;
  if (!this->_internal_salt().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_salt());
  }

  // bytes B = 4;
  if (!this->_internal_b().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_b());
  }

  // bytes iv = 5;
  if (!this->_internal_iv().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_iv());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SrpServerKeyExchange::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SrpServerKeyExchange*>(
      &from));
}

void SrpServerKeyExchange::MergeFrom(const SrpServerKeyExchange& from) {
  SrpServerKeyExchange* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.SrpServerKeyExchange)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_number().empty()) {
    _this->_internal_set_number(from._internal_number());
  }
  if (!from._internal_generator().empty()) {
    _this->_internal_set_generator(from._internal_generator());
  }
  if (!from._internal_salt().empty()) {
    _this->_internal_set_salt(from._internal_salt());
  }
  if (!from._internal_b().empty()) {
    _this->_internal_set_b(from._internal_b());
  }
  if (!from._internal_iv().empty()) {
    _this->_internal_set_iv(from._internal_iv());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SrpServerKeyExchange::CopyFrom(const SrpServerKeyExchange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SrpServerKeyExchange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SrpServerKeyExchange::IsInitialized() const {
  return true;
}

void SrpServerKeyExchange::InternalSwap(SrpServerKeyExchange* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.number_, lhs_arena,
      &other->_impl_.number_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.generator_, lhs_arena,
      &other->_impl_.generator_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.salt_, lhs_arena,
      &other->_impl_.salt_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.b_, lhs_arena,
      &other->_impl_.b_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.iv_, lhs_arena,
      &other->_impl_.iv_, rhs_arena
  );
}

std::string SrpServerKeyExchange::GetTypeName() const {
  return "proto.SrpServerKeyExchange";
}


// ===================================================================

class SrpClientKeyExchange::_Internal {
 public:
};

SrpClientKeyExchange::SrpClientKeyExchange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.SrpClientKeyExchange)
}
SrpClientKeyExchange::SrpClientKeyExchange(const SrpClientKeyExchange& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SrpClientKeyExchange* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.a_){}
    , decltype(_impl_.iv_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.a_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.a_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_a().empty()) {
    _this->_impl_.a_.Set(from._internal_a(), 
      _this->GetArenaForAllocation());
  }
  _impl_.iv_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.iv_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_iv().empty()) {
    _this->_impl_.iv_.Set(from._internal_iv(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.SrpClientKeyExchange)
}

inline void SrpClientKeyExchange::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.a_){}
    , decltype(_impl_.iv_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.a_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.a_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.iv_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.iv_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SrpClientKeyExchange::~SrpClientKeyExchange() {
  // @@protoc_insertion_point(destructor:proto.SrpClientKeyExchange)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SrpClientKeyExchange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.a_.Destroy();
  _impl_.iv_.Destroy();
}

void SrpClientKeyExchange::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SrpClientKeyExchange::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SrpClientKeyExchange)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.a_.ClearToEmpty();
  _impl_.iv_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* SrpClientKeyExchange::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes A = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_a();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes iv = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_iv();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SrpClientKeyExchange::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.SrpClientKeyExchange)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes A = 1;
  if (!this->_internal_a().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_a(), target);
  }

  // bytes iv = 2;
  if (!this->_internal_iv().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_iv(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SrpClientKeyExchange)
  return target;
}

size_t SrpClientKeyExchange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SrpClientKeyExchange)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes A = 1;
  if (!this->_internal_a().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_a());
  }

  // bytes iv = 2;
  if (!this->_internal_iv().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_iv());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SrpClientKeyExchange::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SrpClientKeyExchange*>(
      &from));
}

void SrpClientKeyExchange::MergeFrom(const SrpClientKeyExchange& from) {
  SrpClientKeyExchange* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.SrpClientKeyExchange)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_a().empty()) {
    _this->_internal_set_a(from._internal_a());
  }
  if (!from._internal_iv().empty()) {
    _this->_internal_set_iv(from._internal_iv());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SrpClientKeyExchange::CopyFrom(const SrpClientKeyExchange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SrpClientKeyExchange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SrpClientKeyExchange::IsInitialized() const {
  return true;
}

void SrpClientKeyExchange::InternalSwap(SrpClientKeyExchange* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.a_, lhs_arena,
      &other->_impl_.a_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.iv_, lhs_arena,
      &other->_impl_.iv_, rhs_arena
  );
}

std::string SrpClientKeyExchange::GetTypeName() const {
  return "proto.SrpClientKeyExchange";
}


// ===================================================================

class SessionChallenge::_Internal {
 public:
  static const ::proto::Version& version(const SessionChallenge* msg);
};

const ::proto::Version&
SessionChallenge::_Internal::version(const SessionChallenge* msg) {
  return *msg->_impl_.version_;
}
void SessionChallenge::clear_version() {
  if (GetArenaForAllocation() == nullptr && _impl_.version_ != nullptr) {
    delete _impl_.version_;
  }
  _impl_.version_ = nullptr;
}
SessionChallenge::SessionChallenge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.SessionChallenge)
}
SessionChallenge::SessionChallenge(const SessionChallenge& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SessionChallenge* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.os_name_){}
    , decltype(_impl_.computer_name_){}
    , decltype(_impl_.version_){nullptr}
    , decltype(_impl_.session_types_){}
    , decltype(_impl_.cpu_cores_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.os_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.os_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_os_name().empty()) {
    _this->_impl_.os_name_.Set(from._internal_os_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.computer_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.computer_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_computer_name().empty()) {
    _this->_impl_.computer_name_.Set(from._internal_computer_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_version()) {
    _this->_impl_.version_ = new ::proto::Version(*from._impl_.version_);
  }
  ::memcpy(&_impl_.session_types_, &from._impl_.session_types_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cpu_cores_) -
    reinterpret_cast<char*>(&_impl_.session_types_)) + sizeof(_impl_.cpu_cores_));
  // @@protoc_insertion_point(copy_constructor:proto.SessionChallenge)
}

inline void SessionChallenge::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.os_name_){}
    , decltype(_impl_.computer_name_){}
    , decltype(_impl_.version_){nullptr}
    , decltype(_impl_.session_types_){0u}
    , decltype(_impl_.cpu_cores_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.os_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.os_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.computer_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.computer_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SessionChallenge::~SessionChallenge() {
  // @@protoc_insertion_point(destructor:proto.SessionChallenge)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SessionChallenge::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.os_name_.Destroy();
  _impl_.computer_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.version_;
}

void SessionChallenge::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SessionChallenge::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SessionChallenge)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.os_name_.ClearToEmpty();
  _impl_.computer_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.version_ != nullptr) {
    delete _impl_.version_;
  }
  _impl_.version_ = nullptr;
  ::memset(&_impl_.session_types_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.cpu_cores_) -
      reinterpret_cast<char*>(&_impl_.session_types_)) + sizeof(_impl_.cpu_cores_));
  _internal_metadata_.Clear<std::string>();
}

const char* SessionChallenge::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.Version version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_version(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 session_types = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.session_types_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 cpu_cores = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.cpu_cores_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string os_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_os_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // string computer_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_computer_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SessionChallenge::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.SessionChallenge)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.Version version = 1;
  if (this->_internal_has_version()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::version(this),
        _Internal::version(this).GetCachedSize(), target, stream);
  }

  // uint32 session_types = 2;
  if (this->_internal_session_types() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_session_types(), target);
  }

  // uint32 cpu_cores = 3;
  if (this->_internal_cpu_cores() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_cpu_cores(), target);
  }

  // string os_name = 4;
  if (!this->_internal_os_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_os_name().data(), static_cast<int>(this->_internal_os_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.SessionChallenge.os_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_os_name(), target);
  }

  // string computer_name = 5;
  if (!this->_internal_computer_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_computer_name().data(), static_cast<int>(this->_internal_computer_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.SessionChallenge.computer_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_computer_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SessionChallenge)
  return target;
}

size_t SessionChallenge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SessionChallenge)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string os_name = 4;
  if (!this->_internal_os_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_os_name());
  }

  // string computer_name = 5;
  if (!this->_internal_computer_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_computer_name());
  }

  // .proto.Version version = 1;
  if (this->_internal_has_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.version_);
  }

  // uint32 session_types = 2;
  if (this->_internal_session_types() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_session_types());
  }

  // uint32 cpu_cores = 3;
  if (this->_internal_cpu_cores() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cpu_cores());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SessionChallenge::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SessionChallenge*>(
      &from));
}

void SessionChallenge::MergeFrom(const SessionChallenge& from) {
  SessionChallenge* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.SessionChallenge)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_os_name().empty()) {
    _this->_internal_set_os_name(from._internal_os_name());
  }
  if (!from._internal_computer_name().empty()) {
    _this->_internal_set_computer_name(from._internal_computer_name());
  }
  if (from._internal_has_version()) {
    _this->_internal_mutable_version()->::proto::Version::MergeFrom(
        from._internal_version());
  }
  if (from._internal_session_types() != 0) {
    _this->_internal_set_session_types(from._internal_session_types());
  }
  if (from._internal_cpu_cores() != 0) {
    _this->_internal_set_cpu_cores(from._internal_cpu_cores());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SessionChallenge::CopyFrom(const SessionChallenge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SessionChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionChallenge::IsInitialized() const {
  return true;
}

void SessionChallenge::InternalSwap(SessionChallenge* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.os_name_, lhs_arena,
      &other->_impl_.os_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.computer_name_, lhs_arena,
      &other->_impl_.computer_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SessionChallenge, _impl_.cpu_cores_)
      + sizeof(SessionChallenge::_impl_.cpu_cores_)
      - PROTOBUF_FIELD_OFFSET(SessionChallenge, _impl_.version_)>(
          reinterpret_cast<char*>(&_impl_.version_),
          reinterpret_cast<char*>(&other->_impl_.version_));
}

std::string SessionChallenge::GetTypeName() const {
  return "proto.SessionChallenge";
}


// ===================================================================

class SessionResponse::_Internal {
 public:
  static const ::proto::Version& version(const SessionResponse* msg);
};

const ::proto::Version&
SessionResponse::_Internal::version(const SessionResponse* msg) {
  return *msg->_impl_.version_;
}
void SessionResponse::clear_version() {
  if (GetArenaForAllocation() == nullptr && _impl_.version_ != nullptr) {
    delete _impl_.version_;
  }
  _impl_.version_ = nullptr;
}
SessionResponse::SessionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.SessionResponse)
}
SessionResponse::SessionResponse(const SessionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SessionResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.os_name_){}
    , decltype(_impl_.computer_name_){}
    , decltype(_impl_.version_){nullptr}
    , decltype(_impl_.session_type_){}
    , decltype(_impl_.cpu_cores_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.os_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.os_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_os_name().empty()) {
    _this->_impl_.os_name_.Set(from._internal_os_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.computer_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.computer_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_computer_name().empty()) {
    _this->_impl_.computer_name_.Set(from._internal_computer_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_version()) {
    _this->_impl_.version_ = new ::proto::Version(*from._impl_.version_);
  }
  ::memcpy(&_impl_.session_type_, &from._impl_.session_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cpu_cores_) -
    reinterpret_cast<char*>(&_impl_.session_type_)) + sizeof(_impl_.cpu_cores_));
  // @@protoc_insertion_point(copy_constructor:proto.SessionResponse)
}

inline void SessionResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.os_name_){}
    , decltype(_impl_.computer_name_){}
    , decltype(_impl_.version_){nullptr}
    , decltype(_impl_.session_type_){0u}
    , decltype(_impl_.cpu_cores_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.os_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.os_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.computer_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.computer_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SessionResponse::~SessionResponse() {
  // @@protoc_insertion_point(destructor:proto.SessionResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SessionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.os_name_.Destroy();
  _impl_.computer_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.version_;
}

void SessionResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SessionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SessionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.os_name_.ClearToEmpty();
  _impl_.computer_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.version_ != nullptr) {
    delete _impl_.version_;
  }
  _impl_.version_ = nullptr;
  ::memset(&_impl_.session_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.cpu_cores_) -
      reinterpret_cast<char*>(&_impl_.session_type_)) + sizeof(_impl_.cpu_cores_));
  _internal_metadata_.Clear<std::string>();
}

const char* SessionResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.Version version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_version(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 session_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.session_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 cpu_cores = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.cpu_cores_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string os_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_os_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // string computer_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_computer_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SessionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.SessionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.Version version = 1;
  if (this->_internal_has_version()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::version(this),
        _Internal::version(this).GetCachedSize(), target, stream);
  }

  // uint32 session_type = 2;
  if (this->_internal_session_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_session_type(), target);
  }

  // uint32 cpu_cores = 3;
  if (this->_internal_cpu_cores() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_cpu_cores(), target);
  }

  // string os_name = 4;
  if (!this->_internal_os_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_os_name().data(), static_cast<int>(this->_internal_os_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.SessionResponse.os_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_os_name(), target);
  }

  // string computer_name = 5;
  if (!this->_internal_computer_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_computer_name().data(), static_cast<int>(this->_internal_computer_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.SessionResponse.computer_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_computer_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SessionResponse)
  return target;
}

size_t SessionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SessionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string os_name = 4;
  if (!this->_internal_os_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_os_name());
  }

  // string computer_name = 5;
  if (!this->_internal_computer_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_computer_name());
  }

  // .proto.Version version = 1;
  if (this->_internal_has_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.version_);
  }

  // uint32 session_type = 2;
  if (this->_internal_session_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_session_type());
  }

  // uint32 cpu_cores = 3;
  if (this->_internal_cpu_cores() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cpu_cores());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SessionResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SessionResponse*>(
      &from));
}

void SessionResponse::MergeFrom(const SessionResponse& from) {
  SessionResponse* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.SessionResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_os_name().empty()) {
    _this->_internal_set_os_name(from._internal_os_name());
  }
  if (!from._internal_computer_name().empty()) {
    _this->_internal_set_computer_name(from._internal_computer_name());
  }
  if (from._internal_has_version()) {
    _this->_internal_mutable_version()->::proto::Version::MergeFrom(
        from._internal_version());
  }
  if (from._internal_session_type() != 0) {
    _this->_internal_set_session_type(from._internal_session_type());
  }
  if (from._internal_cpu_cores() != 0) {
    _this->_internal_set_cpu_cores(from._internal_cpu_cores());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SessionResponse::CopyFrom(const SessionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionResponse::IsInitialized() const {
  return true;
}

void SessionResponse::InternalSwap(SessionResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.os_name_, lhs_arena,
      &other->_impl_.os_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.computer_name_, lhs_arena,
      &other->_impl_.computer_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SessionResponse, _impl_.cpu_cores_)
      + sizeof(SessionResponse::_impl_.cpu_cores_)
      - PROTOBUF_FIELD_OFFSET(SessionResponse, _impl_.version_)>(
          reinterpret_cast<char*>(&_impl_.version_),
          reinterpret_cast<char*>(&other->_impl_.version_));
}

std::string SessionResponse::GetTypeName() const {
  return "proto.SessionResponse";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::ClientHello*
Arena::CreateMaybeMessage< ::proto::ClientHello >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ClientHello >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ServerHello*
Arena::CreateMaybeMessage< ::proto::ServerHello >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ServerHello >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::SrpIdentify*
Arena::CreateMaybeMessage< ::proto::SrpIdentify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::SrpIdentify >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::SrpServerKeyExchange*
Arena::CreateMaybeMessage< ::proto::SrpServerKeyExchange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::SrpServerKeyExchange >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::SrpClientKeyExchange*
Arena::CreateMaybeMessage< ::proto::SrpClientKeyExchange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::SrpClientKeyExchange >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::SessionChallenge*
Arena::CreateMaybeMessage< ::proto::SessionChallenge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::SessionChallenge >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::SessionResponse*
Arena::CreateMaybeMessage< ::proto::SessionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::SessionResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
