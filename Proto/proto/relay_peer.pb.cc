// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: relay_peer.proto

#include "relay_peer.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace proto {
PROTOBUF_CONSTEXPR PeerToRelay_Secret::PeerToRelay_Secret(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.random_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.client_address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.client_user_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.host_address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.host_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PeerToRelay_SecretDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PeerToRelay_SecretDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PeerToRelay_SecretDefaultTypeInternal() {}
  union {
    PeerToRelay_Secret _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PeerToRelay_SecretDefaultTypeInternal _PeerToRelay_Secret_default_instance_;
PROTOBUF_CONSTEXPR PeerToRelay::PeerToRelay(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.public_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.key_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PeerToRelayDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PeerToRelayDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PeerToRelayDefaultTypeInternal() {}
  union {
    PeerToRelay _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PeerToRelayDefaultTypeInternal _PeerToRelay_default_instance_;
}  // namespace proto
namespace proto {

// ===================================================================

class PeerToRelay_Secret::_Internal {
 public:
};

PeerToRelay_Secret::PeerToRelay_Secret(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.PeerToRelay.Secret)
}
PeerToRelay_Secret::PeerToRelay_Secret(const PeerToRelay_Secret& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  PeerToRelay_Secret* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.random_data_){}
    , decltype(_impl_.client_address_){}
    , decltype(_impl_.client_user_name_){}
    , decltype(_impl_.host_address_){}
    , decltype(_impl_.host_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.random_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.random_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_random_data().empty()) {
    _this->_impl_.random_data_.Set(from._internal_random_data(), 
      _this->GetArenaForAllocation());
  }
  _impl_.client_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client_address().empty()) {
    _this->_impl_.client_address_.Set(from._internal_client_address(), 
      _this->GetArenaForAllocation());
  }
  _impl_.client_user_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_user_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client_user_name().empty()) {
    _this->_impl_.client_user_name_.Set(from._internal_client_user_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.host_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_host_address().empty()) {
    _this->_impl_.host_address_.Set(from._internal_host_address(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.host_id_ = from._impl_.host_id_;
  // @@protoc_insertion_point(copy_constructor:proto.PeerToRelay.Secret)
}

inline void PeerToRelay_Secret::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.random_data_){}
    , decltype(_impl_.client_address_){}
    , decltype(_impl_.client_user_name_){}
    , decltype(_impl_.host_address_){}
    , decltype(_impl_.host_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.random_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.random_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.client_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.client_user_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_user_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.host_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PeerToRelay_Secret::~PeerToRelay_Secret() {
  // @@protoc_insertion_point(destructor:proto.PeerToRelay.Secret)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PeerToRelay_Secret::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.random_data_.Destroy();
  _impl_.client_address_.Destroy();
  _impl_.client_user_name_.Destroy();
  _impl_.host_address_.Destroy();
}

void PeerToRelay_Secret::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PeerToRelay_Secret::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PeerToRelay.Secret)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.random_data_.ClearToEmpty();
  _impl_.client_address_.ClearToEmpty();
  _impl_.client_user_name_.ClearToEmpty();
  _impl_.host_address_.ClearToEmpty();
  _impl_.host_id_ = uint64_t{0u};
  _internal_metadata_.Clear<std::string>();
}

const char* PeerToRelay_Secret::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes random_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_random_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string client_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_client_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // string client_user_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_client_user_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // string host_address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_host_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // fixed64 host_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.host_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PeerToRelay_Secret::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.PeerToRelay.Secret)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes random_data = 1;
  if (!this->_internal_random_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_random_data(), target);
  }

  // string client_address = 2;
  if (!this->_internal_client_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_address().data(), static_cast<int>(this->_internal_client_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.PeerToRelay.Secret.client_address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_client_address(), target);
  }

  // string client_user_name = 3;
  if (!this->_internal_client_user_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_user_name().data(), static_cast<int>(this->_internal_client_user_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.PeerToRelay.Secret.client_user_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_client_user_name(), target);
  }

  // string host_address = 4;
  if (!this->_internal_host_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host_address().data(), static_cast<int>(this->_internal_host_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.PeerToRelay.Secret.host_address");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_host_address(), target);
  }

  // fixed64 host_id = 5;
  if (this->_internal_host_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(5, this->_internal_host_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.PeerToRelay.Secret)
  return target;
}

size_t PeerToRelay_Secret::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PeerToRelay.Secret)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes random_data = 1;
  if (!this->_internal_random_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_random_data());
  }

  // string client_address = 2;
  if (!this->_internal_client_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_address());
  }

  // string client_user_name = 3;
  if (!this->_internal_client_user_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_user_name());
  }

  // string host_address = 4;
  if (!this->_internal_host_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host_address());
  }

  // fixed64 host_id = 5;
  if (this->_internal_host_id() != 0) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeerToRelay_Secret::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PeerToRelay_Secret*>(
      &from));
}

void PeerToRelay_Secret::MergeFrom(const PeerToRelay_Secret& from) {
  PeerToRelay_Secret* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.PeerToRelay.Secret)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_random_data().empty()) {
    _this->_internal_set_random_data(from._internal_random_data());
  }
  if (!from._internal_client_address().empty()) {
    _this->_internal_set_client_address(from._internal_client_address());
  }
  if (!from._internal_client_user_name().empty()) {
    _this->_internal_set_client_user_name(from._internal_client_user_name());
  }
  if (!from._internal_host_address().empty()) {
    _this->_internal_set_host_address(from._internal_host_address());
  }
  if (from._internal_host_id() != 0) {
    _this->_internal_set_host_id(from._internal_host_id());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PeerToRelay_Secret::CopyFrom(const PeerToRelay_Secret& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PeerToRelay.Secret)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerToRelay_Secret::IsInitialized() const {
  return true;
}

void PeerToRelay_Secret::InternalSwap(PeerToRelay_Secret* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.random_data_, lhs_arena,
      &other->_impl_.random_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.client_address_, lhs_arena,
      &other->_impl_.client_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.client_user_name_, lhs_arena,
      &other->_impl_.client_user_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.host_address_, lhs_arena,
      &other->_impl_.host_address_, rhs_arena
  );
  swap(_impl_.host_id_, other->_impl_.host_id_);
}

std::string PeerToRelay_Secret::GetTypeName() const {
  return "proto.PeerToRelay.Secret";
}


// ===================================================================

class PeerToRelay::_Internal {
 public:
};

PeerToRelay::PeerToRelay(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.PeerToRelay)
}
PeerToRelay::PeerToRelay(const PeerToRelay& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  PeerToRelay* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.public_key_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.key_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.public_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.public_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_public_key().empty()) {
    _this->_impl_.public_key_.Set(from._internal_public_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.key_id_ = from._impl_.key_id_;
  // @@protoc_insertion_point(copy_constructor:proto.PeerToRelay)
}

inline void PeerToRelay::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.public_key_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.key_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.public_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.public_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PeerToRelay::~PeerToRelay() {
  // @@protoc_insertion_point(destructor:proto.PeerToRelay)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PeerToRelay::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.public_key_.Destroy();
  _impl_.data_.Destroy();
}

void PeerToRelay::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PeerToRelay::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PeerToRelay)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.public_key_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  _impl_.key_id_ = 0u;
  _internal_metadata_.Clear<std::string>();
}

const char* PeerToRelay::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 key_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.key_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes public_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_public_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PeerToRelay::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.PeerToRelay)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 key_id = 1;
  if (this->_internal_key_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_key_id(), target);
  }

  // bytes public_key = 2;
  if (!this->_internal_public_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_public_key(), target);
  }

  // bytes data = 3;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.PeerToRelay)
  return target;
}

size_t PeerToRelay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PeerToRelay)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes public_key = 2;
  if (!this->_internal_public_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_public_key());
  }

  // bytes data = 3;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // uint32 key_id = 1;
  if (this->_internal_key_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_key_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeerToRelay::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PeerToRelay*>(
      &from));
}

void PeerToRelay::MergeFrom(const PeerToRelay& from) {
  PeerToRelay* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.PeerToRelay)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_public_key().empty()) {
    _this->_internal_set_public_key(from._internal_public_key());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_key_id() != 0) {
    _this->_internal_set_key_id(from._internal_key_id());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PeerToRelay::CopyFrom(const PeerToRelay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PeerToRelay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerToRelay::IsInitialized() const {
  return true;
}

void PeerToRelay::InternalSwap(PeerToRelay* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.public_key_, lhs_arena,
      &other->_impl_.public_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  swap(_impl_.key_id_, other->_impl_.key_id_);
}

std::string PeerToRelay::GetTypeName() const {
  return "proto.PeerToRelay";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::PeerToRelay_Secret*
Arena::CreateMaybeMessage< ::proto::PeerToRelay_Secret >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::PeerToRelay_Secret >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::PeerToRelay*
Arena::CreateMaybeMessage< ::proto::PeerToRelay >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::PeerToRelay >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
