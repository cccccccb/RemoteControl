// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_common_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2eproto {
  static const uint32_t offsets[];
};
namespace proto {
class DirectConnectionOffer;
struct DirectConnectionOfferDefaultTypeInternal;
extern DirectConnectionOfferDefaultTypeInternal _DirectConnectionOffer_default_instance_;
class Service_ClientToHost;
struct Service_ClientToHostDefaultTypeInternal;
extern Service_ClientToHostDefaultTypeInternal _Service_ClientToHost_default_instance_;
class Version;
struct VersionDefaultTypeInternal;
extern VersionDefaultTypeInternal _Version_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::DirectConnectionOffer* Arena::CreateMaybeMessage<::proto::DirectConnectionOffer>(Arena*);
template<> ::proto::Service_ClientToHost* Arena::CreateMaybeMessage<::proto::Service_ClientToHost>(Arena*);
template<> ::proto::Version* Arena::CreateMaybeMessage<::proto::Version>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

enum HostChannelId : int {
  HOST_CHANNEL_ID_SESSION = 0,
  HOST_CHANNEL_ID_SERVICE = 1,
  HostChannelId_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  HostChannelId_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool HostChannelId_IsValid(int value);
constexpr HostChannelId HostChannelId_MIN = HOST_CHANNEL_ID_SESSION;
constexpr HostChannelId HostChannelId_MAX = HOST_CHANNEL_ID_SERVICE;
constexpr int HostChannelId_ARRAYSIZE = HostChannelId_MAX + 1;

const std::string& HostChannelId_Name(HostChannelId value);
template<typename T>
inline const std::string& HostChannelId_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HostChannelId>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HostChannelId_Name.");
  return HostChannelId_Name(static_cast<HostChannelId>(enum_t_value));
}
bool HostChannelId_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, HostChannelId* value);
enum SessionType : int {
  SESSION_TYPE_UNKNOWN = 0,
  SESSION_TYPE_DESKTOP_MANAGE = 1,
  SESSION_TYPE_DESKTOP_VIEW = 2,
  SESSION_TYPE_DESKTOP_CONTROL = 4,
  SESSION_TYPE_ALL = 7,
  SessionType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SessionType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SessionType_IsValid(int value);
constexpr SessionType SessionType_MIN = SESSION_TYPE_UNKNOWN;
constexpr SessionType SessionType_MAX = SESSION_TYPE_ALL;
constexpr int SessionType_ARRAYSIZE = SessionType_MAX + 1;

const std::string& SessionType_Name(SessionType value);
template<typename T>
inline const std::string& SessionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SessionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SessionType_Name.");
  return SessionType_Name(static_cast<SessionType>(enum_t_value));
}
bool SessionType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SessionType* value);
// ===================================================================

class Version final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:proto.Version) */ {
 public:
  inline Version() : Version(nullptr) {}
  ~Version() override;
  explicit PROTOBUF_CONSTEXPR Version(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Version(const Version& from);
  Version(Version&& from) noexcept
    : Version() {
    *this = ::std::move(from);
  }

  inline Version& operator=(const Version& from) {
    CopyFrom(from);
    return *this;
  }
  inline Version& operator=(Version&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Version& default_instance() {
    return *internal_default_instance();
  }
  static inline const Version* internal_default_instance() {
    return reinterpret_cast<const Version*>(
               &_Version_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Version& a, Version& b) {
    a.Swap(&b);
  }
  inline void Swap(Version* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Version* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Version* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Version>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Version& from);
  void MergeFrom(const Version& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Version* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Version";
  }
  protected:
  explicit Version(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMajorFieldNumber = 1,
    kMinorFieldNumber = 2,
    kPatchFieldNumber = 3,
    kRevisionFieldNumber = 4,
  };
  // uint32 major = 1;
  void clear_major();
  uint32_t major() const;
  void set_major(uint32_t value);
  private:
  uint32_t _internal_major() const;
  void _internal_set_major(uint32_t value);
  public:

  // uint32 minor = 2;
  void clear_minor();
  uint32_t minor() const;
  void set_minor(uint32_t value);
  private:
  uint32_t _internal_minor() const;
  void _internal_set_minor(uint32_t value);
  public:

  // uint32 patch = 3;
  void clear_patch();
  uint32_t patch() const;
  void set_patch(uint32_t value);
  private:
  uint32_t _internal_patch() const;
  void _internal_set_patch(uint32_t value);
  public:

  // uint32 revision = 4;
  void clear_revision();
  uint32_t revision() const;
  void set_revision(uint32_t value);
  private:
  uint32_t _internal_revision() const;
  void _internal_set_revision(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto.Version)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t major_;
    uint32_t minor_;
    uint32_t patch_;
    uint32_t revision_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class DirectConnectionOffer final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:proto.DirectConnectionOffer) */ {
 public:
  inline DirectConnectionOffer() : DirectConnectionOffer(nullptr) {}
  ~DirectConnectionOffer() override;
  explicit PROTOBUF_CONSTEXPR DirectConnectionOffer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DirectConnectionOffer(const DirectConnectionOffer& from);
  DirectConnectionOffer(DirectConnectionOffer&& from) noexcept
    : DirectConnectionOffer() {
    *this = ::std::move(from);
  }

  inline DirectConnectionOffer& operator=(const DirectConnectionOffer& from) {
    CopyFrom(from);
    return *this;
  }
  inline DirectConnectionOffer& operator=(DirectConnectionOffer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const DirectConnectionOffer& default_instance() {
    return *internal_default_instance();
  }
  static inline const DirectConnectionOffer* internal_default_instance() {
    return reinterpret_cast<const DirectConnectionOffer*>(
               &_DirectConnectionOffer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DirectConnectionOffer& a, DirectConnectionOffer& b) {
    a.Swap(&b);
  }
  inline void Swap(DirectConnectionOffer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DirectConnectionOffer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DirectConnectionOffer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DirectConnectionOffer>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const DirectConnectionOffer& from);
  void MergeFrom(const DirectConnectionOffer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DirectConnectionOffer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.DirectConnectionOffer";
  }
  protected:
  explicit DirectConnectionOffer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostFieldNumber = 2,
    kConvFieldNumber = 1,
    kPortFieldNumber = 3,
  };
  // string host = 2;
  void clear_host();
  const std::string& host() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_host(ArgT0&& arg0, ArgT... args);
  std::string* mutable_host();
  PROTOBUF_NODISCARD std::string* release_host();
  void set_allocated_host(std::string* host);
  private:
  const std::string& _internal_host() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_host(const std::string& value);
  std::string* _internal_mutable_host();
  public:

  // uint32 conv = 1;
  void clear_conv();
  uint32_t conv() const;
  void set_conv(uint32_t value);
  private:
  uint32_t _internal_conv() const;
  void _internal_set_conv(uint32_t value);
  public:

  // uint32 port = 3;
  void clear_port();
  uint32_t port() const;
  void set_port(uint32_t value);
  private:
  uint32_t _internal_port() const;
  void _internal_set_port(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto.DirectConnectionOffer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_;
    uint32_t conv_;
    uint32_t port_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Service_ClientToHost final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:proto.Service_ClientToHost) */ {
 public:
  inline Service_ClientToHost() : Service_ClientToHost(nullptr) {}
  ~Service_ClientToHost() override;
  explicit PROTOBUF_CONSTEXPR Service_ClientToHost(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Service_ClientToHost(const Service_ClientToHost& from);
  Service_ClientToHost(Service_ClientToHost&& from) noexcept
    : Service_ClientToHost() {
    *this = ::std::move(from);
  }

  inline Service_ClientToHost& operator=(const Service_ClientToHost& from) {
    CopyFrom(from);
    return *this;
  }
  inline Service_ClientToHost& operator=(Service_ClientToHost&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Service_ClientToHost& default_instance() {
    return *internal_default_instance();
  }
  static inline const Service_ClientToHost* internal_default_instance() {
    return reinterpret_cast<const Service_ClientToHost*>(
               &_Service_ClientToHost_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Service_ClientToHost& a, Service_ClientToHost& b) {
    a.Swap(&b);
  }
  inline void Swap(Service_ClientToHost* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Service_ClientToHost* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Service_ClientToHost* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Service_ClientToHost>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Service_ClientToHost& from);
  void MergeFrom(const Service_ClientToHost& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Service_ClientToHost* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Service_ClientToHost";
  }
  protected:
  explicit Service_ClientToHost(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDirectConnectionOfferFieldNumber = 1,
  };
  // .proto.DirectConnectionOffer direct_connection_offer = 1;
  bool has_direct_connection_offer() const;
  private:
  bool _internal_has_direct_connection_offer() const;
  public:
  void clear_direct_connection_offer();
  const ::proto::DirectConnectionOffer& direct_connection_offer() const;
  PROTOBUF_NODISCARD ::proto::DirectConnectionOffer* release_direct_connection_offer();
  ::proto::DirectConnectionOffer* mutable_direct_connection_offer();
  void set_allocated_direct_connection_offer(::proto::DirectConnectionOffer* direct_connection_offer);
  private:
  const ::proto::DirectConnectionOffer& _internal_direct_connection_offer() const;
  ::proto::DirectConnectionOffer* _internal_mutable_direct_connection_offer();
  public:
  void unsafe_arena_set_allocated_direct_connection_offer(
      ::proto::DirectConnectionOffer* direct_connection_offer);
  ::proto::DirectConnectionOffer* unsafe_arena_release_direct_connection_offer();

  // @@protoc_insertion_point(class_scope:proto.Service_ClientToHost)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::DirectConnectionOffer* direct_connection_offer_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Version

// uint32 major = 1;
inline void Version::clear_major() {
  _impl_.major_ = 0u;
}
inline uint32_t Version::_internal_major() const {
  return _impl_.major_;
}
inline uint32_t Version::major() const {
  // @@protoc_insertion_point(field_get:proto.Version.major)
  return _internal_major();
}
inline void Version::_internal_set_major(uint32_t value) {
  
  _impl_.major_ = value;
}
inline void Version::set_major(uint32_t value) {
  _internal_set_major(value);
  // @@protoc_insertion_point(field_set:proto.Version.major)
}

// uint32 minor = 2;
inline void Version::clear_minor() {
  _impl_.minor_ = 0u;
}
inline uint32_t Version::_internal_minor() const {
  return _impl_.minor_;
}
inline uint32_t Version::minor() const {
  // @@protoc_insertion_point(field_get:proto.Version.minor)
  return _internal_minor();
}
inline void Version::_internal_set_minor(uint32_t value) {
  
  _impl_.minor_ = value;
}
inline void Version::set_minor(uint32_t value) {
  _internal_set_minor(value);
  // @@protoc_insertion_point(field_set:proto.Version.minor)
}

// uint32 patch = 3;
inline void Version::clear_patch() {
  _impl_.patch_ = 0u;
}
inline uint32_t Version::_internal_patch() const {
  return _impl_.patch_;
}
inline uint32_t Version::patch() const {
  // @@protoc_insertion_point(field_get:proto.Version.patch)
  return _internal_patch();
}
inline void Version::_internal_set_patch(uint32_t value) {
  
  _impl_.patch_ = value;
}
inline void Version::set_patch(uint32_t value) {
  _internal_set_patch(value);
  // @@protoc_insertion_point(field_set:proto.Version.patch)
}

// uint32 revision = 4;
inline void Version::clear_revision() {
  _impl_.revision_ = 0u;
}
inline uint32_t Version::_internal_revision() const {
  return _impl_.revision_;
}
inline uint32_t Version::revision() const {
  // @@protoc_insertion_point(field_get:proto.Version.revision)
  return _internal_revision();
}
inline void Version::_internal_set_revision(uint32_t value) {
  
  _impl_.revision_ = value;
}
inline void Version::set_revision(uint32_t value) {
  _internal_set_revision(value);
  // @@protoc_insertion_point(field_set:proto.Version.revision)
}

// -------------------------------------------------------------------

// DirectConnectionOffer

// uint32 conv = 1;
inline void DirectConnectionOffer::clear_conv() {
  _impl_.conv_ = 0u;
}
inline uint32_t DirectConnectionOffer::_internal_conv() const {
  return _impl_.conv_;
}
inline uint32_t DirectConnectionOffer::conv() const {
  // @@protoc_insertion_point(field_get:proto.DirectConnectionOffer.conv)
  return _internal_conv();
}
inline void DirectConnectionOffer::_internal_set_conv(uint32_t value) {
  
  _impl_.conv_ = value;
}
inline void DirectConnectionOffer::set_conv(uint32_t value) {
  _internal_set_conv(value);
  // @@protoc_insertion_point(field_set:proto.DirectConnectionOffer.conv)
}

// string host = 2;
inline void DirectConnectionOffer::clear_host() {
  _impl_.host_.ClearToEmpty();
}
inline const std::string& DirectConnectionOffer::host() const {
  // @@protoc_insertion_point(field_get:proto.DirectConnectionOffer.host)
  return _internal_host();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DirectConnectionOffer::set_host(ArgT0&& arg0, ArgT... args) {
 
 _impl_.host_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.DirectConnectionOffer.host)
}
inline std::string* DirectConnectionOffer::mutable_host() {
  std::string* _s = _internal_mutable_host();
  // @@protoc_insertion_point(field_mutable:proto.DirectConnectionOffer.host)
  return _s;
}
inline const std::string& DirectConnectionOffer::_internal_host() const {
  return _impl_.host_.Get();
}
inline void DirectConnectionOffer::_internal_set_host(const std::string& value) {
  
  _impl_.host_.Set(value, GetArenaForAllocation());
}
inline std::string* DirectConnectionOffer::_internal_mutable_host() {
  
  return _impl_.host_.Mutable(GetArenaForAllocation());
}
inline std::string* DirectConnectionOffer::release_host() {
  // @@protoc_insertion_point(field_release:proto.DirectConnectionOffer.host)
  return _impl_.host_.Release();
}
inline void DirectConnectionOffer::set_allocated_host(std::string* host) {
  if (host != nullptr) {
    
  } else {
    
  }
  _impl_.host_.SetAllocated(host, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.host_.IsDefault()) {
    _impl_.host_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.DirectConnectionOffer.host)
}

// uint32 port = 3;
inline void DirectConnectionOffer::clear_port() {
  _impl_.port_ = 0u;
}
inline uint32_t DirectConnectionOffer::_internal_port() const {
  return _impl_.port_;
}
inline uint32_t DirectConnectionOffer::port() const {
  // @@protoc_insertion_point(field_get:proto.DirectConnectionOffer.port)
  return _internal_port();
}
inline void DirectConnectionOffer::_internal_set_port(uint32_t value) {
  
  _impl_.port_ = value;
}
inline void DirectConnectionOffer::set_port(uint32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:proto.DirectConnectionOffer.port)
}

// -------------------------------------------------------------------

// Service_ClientToHost

// .proto.DirectConnectionOffer direct_connection_offer = 1;
inline bool Service_ClientToHost::_internal_has_direct_connection_offer() const {
  return this != internal_default_instance() && _impl_.direct_connection_offer_ != nullptr;
}
inline bool Service_ClientToHost::has_direct_connection_offer() const {
  return _internal_has_direct_connection_offer();
}
inline void Service_ClientToHost::clear_direct_connection_offer() {
  if (GetArenaForAllocation() == nullptr && _impl_.direct_connection_offer_ != nullptr) {
    delete _impl_.direct_connection_offer_;
  }
  _impl_.direct_connection_offer_ = nullptr;
}
inline const ::proto::DirectConnectionOffer& Service_ClientToHost::_internal_direct_connection_offer() const {
  const ::proto::DirectConnectionOffer* p = _impl_.direct_connection_offer_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::DirectConnectionOffer&>(
      ::proto::_DirectConnectionOffer_default_instance_);
}
inline const ::proto::DirectConnectionOffer& Service_ClientToHost::direct_connection_offer() const {
  // @@protoc_insertion_point(field_get:proto.Service_ClientToHost.direct_connection_offer)
  return _internal_direct_connection_offer();
}
inline void Service_ClientToHost::unsafe_arena_set_allocated_direct_connection_offer(
    ::proto::DirectConnectionOffer* direct_connection_offer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.direct_connection_offer_);
  }
  _impl_.direct_connection_offer_ = direct_connection_offer;
  if (direct_connection_offer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Service_ClientToHost.direct_connection_offer)
}
inline ::proto::DirectConnectionOffer* Service_ClientToHost::release_direct_connection_offer() {
  
  ::proto::DirectConnectionOffer* temp = _impl_.direct_connection_offer_;
  _impl_.direct_connection_offer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::DirectConnectionOffer* Service_ClientToHost::unsafe_arena_release_direct_connection_offer() {
  // @@protoc_insertion_point(field_release:proto.Service_ClientToHost.direct_connection_offer)
  
  ::proto::DirectConnectionOffer* temp = _impl_.direct_connection_offer_;
  _impl_.direct_connection_offer_ = nullptr;
  return temp;
}
inline ::proto::DirectConnectionOffer* Service_ClientToHost::_internal_mutable_direct_connection_offer() {
  
  if (_impl_.direct_connection_offer_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::DirectConnectionOffer>(GetArenaForAllocation());
    _impl_.direct_connection_offer_ = p;
  }
  return _impl_.direct_connection_offer_;
}
inline ::proto::DirectConnectionOffer* Service_ClientToHost::mutable_direct_connection_offer() {
  ::proto::DirectConnectionOffer* _msg = _internal_mutable_direct_connection_offer();
  // @@protoc_insertion_point(field_mutable:proto.Service_ClientToHost.direct_connection_offer)
  return _msg;
}
inline void Service_ClientToHost::set_allocated_direct_connection_offer(::proto::DirectConnectionOffer* direct_connection_offer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.direct_connection_offer_;
  }
  if (direct_connection_offer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(direct_connection_offer);
    if (message_arena != submessage_arena) {
      direct_connection_offer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, direct_connection_offer, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.direct_connection_offer_ = direct_connection_offer;
  // @@protoc_insertion_point(field_set_allocated:proto.Service_ClientToHost.direct_connection_offer)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::proto::HostChannelId> : ::std::true_type {};
template <> struct is_proto_enum< ::proto::SessionType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_common_2eproto
