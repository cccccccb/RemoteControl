// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: router_relay.proto

#include "router_relay.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace proto {
PROTOBUF_CONSTEXPR RelayKeyPool::RelayKeyPool(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/{}
  , /*decltype(_impl_.peer_host_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.peer_port_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RelayKeyPoolDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RelayKeyPoolDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RelayKeyPoolDefaultTypeInternal() {}
  union {
    RelayKeyPool _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RelayKeyPoolDefaultTypeInternal _RelayKeyPool_default_instance_;
PROTOBUF_CONSTEXPR RelayKeyUsed::RelayKeyUsed(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RelayKeyUsedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RelayKeyUsedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RelayKeyUsedDefaultTypeInternal() {}
  union {
    RelayKeyUsed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RelayKeyUsedDefaultTypeInternal _RelayKeyUsed_default_instance_;
PROTOBUF_CONSTEXPR RelayStat::RelayStat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.peer_connection_)*/{}
  , /*decltype(_impl_.uptime_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RelayStatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RelayStatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RelayStatDefaultTypeInternal() {}
  union {
    RelayStat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RelayStatDefaultTypeInternal _RelayStat_default_instance_;
PROTOBUF_CONSTEXPR RelayToRouter::RelayToRouter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_pool_)*/nullptr
  , /*decltype(_impl_.relay_stat_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RelayToRouterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RelayToRouterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RelayToRouterDefaultTypeInternal() {}
  union {
    RelayToRouter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RelayToRouterDefaultTypeInternal _RelayToRouter_default_instance_;
PROTOBUF_CONSTEXPR RouterToRelay::RouterToRelay(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_used_)*/nullptr
  , /*decltype(_impl_.peer_connection_request_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RouterToRelayDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RouterToRelayDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RouterToRelayDefaultTypeInternal() {}
  union {
    RouterToRelay _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RouterToRelayDefaultTypeInternal _RouterToRelay_default_instance_;
}  // namespace proto
namespace proto {

// ===================================================================

class RelayKeyPool::_Internal {
 public:
};

void RelayKeyPool::clear_key() {
  _impl_.key_.Clear();
}
RelayKeyPool::RelayKeyPool(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.RelayKeyPool)
}
RelayKeyPool::RelayKeyPool(const RelayKeyPool& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  RelayKeyPool* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){from._impl_.key_}
    , decltype(_impl_.peer_host_){}
    , decltype(_impl_.peer_port_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.peer_host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.peer_host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_peer_host().empty()) {
    _this->_impl_.peer_host_.Set(from._internal_peer_host(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.peer_port_ = from._impl_.peer_port_;
  // @@protoc_insertion_point(copy_constructor:proto.RelayKeyPool)
}

inline void RelayKeyPool::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){arena}
    , decltype(_impl_.peer_host_){}
    , decltype(_impl_.peer_port_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.peer_host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.peer_host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RelayKeyPool::~RelayKeyPool() {
  // @@protoc_insertion_point(destructor:proto.RelayKeyPool)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RelayKeyPool::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.~RepeatedPtrField();
  _impl_.peer_host_.Destroy();
}

void RelayKeyPool::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RelayKeyPool::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.RelayKeyPool)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.Clear();
  _impl_.peer_host_.ClearToEmpty();
  _impl_.peer_port_ = 0u;
  _internal_metadata_.Clear<std::string>();
}

const char* RelayKeyPool::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string peer_host = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_peer_host();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 peer_port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.peer_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.RelayKey key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_key(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RelayKeyPool::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.RelayKeyPool)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string peer_host = 1;
  if (!this->_internal_peer_host().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_peer_host().data(), static_cast<int>(this->_internal_peer_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.RelayKeyPool.peer_host");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_peer_host(), target);
  }

  // uint32 peer_port = 2;
  if (this->_internal_peer_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_peer_port(), target);
  }

  // repeated .proto.RelayKey key = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_key_size()); i < n; i++) {
    const auto& repfield = this->_internal_key(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.RelayKeyPool)
  return target;
}

size_t RelayKeyPool::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.RelayKeyPool)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.RelayKey key = 3;
  total_size += 1UL * this->_internal_key_size();
  for (const auto& msg : this->_impl_.key_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string peer_host = 1;
  if (!this->_internal_peer_host().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_peer_host());
  }

  // uint32 peer_port = 2;
  if (this->_internal_peer_port() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_peer_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RelayKeyPool::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RelayKeyPool*>(
      &from));
}

void RelayKeyPool::MergeFrom(const RelayKeyPool& from) {
  RelayKeyPool* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.RelayKeyPool)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.key_.MergeFrom(from._impl_.key_);
  if (!from._internal_peer_host().empty()) {
    _this->_internal_set_peer_host(from._internal_peer_host());
  }
  if (from._internal_peer_port() != 0) {
    _this->_internal_set_peer_port(from._internal_peer_port());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RelayKeyPool::CopyFrom(const RelayKeyPool& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.RelayKeyPool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelayKeyPool::IsInitialized() const {
  return true;
}

void RelayKeyPool::InternalSwap(RelayKeyPool* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.key_.InternalSwap(&other->_impl_.key_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.peer_host_, lhs_arena,
      &other->_impl_.peer_host_, rhs_arena
  );
  swap(_impl_.peer_port_, other->_impl_.peer_port_);
}

std::string RelayKeyPool::GetTypeName() const {
  return "proto.RelayKeyPool";
}


// ===================================================================

class RelayKeyUsed::_Internal {
 public:
};

RelayKeyUsed::RelayKeyUsed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.RelayKeyUsed)
}
RelayKeyUsed::RelayKeyUsed(const RelayKeyUsed& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  RelayKeyUsed* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _this->_impl_.key_id_ = from._impl_.key_id_;
  // @@protoc_insertion_point(copy_constructor:proto.RelayKeyUsed)
}

inline void RelayKeyUsed::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RelayKeyUsed::~RelayKeyUsed() {
  // @@protoc_insertion_point(destructor:proto.RelayKeyUsed)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RelayKeyUsed::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RelayKeyUsed::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RelayKeyUsed::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.RelayKeyUsed)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_id_ = 0u;
  _internal_metadata_.Clear<std::string>();
}

const char* RelayKeyUsed::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 key_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.key_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RelayKeyUsed::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.RelayKeyUsed)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 key_id = 1;
  if (this->_internal_key_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_key_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.RelayKeyUsed)
  return target;
}

size_t RelayKeyUsed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.RelayKeyUsed)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 key_id = 1;
  if (this->_internal_key_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_key_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RelayKeyUsed::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RelayKeyUsed*>(
      &from));
}

void RelayKeyUsed::MergeFrom(const RelayKeyUsed& from) {
  RelayKeyUsed* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.RelayKeyUsed)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_key_id() != 0) {
    _this->_internal_set_key_id(from._internal_key_id());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RelayKeyUsed::CopyFrom(const RelayKeyUsed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.RelayKeyUsed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelayKeyUsed::IsInitialized() const {
  return true;
}

void RelayKeyUsed::InternalSwap(RelayKeyUsed* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.key_id_, other->_impl_.key_id_);
}

std::string RelayKeyUsed::GetTypeName() const {
  return "proto.RelayKeyUsed";
}


// ===================================================================

class RelayStat::_Internal {
 public:
};

void RelayStat::clear_peer_connection() {
  _impl_.peer_connection_.Clear();
}
RelayStat::RelayStat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.RelayStat)
}
RelayStat::RelayStat(const RelayStat& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  RelayStat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.peer_connection_){from._impl_.peer_connection_}
    , decltype(_impl_.uptime_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _this->_impl_.uptime_ = from._impl_.uptime_;
  // @@protoc_insertion_point(copy_constructor:proto.RelayStat)
}

inline void RelayStat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.peer_connection_){arena}
    , decltype(_impl_.uptime_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RelayStat::~RelayStat() {
  // @@protoc_insertion_point(destructor:proto.RelayStat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RelayStat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.peer_connection_.~RepeatedPtrField();
}

void RelayStat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RelayStat::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.RelayStat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.peer_connection_.Clear();
  _impl_.uptime_ = int64_t{0};
  _internal_metadata_.Clear<std::string>();
}

const char* RelayStat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .proto.PeerConnection peer_connection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_peer_connection(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 uptime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.uptime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RelayStat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.RelayStat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.PeerConnection peer_connection = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_peer_connection_size()); i < n; i++) {
    const auto& repfield = this->_internal_peer_connection(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 uptime = 2;
  if (this->_internal_uptime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_uptime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.RelayStat)
  return target;
}

size_t RelayStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.RelayStat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.PeerConnection peer_connection = 1;
  total_size += 1UL * this->_internal_peer_connection_size();
  for (const auto& msg : this->_impl_.peer_connection_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 uptime = 2;
  if (this->_internal_uptime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_uptime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RelayStat::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RelayStat*>(
      &from));
}

void RelayStat::MergeFrom(const RelayStat& from) {
  RelayStat* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.RelayStat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.peer_connection_.MergeFrom(from._impl_.peer_connection_);
  if (from._internal_uptime() != 0) {
    _this->_internal_set_uptime(from._internal_uptime());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RelayStat::CopyFrom(const RelayStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.RelayStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelayStat::IsInitialized() const {
  return true;
}

void RelayStat::InternalSwap(RelayStat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.peer_connection_.InternalSwap(&other->_impl_.peer_connection_);
  swap(_impl_.uptime_, other->_impl_.uptime_);
}

std::string RelayStat::GetTypeName() const {
  return "proto.RelayStat";
}


// ===================================================================

class RelayToRouter::_Internal {
 public:
  static const ::proto::RelayKeyPool& key_pool(const RelayToRouter* msg);
  static const ::proto::RelayStat& relay_stat(const RelayToRouter* msg);
};

const ::proto::RelayKeyPool&
RelayToRouter::_Internal::key_pool(const RelayToRouter* msg) {
  return *msg->_impl_.key_pool_;
}
const ::proto::RelayStat&
RelayToRouter::_Internal::relay_stat(const RelayToRouter* msg) {
  return *msg->_impl_.relay_stat_;
}
RelayToRouter::RelayToRouter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.RelayToRouter)
}
RelayToRouter::RelayToRouter(const RelayToRouter& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  RelayToRouter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_pool_){nullptr}
    , decltype(_impl_.relay_stat_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_key_pool()) {
    _this->_impl_.key_pool_ = new ::proto::RelayKeyPool(*from._impl_.key_pool_);
  }
  if (from._internal_has_relay_stat()) {
    _this->_impl_.relay_stat_ = new ::proto::RelayStat(*from._impl_.relay_stat_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.RelayToRouter)
}

inline void RelayToRouter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_pool_){nullptr}
    , decltype(_impl_.relay_stat_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RelayToRouter::~RelayToRouter() {
  // @@protoc_insertion_point(destructor:proto.RelayToRouter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RelayToRouter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.key_pool_;
  if (this != internal_default_instance()) delete _impl_.relay_stat_;
}

void RelayToRouter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RelayToRouter::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.RelayToRouter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.key_pool_ != nullptr) {
    delete _impl_.key_pool_;
  }
  _impl_.key_pool_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.relay_stat_ != nullptr) {
    delete _impl_.relay_stat_;
  }
  _impl_.relay_stat_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* RelayToRouter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.RelayKeyPool key_pool = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_key_pool(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.RelayStat relay_stat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_relay_stat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RelayToRouter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.RelayToRouter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.RelayKeyPool key_pool = 1;
  if (this->_internal_has_key_pool()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::key_pool(this),
        _Internal::key_pool(this).GetCachedSize(), target, stream);
  }

  // .proto.RelayStat relay_stat = 2;
  if (this->_internal_has_relay_stat()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::relay_stat(this),
        _Internal::relay_stat(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.RelayToRouter)
  return target;
}

size_t RelayToRouter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.RelayToRouter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.RelayKeyPool key_pool = 1;
  if (this->_internal_has_key_pool()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.key_pool_);
  }

  // .proto.RelayStat relay_stat = 2;
  if (this->_internal_has_relay_stat()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.relay_stat_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RelayToRouter::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RelayToRouter*>(
      &from));
}

void RelayToRouter::MergeFrom(const RelayToRouter& from) {
  RelayToRouter* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.RelayToRouter)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_key_pool()) {
    _this->_internal_mutable_key_pool()->::proto::RelayKeyPool::MergeFrom(
        from._internal_key_pool());
  }
  if (from._internal_has_relay_stat()) {
    _this->_internal_mutable_relay_stat()->::proto::RelayStat::MergeFrom(
        from._internal_relay_stat());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RelayToRouter::CopyFrom(const RelayToRouter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.RelayToRouter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelayToRouter::IsInitialized() const {
  return true;
}

void RelayToRouter::InternalSwap(RelayToRouter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RelayToRouter, _impl_.relay_stat_)
      + sizeof(RelayToRouter::_impl_.relay_stat_)
      - PROTOBUF_FIELD_OFFSET(RelayToRouter, _impl_.key_pool_)>(
          reinterpret_cast<char*>(&_impl_.key_pool_),
          reinterpret_cast<char*>(&other->_impl_.key_pool_));
}

std::string RelayToRouter::GetTypeName() const {
  return "proto.RelayToRouter";
}


// ===================================================================

class RouterToRelay::_Internal {
 public:
  static const ::proto::RelayKeyUsed& key_used(const RouterToRelay* msg);
  static const ::proto::PeerConnectionRequest& peer_connection_request(const RouterToRelay* msg);
};

const ::proto::RelayKeyUsed&
RouterToRelay::_Internal::key_used(const RouterToRelay* msg) {
  return *msg->_impl_.key_used_;
}
const ::proto::PeerConnectionRequest&
RouterToRelay::_Internal::peer_connection_request(const RouterToRelay* msg) {
  return *msg->_impl_.peer_connection_request_;
}
void RouterToRelay::clear_peer_connection_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.peer_connection_request_ != nullptr) {
    delete _impl_.peer_connection_request_;
  }
  _impl_.peer_connection_request_ = nullptr;
}
RouterToRelay::RouterToRelay(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.RouterToRelay)
}
RouterToRelay::RouterToRelay(const RouterToRelay& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  RouterToRelay* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_used_){nullptr}
    , decltype(_impl_.peer_connection_request_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_key_used()) {
    _this->_impl_.key_used_ = new ::proto::RelayKeyUsed(*from._impl_.key_used_);
  }
  if (from._internal_has_peer_connection_request()) {
    _this->_impl_.peer_connection_request_ = new ::proto::PeerConnectionRequest(*from._impl_.peer_connection_request_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.RouterToRelay)
}

inline void RouterToRelay::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_used_){nullptr}
    , decltype(_impl_.peer_connection_request_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RouterToRelay::~RouterToRelay() {
  // @@protoc_insertion_point(destructor:proto.RouterToRelay)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RouterToRelay::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.key_used_;
  if (this != internal_default_instance()) delete _impl_.peer_connection_request_;
}

void RouterToRelay::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RouterToRelay::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.RouterToRelay)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.key_used_ != nullptr) {
    delete _impl_.key_used_;
  }
  _impl_.key_used_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.peer_connection_request_ != nullptr) {
    delete _impl_.peer_connection_request_;
  }
  _impl_.peer_connection_request_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* RouterToRelay::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.RelayKeyUsed key_used = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_key_used(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.PeerConnectionRequest peer_connection_request = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_peer_connection_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RouterToRelay::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.RouterToRelay)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.RelayKeyUsed key_used = 1;
  if (this->_internal_has_key_used()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::key_used(this),
        _Internal::key_used(this).GetCachedSize(), target, stream);
  }

  // .proto.PeerConnectionRequest peer_connection_request = 2;
  if (this->_internal_has_peer_connection_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::peer_connection_request(this),
        _Internal::peer_connection_request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.RouterToRelay)
  return target;
}

size_t RouterToRelay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.RouterToRelay)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.RelayKeyUsed key_used = 1;
  if (this->_internal_has_key_used()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.key_used_);
  }

  // .proto.PeerConnectionRequest peer_connection_request = 2;
  if (this->_internal_has_peer_connection_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.peer_connection_request_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RouterToRelay::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RouterToRelay*>(
      &from));
}

void RouterToRelay::MergeFrom(const RouterToRelay& from) {
  RouterToRelay* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.RouterToRelay)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_key_used()) {
    _this->_internal_mutable_key_used()->::proto::RelayKeyUsed::MergeFrom(
        from._internal_key_used());
  }
  if (from._internal_has_peer_connection_request()) {
    _this->_internal_mutable_peer_connection_request()->::proto::PeerConnectionRequest::MergeFrom(
        from._internal_peer_connection_request());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RouterToRelay::CopyFrom(const RouterToRelay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.RouterToRelay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouterToRelay::IsInitialized() const {
  return true;
}

void RouterToRelay::InternalSwap(RouterToRelay* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RouterToRelay, _impl_.peer_connection_request_)
      + sizeof(RouterToRelay::_impl_.peer_connection_request_)
      - PROTOBUF_FIELD_OFFSET(RouterToRelay, _impl_.key_used_)>(
          reinterpret_cast<char*>(&_impl_.key_used_),
          reinterpret_cast<char*>(&other->_impl_.key_used_));
}

std::string RouterToRelay::GetTypeName() const {
  return "proto.RouterToRelay";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::RelayKeyPool*
Arena::CreateMaybeMessage< ::proto::RelayKeyPool >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::RelayKeyPool >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::RelayKeyUsed*
Arena::CreateMaybeMessage< ::proto::RelayKeyUsed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::RelayKeyUsed >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::RelayStat*
Arena::CreateMaybeMessage< ::proto::RelayStat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::RelayStat >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::RelayToRouter*
Arena::CreateMaybeMessage< ::proto::RelayToRouter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::RelayToRouter >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::RouterToRelay*
Arena::CreateMaybeMessage< ::proto::RouterToRelay >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::RouterToRelay >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
