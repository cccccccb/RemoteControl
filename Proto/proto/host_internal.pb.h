// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: host_internal.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_host_5finternal_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_host_5finternal_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "common.pb.h"
#include "text_chat.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_host_5finternal_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_host_5finternal_2eproto {
  static const uint32_t offsets[];
};
namespace proto {
namespace internal {
class ConnectConfirmation;
struct ConnectConfirmationDefaultTypeInternal;
extern ConnectConfirmationDefaultTypeInternal _ConnectConfirmation_default_instance_;
class ConnectConfirmationRequest;
struct ConnectConfirmationRequestDefaultTypeInternal;
extern ConnectConfirmationRequestDefaultTypeInternal _ConnectConfirmationRequest_default_instance_;
class ConnectEvent;
struct ConnectEventDefaultTypeInternal;
extern ConnectEventDefaultTypeInternal _ConnectEvent_default_instance_;
class Credentials;
struct CredentialsDefaultTypeInternal;
extern CredentialsDefaultTypeInternal _Credentials_default_instance_;
class CredentialsRequest;
struct CredentialsRequestDefaultTypeInternal;
extern CredentialsRequestDefaultTypeInternal _CredentialsRequest_default_instance_;
class DisconnectEvent;
struct DisconnectEventDefaultTypeInternal;
extern DisconnectEventDefaultTypeInternal _DisconnectEvent_default_instance_;
class RouterState;
struct RouterStateDefaultTypeInternal;
extern RouterStateDefaultTypeInternal _RouterState_default_instance_;
class ServiceControl;
struct ServiceControlDefaultTypeInternal;
extern ServiceControlDefaultTypeInternal _ServiceControl_default_instance_;
class ServiceToUi;
struct ServiceToUiDefaultTypeInternal;
extern ServiceToUiDefaultTypeInternal _ServiceToUi_default_instance_;
class UiToService;
struct UiToServiceDefaultTypeInternal;
extern UiToServiceDefaultTypeInternal _UiToService_default_instance_;
class VideoRecordingState;
struct VideoRecordingStateDefaultTypeInternal;
extern VideoRecordingStateDefaultTypeInternal _VideoRecordingState_default_instance_;
}  // namespace internal
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::internal::ConnectConfirmation* Arena::CreateMaybeMessage<::proto::internal::ConnectConfirmation>(Arena*);
template<> ::proto::internal::ConnectConfirmationRequest* Arena::CreateMaybeMessage<::proto::internal::ConnectConfirmationRequest>(Arena*);
template<> ::proto::internal::ConnectEvent* Arena::CreateMaybeMessage<::proto::internal::ConnectEvent>(Arena*);
template<> ::proto::internal::Credentials* Arena::CreateMaybeMessage<::proto::internal::Credentials>(Arena*);
template<> ::proto::internal::CredentialsRequest* Arena::CreateMaybeMessage<::proto::internal::CredentialsRequest>(Arena*);
template<> ::proto::internal::DisconnectEvent* Arena::CreateMaybeMessage<::proto::internal::DisconnectEvent>(Arena*);
template<> ::proto::internal::RouterState* Arena::CreateMaybeMessage<::proto::internal::RouterState>(Arena*);
template<> ::proto::internal::ServiceControl* Arena::CreateMaybeMessage<::proto::internal::ServiceControl>(Arena*);
template<> ::proto::internal::ServiceToUi* Arena::CreateMaybeMessage<::proto::internal::ServiceToUi>(Arena*);
template<> ::proto::internal::UiToService* Arena::CreateMaybeMessage<::proto::internal::UiToService>(Arena*);
template<> ::proto::internal::VideoRecordingState* Arena::CreateMaybeMessage<::proto::internal::VideoRecordingState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {
namespace internal {

enum CredentialsRequest_Type : int {
  CredentialsRequest_Type_UNKNOWN_TYPE = 0,
  CredentialsRequest_Type_REFRESH = 1,
  CredentialsRequest_Type_NEW_PASSWORD = 2,
  CredentialsRequest_Type_CredentialsRequest_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CredentialsRequest_Type_CredentialsRequest_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CredentialsRequest_Type_IsValid(int value);
constexpr CredentialsRequest_Type CredentialsRequest_Type_Type_MIN = CredentialsRequest_Type_UNKNOWN_TYPE;
constexpr CredentialsRequest_Type CredentialsRequest_Type_Type_MAX = CredentialsRequest_Type_NEW_PASSWORD;
constexpr int CredentialsRequest_Type_Type_ARRAYSIZE = CredentialsRequest_Type_Type_MAX + 1;

const std::string& CredentialsRequest_Type_Name(CredentialsRequest_Type value);
template<typename T>
inline const std::string& CredentialsRequest_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CredentialsRequest_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CredentialsRequest_Type_Name.");
  return CredentialsRequest_Type_Name(static_cast<CredentialsRequest_Type>(enum_t_value));
}
bool CredentialsRequest_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CredentialsRequest_Type* value);
enum RouterState_State : int {
  RouterState_State_UNKNOWN = 0,
  RouterState_State_DISABLED = 1,
  RouterState_State_CONNECTING = 2,
  RouterState_State_CONNECTED = 3,
  RouterState_State_FAILED = 4,
  RouterState_State_RouterState_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RouterState_State_RouterState_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RouterState_State_IsValid(int value);
constexpr RouterState_State RouterState_State_State_MIN = RouterState_State_UNKNOWN;
constexpr RouterState_State RouterState_State_State_MAX = RouterState_State_FAILED;
constexpr int RouterState_State_State_ARRAYSIZE = RouterState_State_State_MAX + 1;

const std::string& RouterState_State_Name(RouterState_State value);
template<typename T>
inline const std::string& RouterState_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RouterState_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RouterState_State_Name.");
  return RouterState_State_Name(static_cast<RouterState_State>(enum_t_value));
}
bool RouterState_State_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RouterState_State* value);
enum ServiceControl_Code : int {
  ServiceControl_Code_CODE_UNKNOWN = 0,
  ServiceControl_Code_CODE_KILL = 1,
  ServiceControl_Code_CODE_PAUSE = 2,
  ServiceControl_Code_CODE_LOCK_MOUSE = 3,
  ServiceControl_Code_CODE_LOCK_KEYBOARD = 4,
  ServiceControl_Code_CODE_VOICE_CHAT = 5,
  ServiceControl_Code_ServiceControl_Code_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ServiceControl_Code_ServiceControl_Code_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ServiceControl_Code_IsValid(int value);
constexpr ServiceControl_Code ServiceControl_Code_Code_MIN = ServiceControl_Code_CODE_UNKNOWN;
constexpr ServiceControl_Code ServiceControl_Code_Code_MAX = ServiceControl_Code_CODE_VOICE_CHAT;
constexpr int ServiceControl_Code_Code_ARRAYSIZE = ServiceControl_Code_Code_MAX + 1;

const std::string& ServiceControl_Code_Name(ServiceControl_Code value);
template<typename T>
inline const std::string& ServiceControl_Code_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServiceControl_Code>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServiceControl_Code_Name.");
  return ServiceControl_Code_Name(static_cast<ServiceControl_Code>(enum_t_value));
}
bool ServiceControl_Code_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ServiceControl_Code* value);
// ===================================================================

class CredentialsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:proto.internal.CredentialsRequest) */ {
 public:
  inline CredentialsRequest() : CredentialsRequest(nullptr) {}
  ~CredentialsRequest() override;
  explicit PROTOBUF_CONSTEXPR CredentialsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CredentialsRequest(const CredentialsRequest& from);
  CredentialsRequest(CredentialsRequest&& from) noexcept
    : CredentialsRequest() {
    *this = ::std::move(from);
  }

  inline CredentialsRequest& operator=(const CredentialsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CredentialsRequest& operator=(CredentialsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const CredentialsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CredentialsRequest* internal_default_instance() {
    return reinterpret_cast<const CredentialsRequest*>(
               &_CredentialsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CredentialsRequest& a, CredentialsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CredentialsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CredentialsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CredentialsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CredentialsRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CredentialsRequest& from);
  void MergeFrom(const CredentialsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CredentialsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.internal.CredentialsRequest";
  }
  protected:
  explicit CredentialsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef CredentialsRequest_Type Type;
  static constexpr Type UNKNOWN_TYPE =
    CredentialsRequest_Type_UNKNOWN_TYPE;
  static constexpr Type REFRESH =
    CredentialsRequest_Type_REFRESH;
  static constexpr Type NEW_PASSWORD =
    CredentialsRequest_Type_NEW_PASSWORD;
  static inline bool Type_IsValid(int value) {
    return CredentialsRequest_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    CredentialsRequest_Type_Type_MIN;
  static constexpr Type Type_MAX =
    CredentialsRequest_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    CredentialsRequest_Type_Type_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return CredentialsRequest_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return CredentialsRequest_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // .proto.internal.CredentialsRequest.Type type = 1;
  void clear_type();
  ::proto::internal::CredentialsRequest_Type type() const;
  void set_type(::proto::internal::CredentialsRequest_Type value);
  private:
  ::proto::internal::CredentialsRequest_Type _internal_type() const;
  void _internal_set_type(::proto::internal::CredentialsRequest_Type value);
  public:

  // @@protoc_insertion_point(class_scope:proto.internal.CredentialsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_host_5finternal_2eproto;
};
// -------------------------------------------------------------------

class Credentials final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:proto.internal.Credentials) */ {
 public:
  inline Credentials() : Credentials(nullptr) {}
  ~Credentials() override;
  explicit PROTOBUF_CONSTEXPR Credentials(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Credentials(const Credentials& from);
  Credentials(Credentials&& from) noexcept
    : Credentials() {
    *this = ::std::move(from);
  }

  inline Credentials& operator=(const Credentials& from) {
    CopyFrom(from);
    return *this;
  }
  inline Credentials& operator=(Credentials&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Credentials& default_instance() {
    return *internal_default_instance();
  }
  static inline const Credentials* internal_default_instance() {
    return reinterpret_cast<const Credentials*>(
               &_Credentials_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Credentials& a, Credentials& b) {
    a.Swap(&b);
  }
  inline void Swap(Credentials* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Credentials* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Credentials* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Credentials>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Credentials& from);
  void MergeFrom(const Credentials& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Credentials* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.internal.Credentials";
  }
  protected:
  explicit Credentials(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPasswordFieldNumber = 2,
    kHostIdFieldNumber = 1,
  };
  // string password = 2;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // fixed64 host_id = 1;
  void clear_host_id();
  uint64_t host_id() const;
  void set_host_id(uint64_t value);
  private:
  uint64_t _internal_host_id() const;
  void _internal_set_host_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto.internal.Credentials)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    uint64_t host_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_host_5finternal_2eproto;
};
// -------------------------------------------------------------------

class ConnectEvent final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:proto.internal.ConnectEvent) */ {
 public:
  inline ConnectEvent() : ConnectEvent(nullptr) {}
  ~ConnectEvent() override;
  explicit PROTOBUF_CONSTEXPR ConnectEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConnectEvent(const ConnectEvent& from);
  ConnectEvent(ConnectEvent&& from) noexcept
    : ConnectEvent() {
    *this = ::std::move(from);
  }

  inline ConnectEvent& operator=(const ConnectEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectEvent& operator=(ConnectEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ConnectEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConnectEvent* internal_default_instance() {
    return reinterpret_cast<const ConnectEvent*>(
               &_ConnectEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ConnectEvent& a, ConnectEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConnectEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConnectEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ConnectEvent& from);
  void MergeFrom(const ConnectEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ConnectEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.internal.ConnectEvent";
  }
  protected:
  explicit ConnectEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComputerNameFieldNumber = 2,
    kIdFieldNumber = 1,
    kSessionTypeFieldNumber = 3,
  };
  // string computer_name = 2;
  void clear_computer_name();
  const std::string& computer_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_computer_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_computer_name();
  PROTOBUF_NODISCARD std::string* release_computer_name();
  void set_allocated_computer_name(std::string* computer_name);
  private:
  const std::string& _internal_computer_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_computer_name(const std::string& value);
  std::string* _internal_mutable_computer_name();
  public:

  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // .proto.SessionType session_type = 3;
  void clear_session_type();
  ::proto::SessionType session_type() const;
  void set_session_type(::proto::SessionType value);
  private:
  ::proto::SessionType _internal_session_type() const;
  void _internal_set_session_type(::proto::SessionType value);
  public:

  // @@protoc_insertion_point(class_scope:proto.internal.ConnectEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr computer_name_;
    uint32_t id_;
    int session_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_host_5finternal_2eproto;
};
// -------------------------------------------------------------------

class DisconnectEvent final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:proto.internal.DisconnectEvent) */ {
 public:
  inline DisconnectEvent() : DisconnectEvent(nullptr) {}
  ~DisconnectEvent() override;
  explicit PROTOBUF_CONSTEXPR DisconnectEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DisconnectEvent(const DisconnectEvent& from);
  DisconnectEvent(DisconnectEvent&& from) noexcept
    : DisconnectEvent() {
    *this = ::std::move(from);
  }

  inline DisconnectEvent& operator=(const DisconnectEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisconnectEvent& operator=(DisconnectEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const DisconnectEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const DisconnectEvent* internal_default_instance() {
    return reinterpret_cast<const DisconnectEvent*>(
               &_DisconnectEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DisconnectEvent& a, DisconnectEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(DisconnectEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DisconnectEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DisconnectEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DisconnectEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const DisconnectEvent& from);
  void MergeFrom(const DisconnectEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DisconnectEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.internal.DisconnectEvent";
  }
  protected:
  explicit DisconnectEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto.internal.DisconnectEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_host_5finternal_2eproto;
};
// -------------------------------------------------------------------

class RouterState final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:proto.internal.RouterState) */ {
 public:
  inline RouterState() : RouterState(nullptr) {}
  ~RouterState() override;
  explicit PROTOBUF_CONSTEXPR RouterState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RouterState(const RouterState& from);
  RouterState(RouterState&& from) noexcept
    : RouterState() {
    *this = ::std::move(from);
  }

  inline RouterState& operator=(const RouterState& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouterState& operator=(RouterState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const RouterState& default_instance() {
    return *internal_default_instance();
  }
  static inline const RouterState* internal_default_instance() {
    return reinterpret_cast<const RouterState*>(
               &_RouterState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RouterState& a, RouterState& b) {
    a.Swap(&b);
  }
  inline void Swap(RouterState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RouterState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RouterState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RouterState>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RouterState& from);
  void MergeFrom(const RouterState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RouterState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.internal.RouterState";
  }
  protected:
  explicit RouterState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef RouterState_State State;
  static constexpr State UNKNOWN =
    RouterState_State_UNKNOWN;
  static constexpr State DISABLED =
    RouterState_State_DISABLED;
  static constexpr State CONNECTING =
    RouterState_State_CONNECTING;
  static constexpr State CONNECTED =
    RouterState_State_CONNECTED;
  static constexpr State FAILED =
    RouterState_State_FAILED;
  static inline bool State_IsValid(int value) {
    return RouterState_State_IsValid(value);
  }
  static constexpr State State_MIN =
    RouterState_State_State_MIN;
  static constexpr State State_MAX =
    RouterState_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    RouterState_State_State_ARRAYSIZE;
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return RouterState_State_Name(enum_t_value);
  }
  static inline bool State_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      State* value) {
    return RouterState_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kHostNameFieldNumber = 1,
    kHostPortFieldNumber = 2,
    kStateFieldNumber = 3,
  };
  // string host_name = 1;
  void clear_host_name();
  const std::string& host_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_host_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_host_name();
  PROTOBUF_NODISCARD std::string* release_host_name();
  void set_allocated_host_name(std::string* host_name);
  private:
  const std::string& _internal_host_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_host_name(const std::string& value);
  std::string* _internal_mutable_host_name();
  public:

  // uint32 host_port = 2;
  void clear_host_port();
  uint32_t host_port() const;
  void set_host_port(uint32_t value);
  private:
  uint32_t _internal_host_port() const;
  void _internal_set_host_port(uint32_t value);
  public:

  // .proto.internal.RouterState.State state = 3;
  void clear_state();
  ::proto::internal::RouterState_State state() const;
  void set_state(::proto::internal::RouterState_State value);
  private:
  ::proto::internal::RouterState_State _internal_state() const;
  void _internal_set_state(::proto::internal::RouterState_State value);
  public:

  // @@protoc_insertion_point(class_scope:proto.internal.RouterState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_name_;
    uint32_t host_port_;
    int state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_host_5finternal_2eproto;
};
// -------------------------------------------------------------------

class ConnectConfirmationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:proto.internal.ConnectConfirmationRequest) */ {
 public:
  inline ConnectConfirmationRequest() : ConnectConfirmationRequest(nullptr) {}
  ~ConnectConfirmationRequest() override;
  explicit PROTOBUF_CONSTEXPR ConnectConfirmationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConnectConfirmationRequest(const ConnectConfirmationRequest& from);
  ConnectConfirmationRequest(ConnectConfirmationRequest&& from) noexcept
    : ConnectConfirmationRequest() {
    *this = ::std::move(from);
  }

  inline ConnectConfirmationRequest& operator=(const ConnectConfirmationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectConfirmationRequest& operator=(ConnectConfirmationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ConnectConfirmationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConnectConfirmationRequest* internal_default_instance() {
    return reinterpret_cast<const ConnectConfirmationRequest*>(
               &_ConnectConfirmationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ConnectConfirmationRequest& a, ConnectConfirmationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectConfirmationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectConfirmationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConnectConfirmationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConnectConfirmationRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ConnectConfirmationRequest& from);
  void MergeFrom(const ConnectConfirmationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ConnectConfirmationRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.internal.ConnectConfirmationRequest";
  }
  protected:
  explicit ConnectConfirmationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 3,
    kComputerNameFieldNumber = 4,
    kIdFieldNumber = 1,
    kTimeoutFieldNumber = 2,
    kSessionTypeFieldNumber = 5,
  };
  // string user_name = 3;
  void clear_user_name();
  const std::string& user_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_name();
  PROTOBUF_NODISCARD std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);
  private:
  const std::string& _internal_user_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_name(const std::string& value);
  std::string* _internal_mutable_user_name();
  public:

  // string computer_name = 4;
  void clear_computer_name();
  const std::string& computer_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_computer_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_computer_name();
  PROTOBUF_NODISCARD std::string* release_computer_name();
  void set_allocated_computer_name(std::string* computer_name);
  private:
  const std::string& _internal_computer_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_computer_name(const std::string& value);
  std::string* _internal_mutable_computer_name();
  public:

  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // uint32 timeout = 2;
  void clear_timeout();
  uint32_t timeout() const;
  void set_timeout(uint32_t value);
  private:
  uint32_t _internal_timeout() const;
  void _internal_set_timeout(uint32_t value);
  public:

  // .proto.SessionType session_type = 5;
  void clear_session_type();
  ::proto::SessionType session_type() const;
  void set_session_type(::proto::SessionType value);
  private:
  ::proto::SessionType _internal_session_type() const;
  void _internal_set_session_type(::proto::SessionType value);
  public:

  // @@protoc_insertion_point(class_scope:proto.internal.ConnectConfirmationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr computer_name_;
    uint32_t id_;
    uint32_t timeout_;
    int session_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_host_5finternal_2eproto;
};
// -------------------------------------------------------------------

class ConnectConfirmation final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:proto.internal.ConnectConfirmation) */ {
 public:
  inline ConnectConfirmation() : ConnectConfirmation(nullptr) {}
  ~ConnectConfirmation() override;
  explicit PROTOBUF_CONSTEXPR ConnectConfirmation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConnectConfirmation(const ConnectConfirmation& from);
  ConnectConfirmation(ConnectConfirmation&& from) noexcept
    : ConnectConfirmation() {
    *this = ::std::move(from);
  }

  inline ConnectConfirmation& operator=(const ConnectConfirmation& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectConfirmation& operator=(ConnectConfirmation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ConnectConfirmation& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConnectConfirmation* internal_default_instance() {
    return reinterpret_cast<const ConnectConfirmation*>(
               &_ConnectConfirmation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ConnectConfirmation& a, ConnectConfirmation& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectConfirmation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectConfirmation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConnectConfirmation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConnectConfirmation>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ConnectConfirmation& from);
  void MergeFrom(const ConnectConfirmation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ConnectConfirmation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.internal.ConnectConfirmation";
  }
  protected:
  explicit ConnectConfirmation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kAcceptConnectionFieldNumber = 2,
  };
  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // bool accept_connection = 2;
  void clear_accept_connection();
  bool accept_connection() const;
  void set_accept_connection(bool value);
  private:
  bool _internal_accept_connection() const;
  void _internal_set_accept_connection(bool value);
  public:

  // @@protoc_insertion_point(class_scope:proto.internal.ConnectConfirmation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t id_;
    bool accept_connection_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_host_5finternal_2eproto;
};
// -------------------------------------------------------------------

class ServiceControl final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:proto.internal.ServiceControl) */ {
 public:
  inline ServiceControl() : ServiceControl(nullptr) {}
  ~ServiceControl() override;
  explicit PROTOBUF_CONSTEXPR ServiceControl(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServiceControl(const ServiceControl& from);
  ServiceControl(ServiceControl&& from) noexcept
    : ServiceControl() {
    *this = ::std::move(from);
  }

  inline ServiceControl& operator=(const ServiceControl& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceControl& operator=(ServiceControl&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ServiceControl& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kSignedInteger = 2,
    kUnsignedInteger = 3,
    kBoolean = 4,
    kUtf8String = 5,
    VALUE_NOT_SET = 0,
  };

  static inline const ServiceControl* internal_default_instance() {
    return reinterpret_cast<const ServiceControl*>(
               &_ServiceControl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ServiceControl& a, ServiceControl& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceControl* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServiceControl* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServiceControl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServiceControl>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ServiceControl& from);
  void MergeFrom(const ServiceControl& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServiceControl* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.internal.ServiceControl";
  }
  protected:
  explicit ServiceControl(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ServiceControl_Code Code;
  static constexpr Code CODE_UNKNOWN =
    ServiceControl_Code_CODE_UNKNOWN;
  static constexpr Code CODE_KILL =
    ServiceControl_Code_CODE_KILL;
  static constexpr Code CODE_PAUSE =
    ServiceControl_Code_CODE_PAUSE;
  static constexpr Code CODE_LOCK_MOUSE =
    ServiceControl_Code_CODE_LOCK_MOUSE;
  static constexpr Code CODE_LOCK_KEYBOARD =
    ServiceControl_Code_CODE_LOCK_KEYBOARD;
  static constexpr Code CODE_VOICE_CHAT =
    ServiceControl_Code_CODE_VOICE_CHAT;
  static inline bool Code_IsValid(int value) {
    return ServiceControl_Code_IsValid(value);
  }
  static constexpr Code Code_MIN =
    ServiceControl_Code_Code_MIN;
  static constexpr Code Code_MAX =
    ServiceControl_Code_Code_MAX;
  static constexpr int Code_ARRAYSIZE =
    ServiceControl_Code_Code_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Code_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Code>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Code_Name.");
    return ServiceControl_Code_Name(enum_t_value);
  }
  static inline bool Code_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Code* value) {
    return ServiceControl_Code_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
    kSignedIntegerFieldNumber = 2,
    kUnsignedIntegerFieldNumber = 3,
    kBooleanFieldNumber = 4,
    kUtf8StringFieldNumber = 5,
  };
  // .proto.internal.ServiceControl.Code code = 1;
  void clear_code();
  ::proto::internal::ServiceControl_Code code() const;
  void set_code(::proto::internal::ServiceControl_Code value);
  private:
  ::proto::internal::ServiceControl_Code _internal_code() const;
  void _internal_set_code(::proto::internal::ServiceControl_Code value);
  public:

  // int64 signed_integer = 2;
  bool has_signed_integer() const;
  private:
  bool _internal_has_signed_integer() const;
  public:
  void clear_signed_integer();
  int64_t signed_integer() const;
  void set_signed_integer(int64_t value);
  private:
  int64_t _internal_signed_integer() const;
  void _internal_set_signed_integer(int64_t value);
  public:

  // uint64 unsigned_integer = 3;
  bool has_unsigned_integer() const;
  private:
  bool _internal_has_unsigned_integer() const;
  public:
  void clear_unsigned_integer();
  uint64_t unsigned_integer() const;
  void set_unsigned_integer(uint64_t value);
  private:
  uint64_t _internal_unsigned_integer() const;
  void _internal_set_unsigned_integer(uint64_t value);
  public:

  // bool boolean = 4;
  bool has_boolean() const;
  private:
  bool _internal_has_boolean() const;
  public:
  void clear_boolean();
  bool boolean() const;
  void set_boolean(bool value);
  private:
  bool _internal_boolean() const;
  void _internal_set_boolean(bool value);
  public:

  // string utf8_string = 5;
  bool has_utf8_string() const;
  private:
  bool _internal_has_utf8_string() const;
  public:
  void clear_utf8_string();
  const std::string& utf8_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_utf8_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_utf8_string();
  PROTOBUF_NODISCARD std::string* release_utf8_string();
  void set_allocated_utf8_string(std::string* utf8_string);
  private:
  const std::string& _internal_utf8_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_utf8_string(const std::string& value);
  std::string* _internal_mutable_utf8_string();
  public:

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:proto.internal.ServiceControl)
 private:
  class _Internal;
  void set_has_signed_integer();
  void set_has_unsigned_integer();
  void set_has_boolean();
  void set_has_utf8_string();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int code_;
    union ValueUnion {
      constexpr ValueUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      int64_t signed_integer_;
      uint64_t unsigned_integer_;
      bool boolean_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr utf8_string_;
    } value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_host_5finternal_2eproto;
};
// -------------------------------------------------------------------

class VideoRecordingState final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:proto.internal.VideoRecordingState) */ {
 public:
  inline VideoRecordingState() : VideoRecordingState(nullptr) {}
  ~VideoRecordingState() override;
  explicit PROTOBUF_CONSTEXPR VideoRecordingState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VideoRecordingState(const VideoRecordingState& from);
  VideoRecordingState(VideoRecordingState&& from) noexcept
    : VideoRecordingState() {
    *this = ::std::move(from);
  }

  inline VideoRecordingState& operator=(const VideoRecordingState& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoRecordingState& operator=(VideoRecordingState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const VideoRecordingState& default_instance() {
    return *internal_default_instance();
  }
  static inline const VideoRecordingState* internal_default_instance() {
    return reinterpret_cast<const VideoRecordingState*>(
               &_VideoRecordingState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(VideoRecordingState& a, VideoRecordingState& b) {
    a.Swap(&b);
  }
  inline void Swap(VideoRecordingState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VideoRecordingState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VideoRecordingState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VideoRecordingState>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const VideoRecordingState& from);
  void MergeFrom(const VideoRecordingState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VideoRecordingState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.internal.VideoRecordingState";
  }
  protected:
  explicit VideoRecordingState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComputerNameFieldNumber = 1,
    kUserNameFieldNumber = 2,
    kStartedFieldNumber = 3,
  };
  // string computer_name = 1;
  void clear_computer_name();
  const std::string& computer_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_computer_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_computer_name();
  PROTOBUF_NODISCARD std::string* release_computer_name();
  void set_allocated_computer_name(std::string* computer_name);
  private:
  const std::string& _internal_computer_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_computer_name(const std::string& value);
  std::string* _internal_mutable_computer_name();
  public:

  // string user_name = 2;
  void clear_user_name();
  const std::string& user_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_name();
  PROTOBUF_NODISCARD std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);
  private:
  const std::string& _internal_user_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_name(const std::string& value);
  std::string* _internal_mutable_user_name();
  public:

  // bool started = 3;
  void clear_started();
  bool started() const;
  void set_started(bool value);
  private:
  bool _internal_started() const;
  void _internal_set_started(bool value);
  public:

  // @@protoc_insertion_point(class_scope:proto.internal.VideoRecordingState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr computer_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
    bool started_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_host_5finternal_2eproto;
};
// -------------------------------------------------------------------

class UiToService final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:proto.internal.UiToService) */ {
 public:
  inline UiToService() : UiToService(nullptr) {}
  ~UiToService() override;
  explicit PROTOBUF_CONSTEXPR UiToService(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UiToService(const UiToService& from);
  UiToService(UiToService&& from) noexcept
    : UiToService() {
    *this = ::std::move(from);
  }

  inline UiToService& operator=(const UiToService& from) {
    CopyFrom(from);
    return *this;
  }
  inline UiToService& operator=(UiToService&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const UiToService& default_instance() {
    return *internal_default_instance();
  }
  static inline const UiToService* internal_default_instance() {
    return reinterpret_cast<const UiToService*>(
               &_UiToService_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(UiToService& a, UiToService& b) {
    a.Swap(&b);
  }
  inline void Swap(UiToService* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UiToService* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UiToService* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UiToService>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const UiToService& from);
  void MergeFrom(const UiToService& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UiToService* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.internal.UiToService";
  }
  protected:
  explicit UiToService(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCredentialsRequestFieldNumber = 1,
    kConnectConfirmationFieldNumber = 2,
    kControlFieldNumber = 3,
    kTextChatFieldNumber = 4,
  };
  // .proto.internal.CredentialsRequest credentials_request = 1;
  bool has_credentials_request() const;
  private:
  bool _internal_has_credentials_request() const;
  public:
  void clear_credentials_request();
  const ::proto::internal::CredentialsRequest& credentials_request() const;
  PROTOBUF_NODISCARD ::proto::internal::CredentialsRequest* release_credentials_request();
  ::proto::internal::CredentialsRequest* mutable_credentials_request();
  void set_allocated_credentials_request(::proto::internal::CredentialsRequest* credentials_request);
  private:
  const ::proto::internal::CredentialsRequest& _internal_credentials_request() const;
  ::proto::internal::CredentialsRequest* _internal_mutable_credentials_request();
  public:
  void unsafe_arena_set_allocated_credentials_request(
      ::proto::internal::CredentialsRequest* credentials_request);
  ::proto::internal::CredentialsRequest* unsafe_arena_release_credentials_request();

  // .proto.internal.ConnectConfirmation connect_confirmation = 2;
  bool has_connect_confirmation() const;
  private:
  bool _internal_has_connect_confirmation() const;
  public:
  void clear_connect_confirmation();
  const ::proto::internal::ConnectConfirmation& connect_confirmation() const;
  PROTOBUF_NODISCARD ::proto::internal::ConnectConfirmation* release_connect_confirmation();
  ::proto::internal::ConnectConfirmation* mutable_connect_confirmation();
  void set_allocated_connect_confirmation(::proto::internal::ConnectConfirmation* connect_confirmation);
  private:
  const ::proto::internal::ConnectConfirmation& _internal_connect_confirmation() const;
  ::proto::internal::ConnectConfirmation* _internal_mutable_connect_confirmation();
  public:
  void unsafe_arena_set_allocated_connect_confirmation(
      ::proto::internal::ConnectConfirmation* connect_confirmation);
  ::proto::internal::ConnectConfirmation* unsafe_arena_release_connect_confirmation();

  // .proto.internal.ServiceControl control = 3;
  bool has_control() const;
  private:
  bool _internal_has_control() const;
  public:
  void clear_control();
  const ::proto::internal::ServiceControl& control() const;
  PROTOBUF_NODISCARD ::proto::internal::ServiceControl* release_control();
  ::proto::internal::ServiceControl* mutable_control();
  void set_allocated_control(::proto::internal::ServiceControl* control);
  private:
  const ::proto::internal::ServiceControl& _internal_control() const;
  ::proto::internal::ServiceControl* _internal_mutable_control();
  public:
  void unsafe_arena_set_allocated_control(
      ::proto::internal::ServiceControl* control);
  ::proto::internal::ServiceControl* unsafe_arena_release_control();

  // .proto.TextChat text_chat = 4;
  bool has_text_chat() const;
  private:
  bool _internal_has_text_chat() const;
  public:
  void clear_text_chat();
  const ::proto::TextChat& text_chat() const;
  PROTOBUF_NODISCARD ::proto::TextChat* release_text_chat();
  ::proto::TextChat* mutable_text_chat();
  void set_allocated_text_chat(::proto::TextChat* text_chat);
  private:
  const ::proto::TextChat& _internal_text_chat() const;
  ::proto::TextChat* _internal_mutable_text_chat();
  public:
  void unsafe_arena_set_allocated_text_chat(
      ::proto::TextChat* text_chat);
  ::proto::TextChat* unsafe_arena_release_text_chat();

  // @@protoc_insertion_point(class_scope:proto.internal.UiToService)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::internal::CredentialsRequest* credentials_request_;
    ::proto::internal::ConnectConfirmation* connect_confirmation_;
    ::proto::internal::ServiceControl* control_;
    ::proto::TextChat* text_chat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_host_5finternal_2eproto;
};
// -------------------------------------------------------------------

class ServiceToUi final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:proto.internal.ServiceToUi) */ {
 public:
  inline ServiceToUi() : ServiceToUi(nullptr) {}
  ~ServiceToUi() override;
  explicit PROTOBUF_CONSTEXPR ServiceToUi(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServiceToUi(const ServiceToUi& from);
  ServiceToUi(ServiceToUi&& from) noexcept
    : ServiceToUi() {
    *this = ::std::move(from);
  }

  inline ServiceToUi& operator=(const ServiceToUi& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceToUi& operator=(ServiceToUi&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ServiceToUi& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServiceToUi* internal_default_instance() {
    return reinterpret_cast<const ServiceToUi*>(
               &_ServiceToUi_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ServiceToUi& a, ServiceToUi& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceToUi* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServiceToUi* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServiceToUi* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServiceToUi>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ServiceToUi& from);
  void MergeFrom(const ServiceToUi& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServiceToUi* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.internal.ServiceToUi";
  }
  protected:
  explicit ServiceToUi(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRouterStateFieldNumber = 1,
    kCredentialsFieldNumber = 2,
    kConnectEventFieldNumber = 3,
    kDisconnectEventFieldNumber = 4,
    kConnectConfirmationRequestFieldNumber = 5,
    kVideoRecordingStateFieldNumber = 6,
    kTextChatFieldNumber = 7,
  };
  // .proto.internal.RouterState router_state = 1;
  bool has_router_state() const;
  private:
  bool _internal_has_router_state() const;
  public:
  void clear_router_state();
  const ::proto::internal::RouterState& router_state() const;
  PROTOBUF_NODISCARD ::proto::internal::RouterState* release_router_state();
  ::proto::internal::RouterState* mutable_router_state();
  void set_allocated_router_state(::proto::internal::RouterState* router_state);
  private:
  const ::proto::internal::RouterState& _internal_router_state() const;
  ::proto::internal::RouterState* _internal_mutable_router_state();
  public:
  void unsafe_arena_set_allocated_router_state(
      ::proto::internal::RouterState* router_state);
  ::proto::internal::RouterState* unsafe_arena_release_router_state();

  // .proto.internal.Credentials credentials = 2;
  bool has_credentials() const;
  private:
  bool _internal_has_credentials() const;
  public:
  void clear_credentials();
  const ::proto::internal::Credentials& credentials() const;
  PROTOBUF_NODISCARD ::proto::internal::Credentials* release_credentials();
  ::proto::internal::Credentials* mutable_credentials();
  void set_allocated_credentials(::proto::internal::Credentials* credentials);
  private:
  const ::proto::internal::Credentials& _internal_credentials() const;
  ::proto::internal::Credentials* _internal_mutable_credentials();
  public:
  void unsafe_arena_set_allocated_credentials(
      ::proto::internal::Credentials* credentials);
  ::proto::internal::Credentials* unsafe_arena_release_credentials();

  // .proto.internal.ConnectEvent connect_event = 3;
  bool has_connect_event() const;
  private:
  bool _internal_has_connect_event() const;
  public:
  void clear_connect_event();
  const ::proto::internal::ConnectEvent& connect_event() const;
  PROTOBUF_NODISCARD ::proto::internal::ConnectEvent* release_connect_event();
  ::proto::internal::ConnectEvent* mutable_connect_event();
  void set_allocated_connect_event(::proto::internal::ConnectEvent* connect_event);
  private:
  const ::proto::internal::ConnectEvent& _internal_connect_event() const;
  ::proto::internal::ConnectEvent* _internal_mutable_connect_event();
  public:
  void unsafe_arena_set_allocated_connect_event(
      ::proto::internal::ConnectEvent* connect_event);
  ::proto::internal::ConnectEvent* unsafe_arena_release_connect_event();

  // .proto.internal.DisconnectEvent disconnect_event = 4;
  bool has_disconnect_event() const;
  private:
  bool _internal_has_disconnect_event() const;
  public:
  void clear_disconnect_event();
  const ::proto::internal::DisconnectEvent& disconnect_event() const;
  PROTOBUF_NODISCARD ::proto::internal::DisconnectEvent* release_disconnect_event();
  ::proto::internal::DisconnectEvent* mutable_disconnect_event();
  void set_allocated_disconnect_event(::proto::internal::DisconnectEvent* disconnect_event);
  private:
  const ::proto::internal::DisconnectEvent& _internal_disconnect_event() const;
  ::proto::internal::DisconnectEvent* _internal_mutable_disconnect_event();
  public:
  void unsafe_arena_set_allocated_disconnect_event(
      ::proto::internal::DisconnectEvent* disconnect_event);
  ::proto::internal::DisconnectEvent* unsafe_arena_release_disconnect_event();

  // .proto.internal.ConnectConfirmationRequest connect_confirmation_request = 5;
  bool has_connect_confirmation_request() const;
  private:
  bool _internal_has_connect_confirmation_request() const;
  public:
  void clear_connect_confirmation_request();
  const ::proto::internal::ConnectConfirmationRequest& connect_confirmation_request() const;
  PROTOBUF_NODISCARD ::proto::internal::ConnectConfirmationRequest* release_connect_confirmation_request();
  ::proto::internal::ConnectConfirmationRequest* mutable_connect_confirmation_request();
  void set_allocated_connect_confirmation_request(::proto::internal::ConnectConfirmationRequest* connect_confirmation_request);
  private:
  const ::proto::internal::ConnectConfirmationRequest& _internal_connect_confirmation_request() const;
  ::proto::internal::ConnectConfirmationRequest* _internal_mutable_connect_confirmation_request();
  public:
  void unsafe_arena_set_allocated_connect_confirmation_request(
      ::proto::internal::ConnectConfirmationRequest* connect_confirmation_request);
  ::proto::internal::ConnectConfirmationRequest* unsafe_arena_release_connect_confirmation_request();

  // .proto.internal.VideoRecordingState video_recording_state = 6;
  bool has_video_recording_state() const;
  private:
  bool _internal_has_video_recording_state() const;
  public:
  void clear_video_recording_state();
  const ::proto::internal::VideoRecordingState& video_recording_state() const;
  PROTOBUF_NODISCARD ::proto::internal::VideoRecordingState* release_video_recording_state();
  ::proto::internal::VideoRecordingState* mutable_video_recording_state();
  void set_allocated_video_recording_state(::proto::internal::VideoRecordingState* video_recording_state);
  private:
  const ::proto::internal::VideoRecordingState& _internal_video_recording_state() const;
  ::proto::internal::VideoRecordingState* _internal_mutable_video_recording_state();
  public:
  void unsafe_arena_set_allocated_video_recording_state(
      ::proto::internal::VideoRecordingState* video_recording_state);
  ::proto::internal::VideoRecordingState* unsafe_arena_release_video_recording_state();

  // .proto.TextChat text_chat = 7;
  bool has_text_chat() const;
  private:
  bool _internal_has_text_chat() const;
  public:
  void clear_text_chat();
  const ::proto::TextChat& text_chat() const;
  PROTOBUF_NODISCARD ::proto::TextChat* release_text_chat();
  ::proto::TextChat* mutable_text_chat();
  void set_allocated_text_chat(::proto::TextChat* text_chat);
  private:
  const ::proto::TextChat& _internal_text_chat() const;
  ::proto::TextChat* _internal_mutable_text_chat();
  public:
  void unsafe_arena_set_allocated_text_chat(
      ::proto::TextChat* text_chat);
  ::proto::TextChat* unsafe_arena_release_text_chat();

  // @@protoc_insertion_point(class_scope:proto.internal.ServiceToUi)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::internal::RouterState* router_state_;
    ::proto::internal::Credentials* credentials_;
    ::proto::internal::ConnectEvent* connect_event_;
    ::proto::internal::DisconnectEvent* disconnect_event_;
    ::proto::internal::ConnectConfirmationRequest* connect_confirmation_request_;
    ::proto::internal::VideoRecordingState* video_recording_state_;
    ::proto::TextChat* text_chat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_host_5finternal_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CredentialsRequest

// .proto.internal.CredentialsRequest.Type type = 1;
inline void CredentialsRequest::clear_type() {
  _impl_.type_ = 0;
}
inline ::proto::internal::CredentialsRequest_Type CredentialsRequest::_internal_type() const {
  return static_cast< ::proto::internal::CredentialsRequest_Type >(_impl_.type_);
}
inline ::proto::internal::CredentialsRequest_Type CredentialsRequest::type() const {
  // @@protoc_insertion_point(field_get:proto.internal.CredentialsRequest.type)
  return _internal_type();
}
inline void CredentialsRequest::_internal_set_type(::proto::internal::CredentialsRequest_Type value) {
  
  _impl_.type_ = value;
}
inline void CredentialsRequest::set_type(::proto::internal::CredentialsRequest_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:proto.internal.CredentialsRequest.type)
}

// -------------------------------------------------------------------

// Credentials

// fixed64 host_id = 1;
inline void Credentials::clear_host_id() {
  _impl_.host_id_ = uint64_t{0u};
}
inline uint64_t Credentials::_internal_host_id() const {
  return _impl_.host_id_;
}
inline uint64_t Credentials::host_id() const {
  // @@protoc_insertion_point(field_get:proto.internal.Credentials.host_id)
  return _internal_host_id();
}
inline void Credentials::_internal_set_host_id(uint64_t value) {
  
  _impl_.host_id_ = value;
}
inline void Credentials::set_host_id(uint64_t value) {
  _internal_set_host_id(value);
  // @@protoc_insertion_point(field_set:proto.internal.Credentials.host_id)
}

// string password = 2;
inline void Credentials::clear_password() {
  _impl_.password_.ClearToEmpty();
}
inline const std::string& Credentials::password() const {
  // @@protoc_insertion_point(field_get:proto.internal.Credentials.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Credentials::set_password(ArgT0&& arg0, ArgT... args) {
 
 _impl_.password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.internal.Credentials.password)
}
inline std::string* Credentials::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:proto.internal.Credentials.password)
  return _s;
}
inline const std::string& Credentials::_internal_password() const {
  return _impl_.password_.Get();
}
inline void Credentials::_internal_set_password(const std::string& value) {
  
  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* Credentials::_internal_mutable_password() {
  
  return _impl_.password_.Mutable(GetArenaForAllocation());
}
inline std::string* Credentials::release_password() {
  // @@protoc_insertion_point(field_release:proto.internal.Credentials.password)
  return _impl_.password_.Release();
}
inline void Credentials::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  _impl_.password_.SetAllocated(password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.internal.Credentials.password)
}

// -------------------------------------------------------------------

// ConnectEvent

// uint32 id = 1;
inline void ConnectEvent::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t ConnectEvent::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t ConnectEvent::id() const {
  // @@protoc_insertion_point(field_get:proto.internal.ConnectEvent.id)
  return _internal_id();
}
inline void ConnectEvent::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void ConnectEvent::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:proto.internal.ConnectEvent.id)
}

// string computer_name = 2;
inline void ConnectEvent::clear_computer_name() {
  _impl_.computer_name_.ClearToEmpty();
}
inline const std::string& ConnectEvent::computer_name() const {
  // @@protoc_insertion_point(field_get:proto.internal.ConnectEvent.computer_name)
  return _internal_computer_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConnectEvent::set_computer_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.computer_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.internal.ConnectEvent.computer_name)
}
inline std::string* ConnectEvent::mutable_computer_name() {
  std::string* _s = _internal_mutable_computer_name();
  // @@protoc_insertion_point(field_mutable:proto.internal.ConnectEvent.computer_name)
  return _s;
}
inline const std::string& ConnectEvent::_internal_computer_name() const {
  return _impl_.computer_name_.Get();
}
inline void ConnectEvent::_internal_set_computer_name(const std::string& value) {
  
  _impl_.computer_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ConnectEvent::_internal_mutable_computer_name() {
  
  return _impl_.computer_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ConnectEvent::release_computer_name() {
  // @@protoc_insertion_point(field_release:proto.internal.ConnectEvent.computer_name)
  return _impl_.computer_name_.Release();
}
inline void ConnectEvent::set_allocated_computer_name(std::string* computer_name) {
  if (computer_name != nullptr) {
    
  } else {
    
  }
  _impl_.computer_name_.SetAllocated(computer_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.computer_name_.IsDefault()) {
    _impl_.computer_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.internal.ConnectEvent.computer_name)
}

// .proto.SessionType session_type = 3;
inline void ConnectEvent::clear_session_type() {
  _impl_.session_type_ = 0;
}
inline ::proto::SessionType ConnectEvent::_internal_session_type() const {
  return static_cast< ::proto::SessionType >(_impl_.session_type_);
}
inline ::proto::SessionType ConnectEvent::session_type() const {
  // @@protoc_insertion_point(field_get:proto.internal.ConnectEvent.session_type)
  return _internal_session_type();
}
inline void ConnectEvent::_internal_set_session_type(::proto::SessionType value) {
  
  _impl_.session_type_ = value;
}
inline void ConnectEvent::set_session_type(::proto::SessionType value) {
  _internal_set_session_type(value);
  // @@protoc_insertion_point(field_set:proto.internal.ConnectEvent.session_type)
}

// -------------------------------------------------------------------

// DisconnectEvent

// uint32 id = 1;
inline void DisconnectEvent::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t DisconnectEvent::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t DisconnectEvent::id() const {
  // @@protoc_insertion_point(field_get:proto.internal.DisconnectEvent.id)
  return _internal_id();
}
inline void DisconnectEvent::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void DisconnectEvent::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:proto.internal.DisconnectEvent.id)
}

// -------------------------------------------------------------------

// RouterState

// string host_name = 1;
inline void RouterState::clear_host_name() {
  _impl_.host_name_.ClearToEmpty();
}
inline const std::string& RouterState::host_name() const {
  // @@protoc_insertion_point(field_get:proto.internal.RouterState.host_name)
  return _internal_host_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RouterState::set_host_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.host_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.internal.RouterState.host_name)
}
inline std::string* RouterState::mutable_host_name() {
  std::string* _s = _internal_mutable_host_name();
  // @@protoc_insertion_point(field_mutable:proto.internal.RouterState.host_name)
  return _s;
}
inline const std::string& RouterState::_internal_host_name() const {
  return _impl_.host_name_.Get();
}
inline void RouterState::_internal_set_host_name(const std::string& value) {
  
  _impl_.host_name_.Set(value, GetArenaForAllocation());
}
inline std::string* RouterState::_internal_mutable_host_name() {
  
  return _impl_.host_name_.Mutable(GetArenaForAllocation());
}
inline std::string* RouterState::release_host_name() {
  // @@protoc_insertion_point(field_release:proto.internal.RouterState.host_name)
  return _impl_.host_name_.Release();
}
inline void RouterState::set_allocated_host_name(std::string* host_name) {
  if (host_name != nullptr) {
    
  } else {
    
  }
  _impl_.host_name_.SetAllocated(host_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.host_name_.IsDefault()) {
    _impl_.host_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.internal.RouterState.host_name)
}

// uint32 host_port = 2;
inline void RouterState::clear_host_port() {
  _impl_.host_port_ = 0u;
}
inline uint32_t RouterState::_internal_host_port() const {
  return _impl_.host_port_;
}
inline uint32_t RouterState::host_port() const {
  // @@protoc_insertion_point(field_get:proto.internal.RouterState.host_port)
  return _internal_host_port();
}
inline void RouterState::_internal_set_host_port(uint32_t value) {
  
  _impl_.host_port_ = value;
}
inline void RouterState::set_host_port(uint32_t value) {
  _internal_set_host_port(value);
  // @@protoc_insertion_point(field_set:proto.internal.RouterState.host_port)
}

// .proto.internal.RouterState.State state = 3;
inline void RouterState::clear_state() {
  _impl_.state_ = 0;
}
inline ::proto::internal::RouterState_State RouterState::_internal_state() const {
  return static_cast< ::proto::internal::RouterState_State >(_impl_.state_);
}
inline ::proto::internal::RouterState_State RouterState::state() const {
  // @@protoc_insertion_point(field_get:proto.internal.RouterState.state)
  return _internal_state();
}
inline void RouterState::_internal_set_state(::proto::internal::RouterState_State value) {
  
  _impl_.state_ = value;
}
inline void RouterState::set_state(::proto::internal::RouterState_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:proto.internal.RouterState.state)
}

// -------------------------------------------------------------------

// ConnectConfirmationRequest

// uint32 id = 1;
inline void ConnectConfirmationRequest::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t ConnectConfirmationRequest::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t ConnectConfirmationRequest::id() const {
  // @@protoc_insertion_point(field_get:proto.internal.ConnectConfirmationRequest.id)
  return _internal_id();
}
inline void ConnectConfirmationRequest::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void ConnectConfirmationRequest::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:proto.internal.ConnectConfirmationRequest.id)
}

// uint32 timeout = 2;
inline void ConnectConfirmationRequest::clear_timeout() {
  _impl_.timeout_ = 0u;
}
inline uint32_t ConnectConfirmationRequest::_internal_timeout() const {
  return _impl_.timeout_;
}
inline uint32_t ConnectConfirmationRequest::timeout() const {
  // @@protoc_insertion_point(field_get:proto.internal.ConnectConfirmationRequest.timeout)
  return _internal_timeout();
}
inline void ConnectConfirmationRequest::_internal_set_timeout(uint32_t value) {
  
  _impl_.timeout_ = value;
}
inline void ConnectConfirmationRequest::set_timeout(uint32_t value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:proto.internal.ConnectConfirmationRequest.timeout)
}

// string user_name = 3;
inline void ConnectConfirmationRequest::clear_user_name() {
  _impl_.user_name_.ClearToEmpty();
}
inline const std::string& ConnectConfirmationRequest::user_name() const {
  // @@protoc_insertion_point(field_get:proto.internal.ConnectConfirmationRequest.user_name)
  return _internal_user_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConnectConfirmationRequest::set_user_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.internal.ConnectConfirmationRequest.user_name)
}
inline std::string* ConnectConfirmationRequest::mutable_user_name() {
  std::string* _s = _internal_mutable_user_name();
  // @@protoc_insertion_point(field_mutable:proto.internal.ConnectConfirmationRequest.user_name)
  return _s;
}
inline const std::string& ConnectConfirmationRequest::_internal_user_name() const {
  return _impl_.user_name_.Get();
}
inline void ConnectConfirmationRequest::_internal_set_user_name(const std::string& value) {
  
  _impl_.user_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ConnectConfirmationRequest::_internal_mutable_user_name() {
  
  return _impl_.user_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ConnectConfirmationRequest::release_user_name() {
  // @@protoc_insertion_point(field_release:proto.internal.ConnectConfirmationRequest.user_name)
  return _impl_.user_name_.Release();
}
inline void ConnectConfirmationRequest::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    
  } else {
    
  }
  _impl_.user_name_.SetAllocated(user_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_name_.IsDefault()) {
    _impl_.user_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.internal.ConnectConfirmationRequest.user_name)
}

// string computer_name = 4;
inline void ConnectConfirmationRequest::clear_computer_name() {
  _impl_.computer_name_.ClearToEmpty();
}
inline const std::string& ConnectConfirmationRequest::computer_name() const {
  // @@protoc_insertion_point(field_get:proto.internal.ConnectConfirmationRequest.computer_name)
  return _internal_computer_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConnectConfirmationRequest::set_computer_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.computer_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.internal.ConnectConfirmationRequest.computer_name)
}
inline std::string* ConnectConfirmationRequest::mutable_computer_name() {
  std::string* _s = _internal_mutable_computer_name();
  // @@protoc_insertion_point(field_mutable:proto.internal.ConnectConfirmationRequest.computer_name)
  return _s;
}
inline const std::string& ConnectConfirmationRequest::_internal_computer_name() const {
  return _impl_.computer_name_.Get();
}
inline void ConnectConfirmationRequest::_internal_set_computer_name(const std::string& value) {
  
  _impl_.computer_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ConnectConfirmationRequest::_internal_mutable_computer_name() {
  
  return _impl_.computer_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ConnectConfirmationRequest::release_computer_name() {
  // @@protoc_insertion_point(field_release:proto.internal.ConnectConfirmationRequest.computer_name)
  return _impl_.computer_name_.Release();
}
inline void ConnectConfirmationRequest::set_allocated_computer_name(std::string* computer_name) {
  if (computer_name != nullptr) {
    
  } else {
    
  }
  _impl_.computer_name_.SetAllocated(computer_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.computer_name_.IsDefault()) {
    _impl_.computer_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.internal.ConnectConfirmationRequest.computer_name)
}

// .proto.SessionType session_type = 5;
inline void ConnectConfirmationRequest::clear_session_type() {
  _impl_.session_type_ = 0;
}
inline ::proto::SessionType ConnectConfirmationRequest::_internal_session_type() const {
  return static_cast< ::proto::SessionType >(_impl_.session_type_);
}
inline ::proto::SessionType ConnectConfirmationRequest::session_type() const {
  // @@protoc_insertion_point(field_get:proto.internal.ConnectConfirmationRequest.session_type)
  return _internal_session_type();
}
inline void ConnectConfirmationRequest::_internal_set_session_type(::proto::SessionType value) {
  
  _impl_.session_type_ = value;
}
inline void ConnectConfirmationRequest::set_session_type(::proto::SessionType value) {
  _internal_set_session_type(value);
  // @@protoc_insertion_point(field_set:proto.internal.ConnectConfirmationRequest.session_type)
}

// -------------------------------------------------------------------

// ConnectConfirmation

// uint32 id = 1;
inline void ConnectConfirmation::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t ConnectConfirmation::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t ConnectConfirmation::id() const {
  // @@protoc_insertion_point(field_get:proto.internal.ConnectConfirmation.id)
  return _internal_id();
}
inline void ConnectConfirmation::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void ConnectConfirmation::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:proto.internal.ConnectConfirmation.id)
}

// bool accept_connection = 2;
inline void ConnectConfirmation::clear_accept_connection() {
  _impl_.accept_connection_ = false;
}
inline bool ConnectConfirmation::_internal_accept_connection() const {
  return _impl_.accept_connection_;
}
inline bool ConnectConfirmation::accept_connection() const {
  // @@protoc_insertion_point(field_get:proto.internal.ConnectConfirmation.accept_connection)
  return _internal_accept_connection();
}
inline void ConnectConfirmation::_internal_set_accept_connection(bool value) {
  
  _impl_.accept_connection_ = value;
}
inline void ConnectConfirmation::set_accept_connection(bool value) {
  _internal_set_accept_connection(value);
  // @@protoc_insertion_point(field_set:proto.internal.ConnectConfirmation.accept_connection)
}

// -------------------------------------------------------------------

// ServiceControl

// .proto.internal.ServiceControl.Code code = 1;
inline void ServiceControl::clear_code() {
  _impl_.code_ = 0;
}
inline ::proto::internal::ServiceControl_Code ServiceControl::_internal_code() const {
  return static_cast< ::proto::internal::ServiceControl_Code >(_impl_.code_);
}
inline ::proto::internal::ServiceControl_Code ServiceControl::code() const {
  // @@protoc_insertion_point(field_get:proto.internal.ServiceControl.code)
  return _internal_code();
}
inline void ServiceControl::_internal_set_code(::proto::internal::ServiceControl_Code value) {
  
  _impl_.code_ = value;
}
inline void ServiceControl::set_code(::proto::internal::ServiceControl_Code value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:proto.internal.ServiceControl.code)
}

// int64 signed_integer = 2;
inline bool ServiceControl::_internal_has_signed_integer() const {
  return value_case() == kSignedInteger;
}
inline bool ServiceControl::has_signed_integer() const {
  return _internal_has_signed_integer();
}
inline void ServiceControl::set_has_signed_integer() {
  _impl_._oneof_case_[0] = kSignedInteger;
}
inline void ServiceControl::clear_signed_integer() {
  if (_internal_has_signed_integer()) {
    _impl_.value_.signed_integer_ = int64_t{0};
    clear_has_value();
  }
}
inline int64_t ServiceControl::_internal_signed_integer() const {
  if (_internal_has_signed_integer()) {
    return _impl_.value_.signed_integer_;
  }
  return int64_t{0};
}
inline void ServiceControl::_internal_set_signed_integer(int64_t value) {
  if (!_internal_has_signed_integer()) {
    clear_value();
    set_has_signed_integer();
  }
  _impl_.value_.signed_integer_ = value;
}
inline int64_t ServiceControl::signed_integer() const {
  // @@protoc_insertion_point(field_get:proto.internal.ServiceControl.signed_integer)
  return _internal_signed_integer();
}
inline void ServiceControl::set_signed_integer(int64_t value) {
  _internal_set_signed_integer(value);
  // @@protoc_insertion_point(field_set:proto.internal.ServiceControl.signed_integer)
}

// uint64 unsigned_integer = 3;
inline bool ServiceControl::_internal_has_unsigned_integer() const {
  return value_case() == kUnsignedInteger;
}
inline bool ServiceControl::has_unsigned_integer() const {
  return _internal_has_unsigned_integer();
}
inline void ServiceControl::set_has_unsigned_integer() {
  _impl_._oneof_case_[0] = kUnsignedInteger;
}
inline void ServiceControl::clear_unsigned_integer() {
  if (_internal_has_unsigned_integer()) {
    _impl_.value_.unsigned_integer_ = uint64_t{0u};
    clear_has_value();
  }
}
inline uint64_t ServiceControl::_internal_unsigned_integer() const {
  if (_internal_has_unsigned_integer()) {
    return _impl_.value_.unsigned_integer_;
  }
  return uint64_t{0u};
}
inline void ServiceControl::_internal_set_unsigned_integer(uint64_t value) {
  if (!_internal_has_unsigned_integer()) {
    clear_value();
    set_has_unsigned_integer();
  }
  _impl_.value_.unsigned_integer_ = value;
}
inline uint64_t ServiceControl::unsigned_integer() const {
  // @@protoc_insertion_point(field_get:proto.internal.ServiceControl.unsigned_integer)
  return _internal_unsigned_integer();
}
inline void ServiceControl::set_unsigned_integer(uint64_t value) {
  _internal_set_unsigned_integer(value);
  // @@protoc_insertion_point(field_set:proto.internal.ServiceControl.unsigned_integer)
}

// bool boolean = 4;
inline bool ServiceControl::_internal_has_boolean() const {
  return value_case() == kBoolean;
}
inline bool ServiceControl::has_boolean() const {
  return _internal_has_boolean();
}
inline void ServiceControl::set_has_boolean() {
  _impl_._oneof_case_[0] = kBoolean;
}
inline void ServiceControl::clear_boolean() {
  if (_internal_has_boolean()) {
    _impl_.value_.boolean_ = false;
    clear_has_value();
  }
}
inline bool ServiceControl::_internal_boolean() const {
  if (_internal_has_boolean()) {
    return _impl_.value_.boolean_;
  }
  return false;
}
inline void ServiceControl::_internal_set_boolean(bool value) {
  if (!_internal_has_boolean()) {
    clear_value();
    set_has_boolean();
  }
  _impl_.value_.boolean_ = value;
}
inline bool ServiceControl::boolean() const {
  // @@protoc_insertion_point(field_get:proto.internal.ServiceControl.boolean)
  return _internal_boolean();
}
inline void ServiceControl::set_boolean(bool value) {
  _internal_set_boolean(value);
  // @@protoc_insertion_point(field_set:proto.internal.ServiceControl.boolean)
}

// string utf8_string = 5;
inline bool ServiceControl::_internal_has_utf8_string() const {
  return value_case() == kUtf8String;
}
inline bool ServiceControl::has_utf8_string() const {
  return _internal_has_utf8_string();
}
inline void ServiceControl::set_has_utf8_string() {
  _impl_._oneof_case_[0] = kUtf8String;
}
inline void ServiceControl::clear_utf8_string() {
  if (_internal_has_utf8_string()) {
    _impl_.value_.utf8_string_.Destroy();
    clear_has_value();
  }
}
inline const std::string& ServiceControl::utf8_string() const {
  // @@protoc_insertion_point(field_get:proto.internal.ServiceControl.utf8_string)
  return _internal_utf8_string();
}
template <typename ArgT0, typename... ArgT>
inline void ServiceControl::set_utf8_string(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_utf8_string()) {
    clear_value();
    set_has_utf8_string();
    _impl_.value_.utf8_string_.InitDefault();
  }
  _impl_.value_.utf8_string_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.internal.ServiceControl.utf8_string)
}
inline std::string* ServiceControl::mutable_utf8_string() {
  std::string* _s = _internal_mutable_utf8_string();
  // @@protoc_insertion_point(field_mutable:proto.internal.ServiceControl.utf8_string)
  return _s;
}
inline const std::string& ServiceControl::_internal_utf8_string() const {
  if (_internal_has_utf8_string()) {
    return _impl_.value_.utf8_string_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ServiceControl::_internal_set_utf8_string(const std::string& value) {
  if (!_internal_has_utf8_string()) {
    clear_value();
    set_has_utf8_string();
    _impl_.value_.utf8_string_.InitDefault();
  }
  _impl_.value_.utf8_string_.Set(value, GetArenaForAllocation());
}
inline std::string* ServiceControl::_internal_mutable_utf8_string() {
  if (!_internal_has_utf8_string()) {
    clear_value();
    set_has_utf8_string();
    _impl_.value_.utf8_string_.InitDefault();
  }
  return _impl_.value_.utf8_string_.Mutable(      GetArenaForAllocation());
}
inline std::string* ServiceControl::release_utf8_string() {
  // @@protoc_insertion_point(field_release:proto.internal.ServiceControl.utf8_string)
  if (_internal_has_utf8_string()) {
    clear_has_value();
    return _impl_.value_.utf8_string_.Release();
  } else {
    return nullptr;
  }
}
inline void ServiceControl::set_allocated_utf8_string(std::string* utf8_string) {
  if (has_value()) {
    clear_value();
  }
  if (utf8_string != nullptr) {
    set_has_utf8_string();
    _impl_.value_.utf8_string_.InitAllocated(utf8_string, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:proto.internal.ServiceControl.utf8_string)
}

inline bool ServiceControl::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void ServiceControl::clear_has_value() {
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}
inline ServiceControl::ValueCase ServiceControl::value_case() const {
  return ServiceControl::ValueCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// VideoRecordingState

// string computer_name = 1;
inline void VideoRecordingState::clear_computer_name() {
  _impl_.computer_name_.ClearToEmpty();
}
inline const std::string& VideoRecordingState::computer_name() const {
  // @@protoc_insertion_point(field_get:proto.internal.VideoRecordingState.computer_name)
  return _internal_computer_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VideoRecordingState::set_computer_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.computer_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.internal.VideoRecordingState.computer_name)
}
inline std::string* VideoRecordingState::mutable_computer_name() {
  std::string* _s = _internal_mutable_computer_name();
  // @@protoc_insertion_point(field_mutable:proto.internal.VideoRecordingState.computer_name)
  return _s;
}
inline const std::string& VideoRecordingState::_internal_computer_name() const {
  return _impl_.computer_name_.Get();
}
inline void VideoRecordingState::_internal_set_computer_name(const std::string& value) {
  
  _impl_.computer_name_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoRecordingState::_internal_mutable_computer_name() {
  
  return _impl_.computer_name_.Mutable(GetArenaForAllocation());
}
inline std::string* VideoRecordingState::release_computer_name() {
  // @@protoc_insertion_point(field_release:proto.internal.VideoRecordingState.computer_name)
  return _impl_.computer_name_.Release();
}
inline void VideoRecordingState::set_allocated_computer_name(std::string* computer_name) {
  if (computer_name != nullptr) {
    
  } else {
    
  }
  _impl_.computer_name_.SetAllocated(computer_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.computer_name_.IsDefault()) {
    _impl_.computer_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.internal.VideoRecordingState.computer_name)
}

// string user_name = 2;
inline void VideoRecordingState::clear_user_name() {
  _impl_.user_name_.ClearToEmpty();
}
inline const std::string& VideoRecordingState::user_name() const {
  // @@protoc_insertion_point(field_get:proto.internal.VideoRecordingState.user_name)
  return _internal_user_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VideoRecordingState::set_user_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.internal.VideoRecordingState.user_name)
}
inline std::string* VideoRecordingState::mutable_user_name() {
  std::string* _s = _internal_mutable_user_name();
  // @@protoc_insertion_point(field_mutable:proto.internal.VideoRecordingState.user_name)
  return _s;
}
inline const std::string& VideoRecordingState::_internal_user_name() const {
  return _impl_.user_name_.Get();
}
inline void VideoRecordingState::_internal_set_user_name(const std::string& value) {
  
  _impl_.user_name_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoRecordingState::_internal_mutable_user_name() {
  
  return _impl_.user_name_.Mutable(GetArenaForAllocation());
}
inline std::string* VideoRecordingState::release_user_name() {
  // @@protoc_insertion_point(field_release:proto.internal.VideoRecordingState.user_name)
  return _impl_.user_name_.Release();
}
inline void VideoRecordingState::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    
  } else {
    
  }
  _impl_.user_name_.SetAllocated(user_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_name_.IsDefault()) {
    _impl_.user_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.internal.VideoRecordingState.user_name)
}

// bool started = 3;
inline void VideoRecordingState::clear_started() {
  _impl_.started_ = false;
}
inline bool VideoRecordingState::_internal_started() const {
  return _impl_.started_;
}
inline bool VideoRecordingState::started() const {
  // @@protoc_insertion_point(field_get:proto.internal.VideoRecordingState.started)
  return _internal_started();
}
inline void VideoRecordingState::_internal_set_started(bool value) {
  
  _impl_.started_ = value;
}
inline void VideoRecordingState::set_started(bool value) {
  _internal_set_started(value);
  // @@protoc_insertion_point(field_set:proto.internal.VideoRecordingState.started)
}

// -------------------------------------------------------------------

// UiToService

// .proto.internal.CredentialsRequest credentials_request = 1;
inline bool UiToService::_internal_has_credentials_request() const {
  return this != internal_default_instance() && _impl_.credentials_request_ != nullptr;
}
inline bool UiToService::has_credentials_request() const {
  return _internal_has_credentials_request();
}
inline void UiToService::clear_credentials_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.credentials_request_ != nullptr) {
    delete _impl_.credentials_request_;
  }
  _impl_.credentials_request_ = nullptr;
}
inline const ::proto::internal::CredentialsRequest& UiToService::_internal_credentials_request() const {
  const ::proto::internal::CredentialsRequest* p = _impl_.credentials_request_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::internal::CredentialsRequest&>(
      ::proto::internal::_CredentialsRequest_default_instance_);
}
inline const ::proto::internal::CredentialsRequest& UiToService::credentials_request() const {
  // @@protoc_insertion_point(field_get:proto.internal.UiToService.credentials_request)
  return _internal_credentials_request();
}
inline void UiToService::unsafe_arena_set_allocated_credentials_request(
    ::proto::internal::CredentialsRequest* credentials_request) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.credentials_request_);
  }
  _impl_.credentials_request_ = credentials_request;
  if (credentials_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.internal.UiToService.credentials_request)
}
inline ::proto::internal::CredentialsRequest* UiToService::release_credentials_request() {
  
  ::proto::internal::CredentialsRequest* temp = _impl_.credentials_request_;
  _impl_.credentials_request_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::internal::CredentialsRequest* UiToService::unsafe_arena_release_credentials_request() {
  // @@protoc_insertion_point(field_release:proto.internal.UiToService.credentials_request)
  
  ::proto::internal::CredentialsRequest* temp = _impl_.credentials_request_;
  _impl_.credentials_request_ = nullptr;
  return temp;
}
inline ::proto::internal::CredentialsRequest* UiToService::_internal_mutable_credentials_request() {
  
  if (_impl_.credentials_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::internal::CredentialsRequest>(GetArenaForAllocation());
    _impl_.credentials_request_ = p;
  }
  return _impl_.credentials_request_;
}
inline ::proto::internal::CredentialsRequest* UiToService::mutable_credentials_request() {
  ::proto::internal::CredentialsRequest* _msg = _internal_mutable_credentials_request();
  // @@protoc_insertion_point(field_mutable:proto.internal.UiToService.credentials_request)
  return _msg;
}
inline void UiToService::set_allocated_credentials_request(::proto::internal::CredentialsRequest* credentials_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.credentials_request_;
  }
  if (credentials_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(credentials_request);
    if (message_arena != submessage_arena) {
      credentials_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, credentials_request, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.credentials_request_ = credentials_request;
  // @@protoc_insertion_point(field_set_allocated:proto.internal.UiToService.credentials_request)
}

// .proto.internal.ConnectConfirmation connect_confirmation = 2;
inline bool UiToService::_internal_has_connect_confirmation() const {
  return this != internal_default_instance() && _impl_.connect_confirmation_ != nullptr;
}
inline bool UiToService::has_connect_confirmation() const {
  return _internal_has_connect_confirmation();
}
inline void UiToService::clear_connect_confirmation() {
  if (GetArenaForAllocation() == nullptr && _impl_.connect_confirmation_ != nullptr) {
    delete _impl_.connect_confirmation_;
  }
  _impl_.connect_confirmation_ = nullptr;
}
inline const ::proto::internal::ConnectConfirmation& UiToService::_internal_connect_confirmation() const {
  const ::proto::internal::ConnectConfirmation* p = _impl_.connect_confirmation_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::internal::ConnectConfirmation&>(
      ::proto::internal::_ConnectConfirmation_default_instance_);
}
inline const ::proto::internal::ConnectConfirmation& UiToService::connect_confirmation() const {
  // @@protoc_insertion_point(field_get:proto.internal.UiToService.connect_confirmation)
  return _internal_connect_confirmation();
}
inline void UiToService::unsafe_arena_set_allocated_connect_confirmation(
    ::proto::internal::ConnectConfirmation* connect_confirmation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.connect_confirmation_);
  }
  _impl_.connect_confirmation_ = connect_confirmation;
  if (connect_confirmation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.internal.UiToService.connect_confirmation)
}
inline ::proto::internal::ConnectConfirmation* UiToService::release_connect_confirmation() {
  
  ::proto::internal::ConnectConfirmation* temp = _impl_.connect_confirmation_;
  _impl_.connect_confirmation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::internal::ConnectConfirmation* UiToService::unsafe_arena_release_connect_confirmation() {
  // @@protoc_insertion_point(field_release:proto.internal.UiToService.connect_confirmation)
  
  ::proto::internal::ConnectConfirmation* temp = _impl_.connect_confirmation_;
  _impl_.connect_confirmation_ = nullptr;
  return temp;
}
inline ::proto::internal::ConnectConfirmation* UiToService::_internal_mutable_connect_confirmation() {
  
  if (_impl_.connect_confirmation_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::internal::ConnectConfirmation>(GetArenaForAllocation());
    _impl_.connect_confirmation_ = p;
  }
  return _impl_.connect_confirmation_;
}
inline ::proto::internal::ConnectConfirmation* UiToService::mutable_connect_confirmation() {
  ::proto::internal::ConnectConfirmation* _msg = _internal_mutable_connect_confirmation();
  // @@protoc_insertion_point(field_mutable:proto.internal.UiToService.connect_confirmation)
  return _msg;
}
inline void UiToService::set_allocated_connect_confirmation(::proto::internal::ConnectConfirmation* connect_confirmation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.connect_confirmation_;
  }
  if (connect_confirmation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(connect_confirmation);
    if (message_arena != submessage_arena) {
      connect_confirmation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connect_confirmation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.connect_confirmation_ = connect_confirmation;
  // @@protoc_insertion_point(field_set_allocated:proto.internal.UiToService.connect_confirmation)
}

// .proto.internal.ServiceControl control = 3;
inline bool UiToService::_internal_has_control() const {
  return this != internal_default_instance() && _impl_.control_ != nullptr;
}
inline bool UiToService::has_control() const {
  return _internal_has_control();
}
inline void UiToService::clear_control() {
  if (GetArenaForAllocation() == nullptr && _impl_.control_ != nullptr) {
    delete _impl_.control_;
  }
  _impl_.control_ = nullptr;
}
inline const ::proto::internal::ServiceControl& UiToService::_internal_control() const {
  const ::proto::internal::ServiceControl* p = _impl_.control_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::internal::ServiceControl&>(
      ::proto::internal::_ServiceControl_default_instance_);
}
inline const ::proto::internal::ServiceControl& UiToService::control() const {
  // @@protoc_insertion_point(field_get:proto.internal.UiToService.control)
  return _internal_control();
}
inline void UiToService::unsafe_arena_set_allocated_control(
    ::proto::internal::ServiceControl* control) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.control_);
  }
  _impl_.control_ = control;
  if (control) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.internal.UiToService.control)
}
inline ::proto::internal::ServiceControl* UiToService::release_control() {
  
  ::proto::internal::ServiceControl* temp = _impl_.control_;
  _impl_.control_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::internal::ServiceControl* UiToService::unsafe_arena_release_control() {
  // @@protoc_insertion_point(field_release:proto.internal.UiToService.control)
  
  ::proto::internal::ServiceControl* temp = _impl_.control_;
  _impl_.control_ = nullptr;
  return temp;
}
inline ::proto::internal::ServiceControl* UiToService::_internal_mutable_control() {
  
  if (_impl_.control_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::internal::ServiceControl>(GetArenaForAllocation());
    _impl_.control_ = p;
  }
  return _impl_.control_;
}
inline ::proto::internal::ServiceControl* UiToService::mutable_control() {
  ::proto::internal::ServiceControl* _msg = _internal_mutable_control();
  // @@protoc_insertion_point(field_mutable:proto.internal.UiToService.control)
  return _msg;
}
inline void UiToService::set_allocated_control(::proto::internal::ServiceControl* control) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.control_;
  }
  if (control) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(control);
    if (message_arena != submessage_arena) {
      control = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, control, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.control_ = control;
  // @@protoc_insertion_point(field_set_allocated:proto.internal.UiToService.control)
}

// .proto.TextChat text_chat = 4;
inline bool UiToService::_internal_has_text_chat() const {
  return this != internal_default_instance() && _impl_.text_chat_ != nullptr;
}
inline bool UiToService::has_text_chat() const {
  return _internal_has_text_chat();
}
inline const ::proto::TextChat& UiToService::_internal_text_chat() const {
  const ::proto::TextChat* p = _impl_.text_chat_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::TextChat&>(
      ::proto::_TextChat_default_instance_);
}
inline const ::proto::TextChat& UiToService::text_chat() const {
  // @@protoc_insertion_point(field_get:proto.internal.UiToService.text_chat)
  return _internal_text_chat();
}
inline void UiToService::unsafe_arena_set_allocated_text_chat(
    ::proto::TextChat* text_chat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.text_chat_);
  }
  _impl_.text_chat_ = text_chat;
  if (text_chat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.internal.UiToService.text_chat)
}
inline ::proto::TextChat* UiToService::release_text_chat() {
  
  ::proto::TextChat* temp = _impl_.text_chat_;
  _impl_.text_chat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::TextChat* UiToService::unsafe_arena_release_text_chat() {
  // @@protoc_insertion_point(field_release:proto.internal.UiToService.text_chat)
  
  ::proto::TextChat* temp = _impl_.text_chat_;
  _impl_.text_chat_ = nullptr;
  return temp;
}
inline ::proto::TextChat* UiToService::_internal_mutable_text_chat() {
  
  if (_impl_.text_chat_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::TextChat>(GetArenaForAllocation());
    _impl_.text_chat_ = p;
  }
  return _impl_.text_chat_;
}
inline ::proto::TextChat* UiToService::mutable_text_chat() {
  ::proto::TextChat* _msg = _internal_mutable_text_chat();
  // @@protoc_insertion_point(field_mutable:proto.internal.UiToService.text_chat)
  return _msg;
}
inline void UiToService::set_allocated_text_chat(::proto::TextChat* text_chat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.text_chat_);
  }
  if (text_chat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_chat));
    if (message_arena != submessage_arena) {
      text_chat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, text_chat, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.text_chat_ = text_chat;
  // @@protoc_insertion_point(field_set_allocated:proto.internal.UiToService.text_chat)
}

// -------------------------------------------------------------------

// ServiceToUi

// .proto.internal.RouterState router_state = 1;
inline bool ServiceToUi::_internal_has_router_state() const {
  return this != internal_default_instance() && _impl_.router_state_ != nullptr;
}
inline bool ServiceToUi::has_router_state() const {
  return _internal_has_router_state();
}
inline void ServiceToUi::clear_router_state() {
  if (GetArenaForAllocation() == nullptr && _impl_.router_state_ != nullptr) {
    delete _impl_.router_state_;
  }
  _impl_.router_state_ = nullptr;
}
inline const ::proto::internal::RouterState& ServiceToUi::_internal_router_state() const {
  const ::proto::internal::RouterState* p = _impl_.router_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::internal::RouterState&>(
      ::proto::internal::_RouterState_default_instance_);
}
inline const ::proto::internal::RouterState& ServiceToUi::router_state() const {
  // @@protoc_insertion_point(field_get:proto.internal.ServiceToUi.router_state)
  return _internal_router_state();
}
inline void ServiceToUi::unsafe_arena_set_allocated_router_state(
    ::proto::internal::RouterState* router_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.router_state_);
  }
  _impl_.router_state_ = router_state;
  if (router_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.internal.ServiceToUi.router_state)
}
inline ::proto::internal::RouterState* ServiceToUi::release_router_state() {
  
  ::proto::internal::RouterState* temp = _impl_.router_state_;
  _impl_.router_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::internal::RouterState* ServiceToUi::unsafe_arena_release_router_state() {
  // @@protoc_insertion_point(field_release:proto.internal.ServiceToUi.router_state)
  
  ::proto::internal::RouterState* temp = _impl_.router_state_;
  _impl_.router_state_ = nullptr;
  return temp;
}
inline ::proto::internal::RouterState* ServiceToUi::_internal_mutable_router_state() {
  
  if (_impl_.router_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::internal::RouterState>(GetArenaForAllocation());
    _impl_.router_state_ = p;
  }
  return _impl_.router_state_;
}
inline ::proto::internal::RouterState* ServiceToUi::mutable_router_state() {
  ::proto::internal::RouterState* _msg = _internal_mutable_router_state();
  // @@protoc_insertion_point(field_mutable:proto.internal.ServiceToUi.router_state)
  return _msg;
}
inline void ServiceToUi::set_allocated_router_state(::proto::internal::RouterState* router_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.router_state_;
  }
  if (router_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(router_state);
    if (message_arena != submessage_arena) {
      router_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, router_state, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.router_state_ = router_state;
  // @@protoc_insertion_point(field_set_allocated:proto.internal.ServiceToUi.router_state)
}

// .proto.internal.Credentials credentials = 2;
inline bool ServiceToUi::_internal_has_credentials() const {
  return this != internal_default_instance() && _impl_.credentials_ != nullptr;
}
inline bool ServiceToUi::has_credentials() const {
  return _internal_has_credentials();
}
inline void ServiceToUi::clear_credentials() {
  if (GetArenaForAllocation() == nullptr && _impl_.credentials_ != nullptr) {
    delete _impl_.credentials_;
  }
  _impl_.credentials_ = nullptr;
}
inline const ::proto::internal::Credentials& ServiceToUi::_internal_credentials() const {
  const ::proto::internal::Credentials* p = _impl_.credentials_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::internal::Credentials&>(
      ::proto::internal::_Credentials_default_instance_);
}
inline const ::proto::internal::Credentials& ServiceToUi::credentials() const {
  // @@protoc_insertion_point(field_get:proto.internal.ServiceToUi.credentials)
  return _internal_credentials();
}
inline void ServiceToUi::unsafe_arena_set_allocated_credentials(
    ::proto::internal::Credentials* credentials) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.credentials_);
  }
  _impl_.credentials_ = credentials;
  if (credentials) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.internal.ServiceToUi.credentials)
}
inline ::proto::internal::Credentials* ServiceToUi::release_credentials() {
  
  ::proto::internal::Credentials* temp = _impl_.credentials_;
  _impl_.credentials_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::internal::Credentials* ServiceToUi::unsafe_arena_release_credentials() {
  // @@protoc_insertion_point(field_release:proto.internal.ServiceToUi.credentials)
  
  ::proto::internal::Credentials* temp = _impl_.credentials_;
  _impl_.credentials_ = nullptr;
  return temp;
}
inline ::proto::internal::Credentials* ServiceToUi::_internal_mutable_credentials() {
  
  if (_impl_.credentials_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::internal::Credentials>(GetArenaForAllocation());
    _impl_.credentials_ = p;
  }
  return _impl_.credentials_;
}
inline ::proto::internal::Credentials* ServiceToUi::mutable_credentials() {
  ::proto::internal::Credentials* _msg = _internal_mutable_credentials();
  // @@protoc_insertion_point(field_mutable:proto.internal.ServiceToUi.credentials)
  return _msg;
}
inline void ServiceToUi::set_allocated_credentials(::proto::internal::Credentials* credentials) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.credentials_;
  }
  if (credentials) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(credentials);
    if (message_arena != submessage_arena) {
      credentials = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, credentials, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.credentials_ = credentials;
  // @@protoc_insertion_point(field_set_allocated:proto.internal.ServiceToUi.credentials)
}

// .proto.internal.ConnectEvent connect_event = 3;
inline bool ServiceToUi::_internal_has_connect_event() const {
  return this != internal_default_instance() && _impl_.connect_event_ != nullptr;
}
inline bool ServiceToUi::has_connect_event() const {
  return _internal_has_connect_event();
}
inline void ServiceToUi::clear_connect_event() {
  if (GetArenaForAllocation() == nullptr && _impl_.connect_event_ != nullptr) {
    delete _impl_.connect_event_;
  }
  _impl_.connect_event_ = nullptr;
}
inline const ::proto::internal::ConnectEvent& ServiceToUi::_internal_connect_event() const {
  const ::proto::internal::ConnectEvent* p = _impl_.connect_event_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::internal::ConnectEvent&>(
      ::proto::internal::_ConnectEvent_default_instance_);
}
inline const ::proto::internal::ConnectEvent& ServiceToUi::connect_event() const {
  // @@protoc_insertion_point(field_get:proto.internal.ServiceToUi.connect_event)
  return _internal_connect_event();
}
inline void ServiceToUi::unsafe_arena_set_allocated_connect_event(
    ::proto::internal::ConnectEvent* connect_event) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.connect_event_);
  }
  _impl_.connect_event_ = connect_event;
  if (connect_event) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.internal.ServiceToUi.connect_event)
}
inline ::proto::internal::ConnectEvent* ServiceToUi::release_connect_event() {
  
  ::proto::internal::ConnectEvent* temp = _impl_.connect_event_;
  _impl_.connect_event_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::internal::ConnectEvent* ServiceToUi::unsafe_arena_release_connect_event() {
  // @@protoc_insertion_point(field_release:proto.internal.ServiceToUi.connect_event)
  
  ::proto::internal::ConnectEvent* temp = _impl_.connect_event_;
  _impl_.connect_event_ = nullptr;
  return temp;
}
inline ::proto::internal::ConnectEvent* ServiceToUi::_internal_mutable_connect_event() {
  
  if (_impl_.connect_event_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::internal::ConnectEvent>(GetArenaForAllocation());
    _impl_.connect_event_ = p;
  }
  return _impl_.connect_event_;
}
inline ::proto::internal::ConnectEvent* ServiceToUi::mutable_connect_event() {
  ::proto::internal::ConnectEvent* _msg = _internal_mutable_connect_event();
  // @@protoc_insertion_point(field_mutable:proto.internal.ServiceToUi.connect_event)
  return _msg;
}
inline void ServiceToUi::set_allocated_connect_event(::proto::internal::ConnectEvent* connect_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.connect_event_;
  }
  if (connect_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(connect_event);
    if (message_arena != submessage_arena) {
      connect_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connect_event, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.connect_event_ = connect_event;
  // @@protoc_insertion_point(field_set_allocated:proto.internal.ServiceToUi.connect_event)
}

// .proto.internal.DisconnectEvent disconnect_event = 4;
inline bool ServiceToUi::_internal_has_disconnect_event() const {
  return this != internal_default_instance() && _impl_.disconnect_event_ != nullptr;
}
inline bool ServiceToUi::has_disconnect_event() const {
  return _internal_has_disconnect_event();
}
inline void ServiceToUi::clear_disconnect_event() {
  if (GetArenaForAllocation() == nullptr && _impl_.disconnect_event_ != nullptr) {
    delete _impl_.disconnect_event_;
  }
  _impl_.disconnect_event_ = nullptr;
}
inline const ::proto::internal::DisconnectEvent& ServiceToUi::_internal_disconnect_event() const {
  const ::proto::internal::DisconnectEvent* p = _impl_.disconnect_event_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::internal::DisconnectEvent&>(
      ::proto::internal::_DisconnectEvent_default_instance_);
}
inline const ::proto::internal::DisconnectEvent& ServiceToUi::disconnect_event() const {
  // @@protoc_insertion_point(field_get:proto.internal.ServiceToUi.disconnect_event)
  return _internal_disconnect_event();
}
inline void ServiceToUi::unsafe_arena_set_allocated_disconnect_event(
    ::proto::internal::DisconnectEvent* disconnect_event) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.disconnect_event_);
  }
  _impl_.disconnect_event_ = disconnect_event;
  if (disconnect_event) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.internal.ServiceToUi.disconnect_event)
}
inline ::proto::internal::DisconnectEvent* ServiceToUi::release_disconnect_event() {
  
  ::proto::internal::DisconnectEvent* temp = _impl_.disconnect_event_;
  _impl_.disconnect_event_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::internal::DisconnectEvent* ServiceToUi::unsafe_arena_release_disconnect_event() {
  // @@protoc_insertion_point(field_release:proto.internal.ServiceToUi.disconnect_event)
  
  ::proto::internal::DisconnectEvent* temp = _impl_.disconnect_event_;
  _impl_.disconnect_event_ = nullptr;
  return temp;
}
inline ::proto::internal::DisconnectEvent* ServiceToUi::_internal_mutable_disconnect_event() {
  
  if (_impl_.disconnect_event_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::internal::DisconnectEvent>(GetArenaForAllocation());
    _impl_.disconnect_event_ = p;
  }
  return _impl_.disconnect_event_;
}
inline ::proto::internal::DisconnectEvent* ServiceToUi::mutable_disconnect_event() {
  ::proto::internal::DisconnectEvent* _msg = _internal_mutable_disconnect_event();
  // @@protoc_insertion_point(field_mutable:proto.internal.ServiceToUi.disconnect_event)
  return _msg;
}
inline void ServiceToUi::set_allocated_disconnect_event(::proto::internal::DisconnectEvent* disconnect_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.disconnect_event_;
  }
  if (disconnect_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(disconnect_event);
    if (message_arena != submessage_arena) {
      disconnect_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, disconnect_event, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.disconnect_event_ = disconnect_event;
  // @@protoc_insertion_point(field_set_allocated:proto.internal.ServiceToUi.disconnect_event)
}

// .proto.internal.ConnectConfirmationRequest connect_confirmation_request = 5;
inline bool ServiceToUi::_internal_has_connect_confirmation_request() const {
  return this != internal_default_instance() && _impl_.connect_confirmation_request_ != nullptr;
}
inline bool ServiceToUi::has_connect_confirmation_request() const {
  return _internal_has_connect_confirmation_request();
}
inline void ServiceToUi::clear_connect_confirmation_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.connect_confirmation_request_ != nullptr) {
    delete _impl_.connect_confirmation_request_;
  }
  _impl_.connect_confirmation_request_ = nullptr;
}
inline const ::proto::internal::ConnectConfirmationRequest& ServiceToUi::_internal_connect_confirmation_request() const {
  const ::proto::internal::ConnectConfirmationRequest* p = _impl_.connect_confirmation_request_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::internal::ConnectConfirmationRequest&>(
      ::proto::internal::_ConnectConfirmationRequest_default_instance_);
}
inline const ::proto::internal::ConnectConfirmationRequest& ServiceToUi::connect_confirmation_request() const {
  // @@protoc_insertion_point(field_get:proto.internal.ServiceToUi.connect_confirmation_request)
  return _internal_connect_confirmation_request();
}
inline void ServiceToUi::unsafe_arena_set_allocated_connect_confirmation_request(
    ::proto::internal::ConnectConfirmationRequest* connect_confirmation_request) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.connect_confirmation_request_);
  }
  _impl_.connect_confirmation_request_ = connect_confirmation_request;
  if (connect_confirmation_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.internal.ServiceToUi.connect_confirmation_request)
}
inline ::proto::internal::ConnectConfirmationRequest* ServiceToUi::release_connect_confirmation_request() {
  
  ::proto::internal::ConnectConfirmationRequest* temp = _impl_.connect_confirmation_request_;
  _impl_.connect_confirmation_request_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::internal::ConnectConfirmationRequest* ServiceToUi::unsafe_arena_release_connect_confirmation_request() {
  // @@protoc_insertion_point(field_release:proto.internal.ServiceToUi.connect_confirmation_request)
  
  ::proto::internal::ConnectConfirmationRequest* temp = _impl_.connect_confirmation_request_;
  _impl_.connect_confirmation_request_ = nullptr;
  return temp;
}
inline ::proto::internal::ConnectConfirmationRequest* ServiceToUi::_internal_mutable_connect_confirmation_request() {
  
  if (_impl_.connect_confirmation_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::internal::ConnectConfirmationRequest>(GetArenaForAllocation());
    _impl_.connect_confirmation_request_ = p;
  }
  return _impl_.connect_confirmation_request_;
}
inline ::proto::internal::ConnectConfirmationRequest* ServiceToUi::mutable_connect_confirmation_request() {
  ::proto::internal::ConnectConfirmationRequest* _msg = _internal_mutable_connect_confirmation_request();
  // @@protoc_insertion_point(field_mutable:proto.internal.ServiceToUi.connect_confirmation_request)
  return _msg;
}
inline void ServiceToUi::set_allocated_connect_confirmation_request(::proto::internal::ConnectConfirmationRequest* connect_confirmation_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.connect_confirmation_request_;
  }
  if (connect_confirmation_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(connect_confirmation_request);
    if (message_arena != submessage_arena) {
      connect_confirmation_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connect_confirmation_request, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.connect_confirmation_request_ = connect_confirmation_request;
  // @@protoc_insertion_point(field_set_allocated:proto.internal.ServiceToUi.connect_confirmation_request)
}

// .proto.internal.VideoRecordingState video_recording_state = 6;
inline bool ServiceToUi::_internal_has_video_recording_state() const {
  return this != internal_default_instance() && _impl_.video_recording_state_ != nullptr;
}
inline bool ServiceToUi::has_video_recording_state() const {
  return _internal_has_video_recording_state();
}
inline void ServiceToUi::clear_video_recording_state() {
  if (GetArenaForAllocation() == nullptr && _impl_.video_recording_state_ != nullptr) {
    delete _impl_.video_recording_state_;
  }
  _impl_.video_recording_state_ = nullptr;
}
inline const ::proto::internal::VideoRecordingState& ServiceToUi::_internal_video_recording_state() const {
  const ::proto::internal::VideoRecordingState* p = _impl_.video_recording_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::internal::VideoRecordingState&>(
      ::proto::internal::_VideoRecordingState_default_instance_);
}
inline const ::proto::internal::VideoRecordingState& ServiceToUi::video_recording_state() const {
  // @@protoc_insertion_point(field_get:proto.internal.ServiceToUi.video_recording_state)
  return _internal_video_recording_state();
}
inline void ServiceToUi::unsafe_arena_set_allocated_video_recording_state(
    ::proto::internal::VideoRecordingState* video_recording_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.video_recording_state_);
  }
  _impl_.video_recording_state_ = video_recording_state;
  if (video_recording_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.internal.ServiceToUi.video_recording_state)
}
inline ::proto::internal::VideoRecordingState* ServiceToUi::release_video_recording_state() {
  
  ::proto::internal::VideoRecordingState* temp = _impl_.video_recording_state_;
  _impl_.video_recording_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::internal::VideoRecordingState* ServiceToUi::unsafe_arena_release_video_recording_state() {
  // @@protoc_insertion_point(field_release:proto.internal.ServiceToUi.video_recording_state)
  
  ::proto::internal::VideoRecordingState* temp = _impl_.video_recording_state_;
  _impl_.video_recording_state_ = nullptr;
  return temp;
}
inline ::proto::internal::VideoRecordingState* ServiceToUi::_internal_mutable_video_recording_state() {
  
  if (_impl_.video_recording_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::internal::VideoRecordingState>(GetArenaForAllocation());
    _impl_.video_recording_state_ = p;
  }
  return _impl_.video_recording_state_;
}
inline ::proto::internal::VideoRecordingState* ServiceToUi::mutable_video_recording_state() {
  ::proto::internal::VideoRecordingState* _msg = _internal_mutable_video_recording_state();
  // @@protoc_insertion_point(field_mutable:proto.internal.ServiceToUi.video_recording_state)
  return _msg;
}
inline void ServiceToUi::set_allocated_video_recording_state(::proto::internal::VideoRecordingState* video_recording_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.video_recording_state_;
  }
  if (video_recording_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(video_recording_state);
    if (message_arena != submessage_arena) {
      video_recording_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, video_recording_state, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.video_recording_state_ = video_recording_state;
  // @@protoc_insertion_point(field_set_allocated:proto.internal.ServiceToUi.video_recording_state)
}

// .proto.TextChat text_chat = 7;
inline bool ServiceToUi::_internal_has_text_chat() const {
  return this != internal_default_instance() && _impl_.text_chat_ != nullptr;
}
inline bool ServiceToUi::has_text_chat() const {
  return _internal_has_text_chat();
}
inline const ::proto::TextChat& ServiceToUi::_internal_text_chat() const {
  const ::proto::TextChat* p = _impl_.text_chat_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::TextChat&>(
      ::proto::_TextChat_default_instance_);
}
inline const ::proto::TextChat& ServiceToUi::text_chat() const {
  // @@protoc_insertion_point(field_get:proto.internal.ServiceToUi.text_chat)
  return _internal_text_chat();
}
inline void ServiceToUi::unsafe_arena_set_allocated_text_chat(
    ::proto::TextChat* text_chat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.text_chat_);
  }
  _impl_.text_chat_ = text_chat;
  if (text_chat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.internal.ServiceToUi.text_chat)
}
inline ::proto::TextChat* ServiceToUi::release_text_chat() {
  
  ::proto::TextChat* temp = _impl_.text_chat_;
  _impl_.text_chat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::TextChat* ServiceToUi::unsafe_arena_release_text_chat() {
  // @@protoc_insertion_point(field_release:proto.internal.ServiceToUi.text_chat)
  
  ::proto::TextChat* temp = _impl_.text_chat_;
  _impl_.text_chat_ = nullptr;
  return temp;
}
inline ::proto::TextChat* ServiceToUi::_internal_mutable_text_chat() {
  
  if (_impl_.text_chat_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::TextChat>(GetArenaForAllocation());
    _impl_.text_chat_ = p;
  }
  return _impl_.text_chat_;
}
inline ::proto::TextChat* ServiceToUi::mutable_text_chat() {
  ::proto::TextChat* _msg = _internal_mutable_text_chat();
  // @@protoc_insertion_point(field_mutable:proto.internal.ServiceToUi.text_chat)
  return _msg;
}
inline void ServiceToUi::set_allocated_text_chat(::proto::TextChat* text_chat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.text_chat_);
  }
  if (text_chat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_chat));
    if (message_arena != submessage_arena) {
      text_chat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, text_chat, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.text_chat_ = text_chat;
  // @@protoc_insertion_point(field_set_allocated:proto.internal.ServiceToUi.text_chat)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace internal
}  // namespace proto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::proto::internal::CredentialsRequest_Type> : ::std::true_type {};
template <> struct is_proto_enum< ::proto::internal::RouterState_State> : ::std::true_type {};
template <> struct is_proto_enum< ::proto::internal::ServiceControl_Code> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_host_5finternal_2eproto
