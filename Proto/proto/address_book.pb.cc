// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: address_book.proto

#include "address_book.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace proto {
namespace address_book {
PROTOBUF_CONSTEXPR SessionConfig::SessionConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.desktop_manage_)*/nullptr
  , /*decltype(_impl_.desktop_view_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SessionConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SessionConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SessionConfigDefaultTypeInternal() {}
  union {
    SessionConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SessionConfigDefaultTypeInternal _SessionConfig_default_instance_;
PROTOBUF_CONSTEXPR InheritConfig::InheritConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.credentials_)*/false
  , /*decltype(_impl_.desktop_manage_)*/false
  , /*decltype(_impl_.desktop_view_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InheritConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InheritConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InheritConfigDefaultTypeInternal() {}
  union {
    InheritConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InheritConfigDefaultTypeInternal _InheritConfig_default_instance_;
PROTOBUF_CONSTEXPR Computer::Computer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.comment_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.inherit_)*/nullptr
  , /*decltype(_impl_.session_config_)*/nullptr
  , /*decltype(_impl_.create_time_)*/int64_t{0}
  , /*decltype(_impl_.modify_time_)*/int64_t{0}
  , /*decltype(_impl_.port_)*/0u
  , /*decltype(_impl_.session_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ComputerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComputerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComputerDefaultTypeInternal() {}
  union {
    Computer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComputerDefaultTypeInternal _Computer_default_instance_;
PROTOBUF_CONSTEXPR ComputerGroupConfig::ComputerGroupConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.inherit_)*/nullptr
  , /*decltype(_impl_.session_config_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ComputerGroupConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComputerGroupConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComputerGroupConfigDefaultTypeInternal() {}
  union {
    ComputerGroupConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComputerGroupConfigDefaultTypeInternal _ComputerGroupConfig_default_instance_;
PROTOBUF_CONSTEXPR ComputerGroup::ComputerGroup(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.computer_)*/{}
  , /*decltype(_impl_.computer_group_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.comment_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.config_)*/nullptr
  , /*decltype(_impl_.create_time_)*/int64_t{0}
  , /*decltype(_impl_.modify_time_)*/int64_t{0}
  , /*decltype(_impl_.expanded_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ComputerGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComputerGroupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComputerGroupDefaultTypeInternal() {}
  union {
    ComputerGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComputerGroupDefaultTypeInternal _ComputerGroup_default_instance_;
PROTOBUF_CONSTEXPR Router::Router(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.port_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RouterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RouterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RouterDefaultTypeInternal() {}
  union {
    Router _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RouterDefaultTypeInternal _Router_default_instance_;
PROTOBUF_CONSTEXPR Data::Data(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.guid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.root_group_)*/nullptr
  , /*decltype(_impl_.router_)*/nullptr
  , /*decltype(_impl_.enable_router_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataDefaultTypeInternal() {}
  union {
    Data _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataDefaultTypeInternal _Data_default_instance_;
PROTOBUF_CONSTEXPR File::File(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hashing_salt_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.encryption_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FileDefaultTypeInternal() {}
  union {
    File _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FileDefaultTypeInternal _File_default_instance_;
}  // namespace address_book
}  // namespace proto
namespace proto {
namespace address_book {
bool EncryptionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> EncryptionType_strings[4] = {};

static const char EncryptionType_names[] =
  "ENCRYPTION_TYPE_CHACHA20_POLY1305"
  "ENCRYPTION_TYPE_NONE"
  "ENCRYPTION_TYPE_UNKNOWN"
  "ENCRYPTION_TYPE_XCHACHA20_POLY1305";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry EncryptionType_entries[] = {
  { {EncryptionType_names + 0, 33}, 3 },
  { {EncryptionType_names + 33, 20}, 1 },
  { {EncryptionType_names + 53, 23}, 0 },
  { {EncryptionType_names + 76, 34}, 2 },
};

static const int EncryptionType_entries_by_number[] = {
  2, // 0 -> ENCRYPTION_TYPE_UNKNOWN
  1, // 1 -> ENCRYPTION_TYPE_NONE
  3, // 2 -> ENCRYPTION_TYPE_XCHACHA20_POLY1305
  0, // 3 -> ENCRYPTION_TYPE_CHACHA20_POLY1305
};

const std::string& EncryptionType_Name(
    EncryptionType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          EncryptionType_entries,
          EncryptionType_entries_by_number,
          4, EncryptionType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      EncryptionType_entries,
      EncryptionType_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     EncryptionType_strings[idx].get();
}
bool EncryptionType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EncryptionType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      EncryptionType_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<EncryptionType>(int_value);
  }
  return success;
}

// ===================================================================

class SessionConfig::_Internal {
 public:
  static const ::proto::DesktopConfig& desktop_manage(const SessionConfig* msg);
  static const ::proto::DesktopConfig& desktop_view(const SessionConfig* msg);
};

const ::proto::DesktopConfig&
SessionConfig::_Internal::desktop_manage(const SessionConfig* msg) {
  return *msg->_impl_.desktop_manage_;
}
const ::proto::DesktopConfig&
SessionConfig::_Internal::desktop_view(const SessionConfig* msg) {
  return *msg->_impl_.desktop_view_;
}
void SessionConfig::clear_desktop_manage() {
  if (GetArenaForAllocation() == nullptr && _impl_.desktop_manage_ != nullptr) {
    delete _impl_.desktop_manage_;
  }
  _impl_.desktop_manage_ = nullptr;
}
void SessionConfig::clear_desktop_view() {
  if (GetArenaForAllocation() == nullptr && _impl_.desktop_view_ != nullptr) {
    delete _impl_.desktop_view_;
  }
  _impl_.desktop_view_ = nullptr;
}
SessionConfig::SessionConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.address_book.SessionConfig)
}
SessionConfig::SessionConfig(const SessionConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SessionConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.desktop_manage_){nullptr}
    , decltype(_impl_.desktop_view_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_desktop_manage()) {
    _this->_impl_.desktop_manage_ = new ::proto::DesktopConfig(*from._impl_.desktop_manage_);
  }
  if (from._internal_has_desktop_view()) {
    _this->_impl_.desktop_view_ = new ::proto::DesktopConfig(*from._impl_.desktop_view_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.address_book.SessionConfig)
}

inline void SessionConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.desktop_manage_){nullptr}
    , decltype(_impl_.desktop_view_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SessionConfig::~SessionConfig() {
  // @@protoc_insertion_point(destructor:proto.address_book.SessionConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SessionConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.desktop_manage_;
  if (this != internal_default_instance()) delete _impl_.desktop_view_;
}

void SessionConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SessionConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.address_book.SessionConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.desktop_manage_ != nullptr) {
    delete _impl_.desktop_manage_;
  }
  _impl_.desktop_manage_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.desktop_view_ != nullptr) {
    delete _impl_.desktop_view_;
  }
  _impl_.desktop_view_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* SessionConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.DesktopConfig desktop_manage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_desktop_manage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.DesktopConfig desktop_view = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_desktop_view(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SessionConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.address_book.SessionConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.DesktopConfig desktop_manage = 1;
  if (this->_internal_has_desktop_manage()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::desktop_manage(this),
        _Internal::desktop_manage(this).GetCachedSize(), target, stream);
  }

  // .proto.DesktopConfig desktop_view = 2;
  if (this->_internal_has_desktop_view()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::desktop_view(this),
        _Internal::desktop_view(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.address_book.SessionConfig)
  return target;
}

size_t SessionConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.address_book.SessionConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.DesktopConfig desktop_manage = 1;
  if (this->_internal_has_desktop_manage()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.desktop_manage_);
  }

  // .proto.DesktopConfig desktop_view = 2;
  if (this->_internal_has_desktop_view()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.desktop_view_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SessionConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SessionConfig*>(
      &from));
}

void SessionConfig::MergeFrom(const SessionConfig& from) {
  SessionConfig* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.address_book.SessionConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_desktop_manage()) {
    _this->_internal_mutable_desktop_manage()->::proto::DesktopConfig::MergeFrom(
        from._internal_desktop_manage());
  }
  if (from._internal_has_desktop_view()) {
    _this->_internal_mutable_desktop_view()->::proto::DesktopConfig::MergeFrom(
        from._internal_desktop_view());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SessionConfig::CopyFrom(const SessionConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.address_book.SessionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionConfig::IsInitialized() const {
  return true;
}

void SessionConfig::InternalSwap(SessionConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SessionConfig, _impl_.desktop_view_)
      + sizeof(SessionConfig::_impl_.desktop_view_)
      - PROTOBUF_FIELD_OFFSET(SessionConfig, _impl_.desktop_manage_)>(
          reinterpret_cast<char*>(&_impl_.desktop_manage_),
          reinterpret_cast<char*>(&other->_impl_.desktop_manage_));
}

std::string SessionConfig::GetTypeName() const {
  return "proto.address_book.SessionConfig";
}


// ===================================================================

class InheritConfig::_Internal {
 public:
};

InheritConfig::InheritConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.address_book.InheritConfig)
}
InheritConfig::InheritConfig(const InheritConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  InheritConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.credentials_){}
    , decltype(_impl_.desktop_manage_){}
    , decltype(_impl_.desktop_view_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.credentials_, &from._impl_.credentials_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.desktop_view_) -
    reinterpret_cast<char*>(&_impl_.credentials_)) + sizeof(_impl_.desktop_view_));
  // @@protoc_insertion_point(copy_constructor:proto.address_book.InheritConfig)
}

inline void InheritConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.credentials_){false}
    , decltype(_impl_.desktop_manage_){false}
    , decltype(_impl_.desktop_view_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

InheritConfig::~InheritConfig() {
  // @@protoc_insertion_point(destructor:proto.address_book.InheritConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InheritConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InheritConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InheritConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.address_book.InheritConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.credentials_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.desktop_view_) -
      reinterpret_cast<char*>(&_impl_.credentials_)) + sizeof(_impl_.desktop_view_));
  _internal_metadata_.Clear<std::string>();
}

const char* InheritConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool credentials = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.credentials_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool desktop_manage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.desktop_manage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool desktop_view = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.desktop_view_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InheritConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.address_book.InheritConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool credentials = 1;
  if (this->_internal_credentials() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_credentials(), target);
  }

  // bool desktop_manage = 2;
  if (this->_internal_desktop_manage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_desktop_manage(), target);
  }

  // bool desktop_view = 3;
  if (this->_internal_desktop_view() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_desktop_view(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.address_book.InheritConfig)
  return target;
}

size_t InheritConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.address_book.InheritConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool credentials = 1;
  if (this->_internal_credentials() != 0) {
    total_size += 1 + 1;
  }

  // bool desktop_manage = 2;
  if (this->_internal_desktop_manage() != 0) {
    total_size += 1 + 1;
  }

  // bool desktop_view = 3;
  if (this->_internal_desktop_view() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InheritConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const InheritConfig*>(
      &from));
}

void InheritConfig::MergeFrom(const InheritConfig& from) {
  InheritConfig* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.address_book.InheritConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_credentials() != 0) {
    _this->_internal_set_credentials(from._internal_credentials());
  }
  if (from._internal_desktop_manage() != 0) {
    _this->_internal_set_desktop_manage(from._internal_desktop_manage());
  }
  if (from._internal_desktop_view() != 0) {
    _this->_internal_set_desktop_view(from._internal_desktop_view());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void InheritConfig::CopyFrom(const InheritConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.address_book.InheritConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InheritConfig::IsInitialized() const {
  return true;
}

void InheritConfig::InternalSwap(InheritConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InheritConfig, _impl_.desktop_view_)
      + sizeof(InheritConfig::_impl_.desktop_view_)
      - PROTOBUF_FIELD_OFFSET(InheritConfig, _impl_.credentials_)>(
          reinterpret_cast<char*>(&_impl_.credentials_),
          reinterpret_cast<char*>(&other->_impl_.credentials_));
}

std::string InheritConfig::GetTypeName() const {
  return "proto.address_book.InheritConfig";
}


// ===================================================================

class Computer::_Internal {
 public:
  static const ::proto::address_book::InheritConfig& inherit(const Computer* msg);
  static const ::proto::address_book::SessionConfig& session_config(const Computer* msg);
};

const ::proto::address_book::InheritConfig&
Computer::_Internal::inherit(const Computer* msg) {
  return *msg->_impl_.inherit_;
}
const ::proto::address_book::SessionConfig&
Computer::_Internal::session_config(const Computer* msg) {
  return *msg->_impl_.session_config_;
}
Computer::Computer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.address_book.Computer)
}
Computer::Computer(const Computer& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Computer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.comment_){}
    , decltype(_impl_.address_){}
    , decltype(_impl_.username_){}
    , decltype(_impl_.password_){}
    , decltype(_impl_.inherit_){nullptr}
    , decltype(_impl_.session_config_){nullptr}
    , decltype(_impl_.create_time_){}
    , decltype(_impl_.modify_time_){}
    , decltype(_impl_.port_){}
    , decltype(_impl_.session_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.comment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_comment().empty()) {
    _this->_impl_.comment_.Set(from._internal_comment(), 
      _this->GetArenaForAllocation());
  }
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), 
      _this->GetArenaForAllocation());
  }
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    _this->_impl_.username_.Set(from._internal_username(), 
      _this->GetArenaForAllocation());
  }
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    _this->_impl_.password_.Set(from._internal_password(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_inherit()) {
    _this->_impl_.inherit_ = new ::proto::address_book::InheritConfig(*from._impl_.inherit_);
  }
  if (from._internal_has_session_config()) {
    _this->_impl_.session_config_ = new ::proto::address_book::SessionConfig(*from._impl_.session_config_);
  }
  ::memcpy(&_impl_.create_time_, &from._impl_.create_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.session_type_) -
    reinterpret_cast<char*>(&_impl_.create_time_)) + sizeof(_impl_.session_type_));
  // @@protoc_insertion_point(copy_constructor:proto.address_book.Computer)
}

inline void Computer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.comment_){}
    , decltype(_impl_.address_){}
    , decltype(_impl_.username_){}
    , decltype(_impl_.password_){}
    , decltype(_impl_.inherit_){nullptr}
    , decltype(_impl_.session_config_){nullptr}
    , decltype(_impl_.create_time_){int64_t{0}}
    , decltype(_impl_.modify_time_){int64_t{0}}
    , decltype(_impl_.port_){0u}
    , decltype(_impl_.session_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.comment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Computer::~Computer() {
  // @@protoc_insertion_point(destructor:proto.address_book.Computer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Computer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.comment_.Destroy();
  _impl_.address_.Destroy();
  _impl_.username_.Destroy();
  _impl_.password_.Destroy();
  if (this != internal_default_instance()) delete _impl_.inherit_;
  if (this != internal_default_instance()) delete _impl_.session_config_;
}

void Computer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Computer::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.address_book.Computer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.comment_.ClearToEmpty();
  _impl_.address_.ClearToEmpty();
  _impl_.username_.ClearToEmpty();
  _impl_.password_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.inherit_ != nullptr) {
    delete _impl_.inherit_;
  }
  _impl_.inherit_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.session_config_ != nullptr) {
    delete _impl_.session_config_;
  }
  _impl_.session_config_ = nullptr;
  ::memset(&_impl_.create_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.session_type_) -
      reinterpret_cast<char*>(&_impl_.create_time_)) + sizeof(_impl_.session_type_));
  _internal_metadata_.Clear<std::string>();
}

const char* Computer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 create_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.create_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 modify_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.modify_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // string comment = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_comment();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // string address = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 port = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string username = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // string password = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // .proto.address_book.InheritConfig inherit = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_inherit(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.SessionType session_type = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_session_type(static_cast<::proto::SessionType>(val));
        } else
          goto handle_unusual;
        continue;
      // .proto.address_book.SessionConfig session_config = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_session_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Computer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.address_book.Computer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 create_time = 1;
  if (this->_internal_create_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_create_time(), target);
  }

  // int64 modify_time = 2;
  if (this->_internal_modify_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_modify_time(), target);
  }

  // string name = 4;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.address_book.Computer.name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  // string comment = 5;
  if (!this->_internal_comment().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_comment().data(), static_cast<int>(this->_internal_comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.address_book.Computer.comment");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_comment(), target);
  }

  // string address = 6;
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.address_book.Computer.address");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_address(), target);
  }

  // uint32 port = 7;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_port(), target);
  }

  // string username = 8;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.address_book.Computer.username");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_username(), target);
  }

  // string password = 9;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.address_book.Computer.password");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_password(), target);
  }

  // .proto.address_book.InheritConfig inherit = 12;
  if (this->_internal_has_inherit()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::inherit(this),
        _Internal::inherit(this).GetCachedSize(), target, stream);
  }

  // .proto.SessionType session_type = 16;
  if (this->_internal_session_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      16, this->_internal_session_type(), target);
  }

  // .proto.address_book.SessionConfig session_config = 17;
  if (this->_internal_has_session_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::session_config(this),
        _Internal::session_config(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.address_book.Computer)
  return target;
}

size_t Computer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.address_book.Computer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 4;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string comment = 5;
  if (!this->_internal_comment().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_comment());
  }

  // string address = 6;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // string username = 8;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string password = 9;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // .proto.address_book.InheritConfig inherit = 12;
  if (this->_internal_has_inherit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.inherit_);
  }

  // .proto.address_book.SessionConfig session_config = 17;
  if (this->_internal_has_session_config()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.session_config_);
  }

  // int64 create_time = 1;
  if (this->_internal_create_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_create_time());
  }

  // int64 modify_time = 2;
  if (this->_internal_modify_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_modify_time());
  }

  // uint32 port = 7;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_port());
  }

  // .proto.SessionType session_type = 16;
  if (this->_internal_session_type() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_session_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Computer::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Computer*>(
      &from));
}

void Computer::MergeFrom(const Computer& from) {
  Computer* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.address_book.Computer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_comment().empty()) {
    _this->_internal_set_comment(from._internal_comment());
  }
  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  if (!from._internal_username().empty()) {
    _this->_internal_set_username(from._internal_username());
  }
  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  if (from._internal_has_inherit()) {
    _this->_internal_mutable_inherit()->::proto::address_book::InheritConfig::MergeFrom(
        from._internal_inherit());
  }
  if (from._internal_has_session_config()) {
    _this->_internal_mutable_session_config()->::proto::address_book::SessionConfig::MergeFrom(
        from._internal_session_config());
  }
  if (from._internal_create_time() != 0) {
    _this->_internal_set_create_time(from._internal_create_time());
  }
  if (from._internal_modify_time() != 0) {
    _this->_internal_set_modify_time(from._internal_modify_time());
  }
  if (from._internal_port() != 0) {
    _this->_internal_set_port(from._internal_port());
  }
  if (from._internal_session_type() != 0) {
    _this->_internal_set_session_type(from._internal_session_type());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Computer::CopyFrom(const Computer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.address_book.Computer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Computer::IsInitialized() const {
  return true;
}

void Computer::InternalSwap(Computer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.comment_, lhs_arena,
      &other->_impl_.comment_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.address_, lhs_arena,
      &other->_impl_.address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.username_, lhs_arena,
      &other->_impl_.username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_, lhs_arena,
      &other->_impl_.password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Computer, _impl_.session_type_)
      + sizeof(Computer::_impl_.session_type_)
      - PROTOBUF_FIELD_OFFSET(Computer, _impl_.inherit_)>(
          reinterpret_cast<char*>(&_impl_.inherit_),
          reinterpret_cast<char*>(&other->_impl_.inherit_));
}

std::string Computer::GetTypeName() const {
  return "proto.address_book.Computer";
}


// ===================================================================

class ComputerGroupConfig::_Internal {
 public:
  static const ::proto::address_book::InheritConfig& inherit(const ComputerGroupConfig* msg);
  static const ::proto::address_book::SessionConfig& session_config(const ComputerGroupConfig* msg);
};

const ::proto::address_book::InheritConfig&
ComputerGroupConfig::_Internal::inherit(const ComputerGroupConfig* msg) {
  return *msg->_impl_.inherit_;
}
const ::proto::address_book::SessionConfig&
ComputerGroupConfig::_Internal::session_config(const ComputerGroupConfig* msg) {
  return *msg->_impl_.session_config_;
}
ComputerGroupConfig::ComputerGroupConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.address_book.ComputerGroupConfig)
}
ComputerGroupConfig::ComputerGroupConfig(const ComputerGroupConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ComputerGroupConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){}
    , decltype(_impl_.password_){}
    , decltype(_impl_.inherit_){nullptr}
    , decltype(_impl_.session_config_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    _this->_impl_.username_.Set(from._internal_username(), 
      _this->GetArenaForAllocation());
  }
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    _this->_impl_.password_.Set(from._internal_password(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_inherit()) {
    _this->_impl_.inherit_ = new ::proto::address_book::InheritConfig(*from._impl_.inherit_);
  }
  if (from._internal_has_session_config()) {
    _this->_impl_.session_config_ = new ::proto::address_book::SessionConfig(*from._impl_.session_config_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.address_book.ComputerGroupConfig)
}

inline void ComputerGroupConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){}
    , decltype(_impl_.password_){}
    , decltype(_impl_.inherit_){nullptr}
    , decltype(_impl_.session_config_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ComputerGroupConfig::~ComputerGroupConfig() {
  // @@protoc_insertion_point(destructor:proto.address_book.ComputerGroupConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ComputerGroupConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.username_.Destroy();
  _impl_.password_.Destroy();
  if (this != internal_default_instance()) delete _impl_.inherit_;
  if (this != internal_default_instance()) delete _impl_.session_config_;
}

void ComputerGroupConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ComputerGroupConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.address_book.ComputerGroupConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.username_.ClearToEmpty();
  _impl_.password_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.inherit_ != nullptr) {
    delete _impl_.inherit_;
  }
  _impl_.inherit_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.session_config_ != nullptr) {
    delete _impl_.session_config_;
  }
  _impl_.session_config_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* ComputerGroupConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.address_book.InheritConfig inherit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_inherit(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string username = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // string password = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // .proto.address_book.SessionConfig session_config = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_session_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ComputerGroupConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.address_book.ComputerGroupConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.address_book.InheritConfig inherit = 1;
  if (this->_internal_has_inherit()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::inherit(this),
        _Internal::inherit(this).GetCachedSize(), target, stream);
  }

  // string username = 2;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.address_book.ComputerGroupConfig.username");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_username(), target);
  }

  // string password = 3;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.address_book.ComputerGroupConfig.password");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_password(), target);
  }

  // .proto.address_book.SessionConfig session_config = 21;
  if (this->_internal_has_session_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::session_config(this),
        _Internal::session_config(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.address_book.ComputerGroupConfig)
  return target;
}

size_t ComputerGroupConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.address_book.ComputerGroupConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 2;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string password = 3;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // .proto.address_book.InheritConfig inherit = 1;
  if (this->_internal_has_inherit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.inherit_);
  }

  // .proto.address_book.SessionConfig session_config = 21;
  if (this->_internal_has_session_config()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.session_config_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ComputerGroupConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ComputerGroupConfig*>(
      &from));
}

void ComputerGroupConfig::MergeFrom(const ComputerGroupConfig& from) {
  ComputerGroupConfig* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.address_book.ComputerGroupConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_username().empty()) {
    _this->_internal_set_username(from._internal_username());
  }
  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  if (from._internal_has_inherit()) {
    _this->_internal_mutable_inherit()->::proto::address_book::InheritConfig::MergeFrom(
        from._internal_inherit());
  }
  if (from._internal_has_session_config()) {
    _this->_internal_mutable_session_config()->::proto::address_book::SessionConfig::MergeFrom(
        from._internal_session_config());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ComputerGroupConfig::CopyFrom(const ComputerGroupConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.address_book.ComputerGroupConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComputerGroupConfig::IsInitialized() const {
  return true;
}

void ComputerGroupConfig::InternalSwap(ComputerGroupConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.username_, lhs_arena,
      &other->_impl_.username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_, lhs_arena,
      &other->_impl_.password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ComputerGroupConfig, _impl_.session_config_)
      + sizeof(ComputerGroupConfig::_impl_.session_config_)
      - PROTOBUF_FIELD_OFFSET(ComputerGroupConfig, _impl_.inherit_)>(
          reinterpret_cast<char*>(&_impl_.inherit_),
          reinterpret_cast<char*>(&other->_impl_.inherit_));
}

std::string ComputerGroupConfig::GetTypeName() const {
  return "proto.address_book.ComputerGroupConfig";
}


// ===================================================================

class ComputerGroup::_Internal {
 public:
  static const ::proto::address_book::ComputerGroupConfig& config(const ComputerGroup* msg);
};

const ::proto::address_book::ComputerGroupConfig&
ComputerGroup::_Internal::config(const ComputerGroup* msg) {
  return *msg->_impl_.config_;
}
ComputerGroup::ComputerGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.address_book.ComputerGroup)
}
ComputerGroup::ComputerGroup(const ComputerGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ComputerGroup* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.computer_){from._impl_.computer_}
    , decltype(_impl_.computer_group_){from._impl_.computer_group_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.comment_){}
    , decltype(_impl_.config_){nullptr}
    , decltype(_impl_.create_time_){}
    , decltype(_impl_.modify_time_){}
    , decltype(_impl_.expanded_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.comment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_comment().empty()) {
    _this->_impl_.comment_.Set(from._internal_comment(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_config()) {
    _this->_impl_.config_ = new ::proto::address_book::ComputerGroupConfig(*from._impl_.config_);
  }
  ::memcpy(&_impl_.create_time_, &from._impl_.create_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.expanded_) -
    reinterpret_cast<char*>(&_impl_.create_time_)) + sizeof(_impl_.expanded_));
  // @@protoc_insertion_point(copy_constructor:proto.address_book.ComputerGroup)
}

inline void ComputerGroup::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.computer_){arena}
    , decltype(_impl_.computer_group_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.comment_){}
    , decltype(_impl_.config_){nullptr}
    , decltype(_impl_.create_time_){int64_t{0}}
    , decltype(_impl_.modify_time_){int64_t{0}}
    , decltype(_impl_.expanded_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.comment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ComputerGroup::~ComputerGroup() {
  // @@protoc_insertion_point(destructor:proto.address_book.ComputerGroup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ComputerGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.computer_.~RepeatedPtrField();
  _impl_.computer_group_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.comment_.Destroy();
  if (this != internal_default_instance()) delete _impl_.config_;
}

void ComputerGroup::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ComputerGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.address_book.ComputerGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.computer_.Clear();
  _impl_.computer_group_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.comment_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.config_ != nullptr) {
    delete _impl_.config_;
  }
  _impl_.config_ = nullptr;
  ::memset(&_impl_.create_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.expanded_) -
      reinterpret_cast<char*>(&_impl_.create_time_)) + sizeof(_impl_.expanded_));
  _internal_metadata_.Clear<std::string>();
}

const char* ComputerGroup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 create_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.create_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 modify_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.modify_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.address_book.Computer computer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_computer(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.address_book.ComputerGroup computer_group = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_computer_group(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // string comment = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_comment();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // bool expanded = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.expanded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.address_book.ComputerGroupConfig config = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ComputerGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.address_book.ComputerGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 create_time = 1;
  if (this->_internal_create_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_create_time(), target);
  }

  // int64 modify_time = 2;
  if (this->_internal_modify_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_modify_time(), target);
  }

  // repeated .proto.address_book.Computer computer = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_computer_size()); i < n; i++) {
    const auto& repfield = this->_internal_computer(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .proto.address_book.ComputerGroup computer_group = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_computer_group_size()); i < n; i++) {
    const auto& repfield = this->_internal_computer_group(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string name = 5;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.address_book.ComputerGroup.name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_name(), target);
  }

  // string comment = 6;
  if (!this->_internal_comment().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_comment().data(), static_cast<int>(this->_internal_comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.address_book.ComputerGroup.comment");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_comment(), target);
  }

  // bool expanded = 7;
  if (this->_internal_expanded() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_expanded(), target);
  }

  // .proto.address_book.ComputerGroupConfig config = 21;
  if (this->_internal_has_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::config(this),
        _Internal::config(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.address_book.ComputerGroup)
  return target;
}

size_t ComputerGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.address_book.ComputerGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.address_book.Computer computer = 3;
  total_size += 1UL * this->_internal_computer_size();
  for (const auto& msg : this->_impl_.computer_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .proto.address_book.ComputerGroup computer_group = 4;
  total_size += 1UL * this->_internal_computer_group_size();
  for (const auto& msg : this->_impl_.computer_group_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 5;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string comment = 6;
  if (!this->_internal_comment().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_comment());
  }

  // .proto.address_book.ComputerGroupConfig config = 21;
  if (this->_internal_has_config()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.config_);
  }

  // int64 create_time = 1;
  if (this->_internal_create_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_create_time());
  }

  // int64 modify_time = 2;
  if (this->_internal_modify_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_modify_time());
  }

  // bool expanded = 7;
  if (this->_internal_expanded() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ComputerGroup::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ComputerGroup*>(
      &from));
}

void ComputerGroup::MergeFrom(const ComputerGroup& from) {
  ComputerGroup* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.address_book.ComputerGroup)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.computer_.MergeFrom(from._impl_.computer_);
  _this->_impl_.computer_group_.MergeFrom(from._impl_.computer_group_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_comment().empty()) {
    _this->_internal_set_comment(from._internal_comment());
  }
  if (from._internal_has_config()) {
    _this->_internal_mutable_config()->::proto::address_book::ComputerGroupConfig::MergeFrom(
        from._internal_config());
  }
  if (from._internal_create_time() != 0) {
    _this->_internal_set_create_time(from._internal_create_time());
  }
  if (from._internal_modify_time() != 0) {
    _this->_internal_set_modify_time(from._internal_modify_time());
  }
  if (from._internal_expanded() != 0) {
    _this->_internal_set_expanded(from._internal_expanded());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ComputerGroup::CopyFrom(const ComputerGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.address_book.ComputerGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComputerGroup::IsInitialized() const {
  return true;
}

void ComputerGroup::InternalSwap(ComputerGroup* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.computer_.InternalSwap(&other->_impl_.computer_);
  _impl_.computer_group_.InternalSwap(&other->_impl_.computer_group_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.comment_, lhs_arena,
      &other->_impl_.comment_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ComputerGroup, _impl_.expanded_)
      + sizeof(ComputerGroup::_impl_.expanded_)
      - PROTOBUF_FIELD_OFFSET(ComputerGroup, _impl_.config_)>(
          reinterpret_cast<char*>(&_impl_.config_),
          reinterpret_cast<char*>(&other->_impl_.config_));
}

std::string ComputerGroup::GetTypeName() const {
  return "proto.address_book.ComputerGroup";
}


// ===================================================================

class Router::_Internal {
 public:
};

Router::Router(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.address_book.Router)
}
Router::Router(const Router& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Router* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){}
    , decltype(_impl_.username_){}
    , decltype(_impl_.password_){}
    , decltype(_impl_.port_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), 
      _this->GetArenaForAllocation());
  }
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    _this->_impl_.username_.Set(from._internal_username(), 
      _this->GetArenaForAllocation());
  }
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    _this->_impl_.password_.Set(from._internal_password(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.port_ = from._impl_.port_;
  // @@protoc_insertion_point(copy_constructor:proto.address_book.Router)
}

inline void Router::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){}
    , decltype(_impl_.username_){}
    , decltype(_impl_.password_){}
    , decltype(_impl_.port_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Router::~Router() {
  // @@protoc_insertion_point(destructor:proto.address_book.Router)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Router::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.address_.Destroy();
  _impl_.username_.Destroy();
  _impl_.password_.Destroy();
}

void Router::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Router::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.address_book.Router)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.address_.ClearToEmpty();
  _impl_.username_.ClearToEmpty();
  _impl_.password_.ClearToEmpty();
  _impl_.port_ = 0u;
  _internal_metadata_.Clear<std::string>();
}

const char* Router::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string username = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // string password = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Router::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.address_book.Router)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.address_book.Router.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  // uint32 port = 2;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_port(), target);
  }

  // string username = 3;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.address_book.Router.username");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_username(), target);
  }

  // string password = 4;
  if (!this->_internal_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.address_book.Router.password");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.address_book.Router)
  return target;
}

size_t Router::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.address_book.Router)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // string username = 3;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string password = 4;
  if (!this->_internal_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // uint32 port = 2;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Router::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Router*>(
      &from));
}

void Router::MergeFrom(const Router& from) {
  Router* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.address_book.Router)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  if (!from._internal_username().empty()) {
    _this->_internal_set_username(from._internal_username());
  }
  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  if (from._internal_port() != 0) {
    _this->_internal_set_port(from._internal_port());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Router::CopyFrom(const Router& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.address_book.Router)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Router::IsInitialized() const {
  return true;
}

void Router::InternalSwap(Router* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.address_, lhs_arena,
      &other->_impl_.address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.username_, lhs_arena,
      &other->_impl_.username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_, lhs_arena,
      &other->_impl_.password_, rhs_arena
  );
  swap(_impl_.port_, other->_impl_.port_);
}

std::string Router::GetTypeName() const {
  return "proto.address_book.Router";
}


// ===================================================================

class Data::_Internal {
 public:
  static const ::proto::address_book::ComputerGroup& root_group(const Data* msg);
  static const ::proto::address_book::Router& router(const Data* msg);
};

const ::proto::address_book::ComputerGroup&
Data::_Internal::root_group(const Data* msg) {
  return *msg->_impl_.root_group_;
}
const ::proto::address_book::Router&
Data::_Internal::router(const Data* msg) {
  return *msg->_impl_.router_;
}
Data::Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.address_book.Data)
}
Data::Data(const Data& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Data* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.guid_){}
    , decltype(_impl_.root_group_){nullptr}
    , decltype(_impl_.router_){nullptr}
    , decltype(_impl_.enable_router_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.guid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.guid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_guid().empty()) {
    _this->_impl_.guid_.Set(from._internal_guid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_root_group()) {
    _this->_impl_.root_group_ = new ::proto::address_book::ComputerGroup(*from._impl_.root_group_);
  }
  if (from._internal_has_router()) {
    _this->_impl_.router_ = new ::proto::address_book::Router(*from._impl_.router_);
  }
  _this->_impl_.enable_router_ = from._impl_.enable_router_;
  // @@protoc_insertion_point(copy_constructor:proto.address_book.Data)
}

inline void Data::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.guid_){}
    , decltype(_impl_.root_group_){nullptr}
    , decltype(_impl_.router_){nullptr}
    , decltype(_impl_.enable_router_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.guid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.guid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Data::~Data() {
  // @@protoc_insertion_point(destructor:proto.address_book.Data)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Data::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.guid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.root_group_;
  if (this != internal_default_instance()) delete _impl_.router_;
}

void Data::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Data::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.address_book.Data)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.guid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.root_group_ != nullptr) {
    delete _impl_.root_group_;
  }
  _impl_.root_group_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.router_ != nullptr) {
    delete _impl_.router_;
  }
  _impl_.router_ = nullptr;
  _impl_.enable_router_ = false;
  _internal_metadata_.Clear<std::string>();
}

const char* Data::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.address_book.ComputerGroup root_group = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_root_group(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool enable_router = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.enable_router_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.address_book.Router router = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_router(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string guid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_guid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Data::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.address_book.Data)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.address_book.ComputerGroup root_group = 2;
  if (this->_internal_has_root_group()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::root_group(this),
        _Internal::root_group(this).GetCachedSize(), target, stream);
  }

  // bool enable_router = 4;
  if (this->_internal_enable_router() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_enable_router(), target);
  }

  // .proto.address_book.Router router = 5;
  if (this->_internal_has_router()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::router(this),
        _Internal::router(this).GetCachedSize(), target, stream);
  }

  // string guid = 6;
  if (!this->_internal_guid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_guid().data(), static_cast<int>(this->_internal_guid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.address_book.Data.guid");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_guid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.address_book.Data)
  return target;
}

size_t Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.address_book.Data)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string guid = 6;
  if (!this->_internal_guid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_guid());
  }

  // .proto.address_book.ComputerGroup root_group = 2;
  if (this->_internal_has_root_group()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.root_group_);
  }

  // .proto.address_book.Router router = 5;
  if (this->_internal_has_router()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.router_);
  }

  // bool enable_router = 4;
  if (this->_internal_enable_router() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Data::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Data*>(
      &from));
}

void Data::MergeFrom(const Data& from) {
  Data* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.address_book.Data)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_guid().empty()) {
    _this->_internal_set_guid(from._internal_guid());
  }
  if (from._internal_has_root_group()) {
    _this->_internal_mutable_root_group()->::proto::address_book::ComputerGroup::MergeFrom(
        from._internal_root_group());
  }
  if (from._internal_has_router()) {
    _this->_internal_mutable_router()->::proto::address_book::Router::MergeFrom(
        from._internal_router());
  }
  if (from._internal_enable_router() != 0) {
    _this->_internal_set_enable_router(from._internal_enable_router());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Data::CopyFrom(const Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.address_book.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Data::IsInitialized() const {
  return true;
}

void Data::InternalSwap(Data* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.guid_, lhs_arena,
      &other->_impl_.guid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Data, _impl_.enable_router_)
      + sizeof(Data::_impl_.enable_router_)
      - PROTOBUF_FIELD_OFFSET(Data, _impl_.root_group_)>(
          reinterpret_cast<char*>(&_impl_.root_group_),
          reinterpret_cast<char*>(&other->_impl_.root_group_));
}

std::string Data::GetTypeName() const {
  return "proto.address_book.Data";
}


// ===================================================================

class File::_Internal {
 public:
};

File::File(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.address_book.File)
}
File::File(const File& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  File* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hashing_salt_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.encryption_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.hashing_salt_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hashing_salt_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hashing_salt().empty()) {
    _this->_impl_.hashing_salt_.Set(from._internal_hashing_salt(), 
      _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.encryption_type_ = from._impl_.encryption_type_;
  // @@protoc_insertion_point(copy_constructor:proto.address_book.File)
}

inline void File::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hashing_salt_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.encryption_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.hashing_salt_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hashing_salt_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

File::~File() {
  // @@protoc_insertion_point(destructor:proto.address_book.File)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void File::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hashing_salt_.Destroy();
  _impl_.data_.Destroy();
}

void File::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void File::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.address_book.File)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hashing_salt_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  _impl_.encryption_type_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* File::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.address_book.EncryptionType encryption_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_encryption_type(static_cast<::proto::address_book::EncryptionType>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes hashing_salt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_hashing_salt();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* File::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.address_book.File)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.address_book.EncryptionType encryption_type = 1;
  if (this->_internal_encryption_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_encryption_type(), target);
  }

  // bytes hashing_salt = 3;
  if (!this->_internal_hashing_salt().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_hashing_salt(), target);
  }

  // bytes data = 9;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.address_book.File)
  return target;
}

size_t File::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.address_book.File)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes hashing_salt = 3;
  if (!this->_internal_hashing_salt().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hashing_salt());
  }

  // bytes data = 9;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .proto.address_book.EncryptionType encryption_type = 1;
  if (this->_internal_encryption_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_encryption_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void File::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const File*>(
      &from));
}

void File::MergeFrom(const File& from) {
  File* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.address_book.File)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_hashing_salt().empty()) {
    _this->_internal_set_hashing_salt(from._internal_hashing_salt());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_encryption_type() != 0) {
    _this->_internal_set_encryption_type(from._internal_encryption_type());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void File::CopyFrom(const File& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.address_book.File)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool File::IsInitialized() const {
  return true;
}

void File::InternalSwap(File* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hashing_salt_, lhs_arena,
      &other->_impl_.hashing_salt_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  swap(_impl_.encryption_type_, other->_impl_.encryption_type_);
}

std::string File::GetTypeName() const {
  return "proto.address_book.File";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace address_book
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::address_book::SessionConfig*
Arena::CreateMaybeMessage< ::proto::address_book::SessionConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::address_book::SessionConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::address_book::InheritConfig*
Arena::CreateMaybeMessage< ::proto::address_book::InheritConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::address_book::InheritConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::address_book::Computer*
Arena::CreateMaybeMessage< ::proto::address_book::Computer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::address_book::Computer >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::address_book::ComputerGroupConfig*
Arena::CreateMaybeMessage< ::proto::address_book::ComputerGroupConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::address_book::ComputerGroupConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::address_book::ComputerGroup*
Arena::CreateMaybeMessage< ::proto::address_book::ComputerGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::address_book::ComputerGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::address_book::Router*
Arena::CreateMaybeMessage< ::proto::address_book::Router >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::address_book::Router >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::address_book::Data*
Arena::CreateMaybeMessage< ::proto::address_book::Data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::address_book::Data >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::address_book::File*
Arena::CreateMaybeMessage< ::proto::address_book::File >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::address_book::File >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
