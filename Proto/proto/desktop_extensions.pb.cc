// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: desktop_extensions.proto

#include "desktop_extensions.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace proto {
PROTOBUF_CONSTEXPR Resolution::Resolution(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.width_)*/0
  , /*decltype(_impl_.height_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResolutionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResolutionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResolutionDefaultTypeInternal() {}
  union {
    Resolution _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResolutionDefaultTypeInternal _Resolution_default_instance_;
PROTOBUF_CONSTEXPR Point::Point(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PointDefaultTypeInternal() {}
  union {
    Point _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PointDefaultTypeInternal _Point_default_instance_;
PROTOBUF_CONSTEXPR Screen::Screen(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.resolution_)*/nullptr
  , /*decltype(_impl_.dpi_)*/nullptr
  , /*decltype(_impl_.id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ScreenDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScreenDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScreenDefaultTypeInternal() {}
  union {
    Screen _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScreenDefaultTypeInternal _Screen_default_instance_;
PROTOBUF_CONSTEXPR ScreenList::ScreenList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.screen_)*/{}
  , /*decltype(_impl_.resolution_)*/{}
  , /*decltype(_impl_.current_screen_)*/int64_t{0}
  , /*decltype(_impl_.primary_screen_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ScreenListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScreenListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScreenListDefaultTypeInternal() {}
  union {
    ScreenList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScreenListDefaultTypeInternal _ScreenList_default_instance_;
PROTOBUF_CONSTEXPR PreferredSize::PreferredSize(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.width_)*/0
  , /*decltype(_impl_.height_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PreferredSizeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PreferredSizeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PreferredSizeDefaultTypeInternal() {}
  union {
    PreferredSize _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PreferredSizeDefaultTypeInternal _PreferredSize_default_instance_;
PROTOBUF_CONSTEXPR Pause::Pause(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.enable_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PauseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PauseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PauseDefaultTypeInternal() {}
  union {
    Pause _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PauseDefaultTypeInternal _Pause_default_instance_;
PROTOBUF_CONSTEXPR PowerControl::PowerControl(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.action_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PowerControlDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PowerControlDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PowerControlDefaultTypeInternal() {}
  union {
    PowerControl _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PowerControlDefaultTypeInternal _PowerControl_default_instance_;
PROTOBUF_CONSTEXPR VideoRecording::VideoRecording(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.action_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VideoRecordingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VideoRecordingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VideoRecordingDefaultTypeInternal() {}
  union {
    VideoRecording _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VideoRecordingDefaultTypeInternal _VideoRecording_default_instance_;
}  // namespace proto
namespace proto {
bool PowerControl_Action_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> PowerControl_Action_strings[6] = {};

static const char PowerControl_Action_names[] =
  "ACTION_LOCK"
  "ACTION_LOGOFF"
  "ACTION_REBOOT"
  "ACTION_REBOOT_SAFE_MODE"
  "ACTION_SHUTDOWN"
  "ACTION_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry PowerControl_Action_entries[] = {
  { {PowerControl_Action_names + 0, 11}, 4 },
  { {PowerControl_Action_names + 11, 13}, 3 },
  { {PowerControl_Action_names + 24, 13}, 2 },
  { {PowerControl_Action_names + 37, 23}, 5 },
  { {PowerControl_Action_names + 60, 15}, 1 },
  { {PowerControl_Action_names + 75, 14}, 0 },
};

static const int PowerControl_Action_entries_by_number[] = {
  5, // 0 -> ACTION_UNKNOWN
  4, // 1 -> ACTION_SHUTDOWN
  2, // 2 -> ACTION_REBOOT
  1, // 3 -> ACTION_LOGOFF
  0, // 4 -> ACTION_LOCK
  3, // 5 -> ACTION_REBOOT_SAFE_MODE
};

const std::string& PowerControl_Action_Name(
    PowerControl_Action value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          PowerControl_Action_entries,
          PowerControl_Action_entries_by_number,
          6, PowerControl_Action_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      PowerControl_Action_entries,
      PowerControl_Action_entries_by_number,
      6, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     PowerControl_Action_strings[idx].get();
}
bool PowerControl_Action_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PowerControl_Action* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      PowerControl_Action_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<PowerControl_Action>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PowerControl_Action PowerControl::ACTION_UNKNOWN;
constexpr PowerControl_Action PowerControl::ACTION_SHUTDOWN;
constexpr PowerControl_Action PowerControl::ACTION_REBOOT;
constexpr PowerControl_Action PowerControl::ACTION_LOGOFF;
constexpr PowerControl_Action PowerControl::ACTION_LOCK;
constexpr PowerControl_Action PowerControl::ACTION_REBOOT_SAFE_MODE;
constexpr PowerControl_Action PowerControl::Action_MIN;
constexpr PowerControl_Action PowerControl::Action_MAX;
constexpr int PowerControl::Action_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool VideoRecording_Action_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> VideoRecording_Action_strings[3] = {};

static const char VideoRecording_Action_names[] =
  "ACTION_STARTED"
  "ACTION_STOPPED"
  "ACTION_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry VideoRecording_Action_entries[] = {
  { {VideoRecording_Action_names + 0, 14}, 1 },
  { {VideoRecording_Action_names + 14, 14}, 2 },
  { {VideoRecording_Action_names + 28, 14}, 0 },
};

static const int VideoRecording_Action_entries_by_number[] = {
  2, // 0 -> ACTION_UNKNOWN
  0, // 1 -> ACTION_STARTED
  1, // 2 -> ACTION_STOPPED
};

const std::string& VideoRecording_Action_Name(
    VideoRecording_Action value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          VideoRecording_Action_entries,
          VideoRecording_Action_entries_by_number,
          3, VideoRecording_Action_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      VideoRecording_Action_entries,
      VideoRecording_Action_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     VideoRecording_Action_strings[idx].get();
}
bool VideoRecording_Action_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, VideoRecording_Action* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      VideoRecording_Action_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<VideoRecording_Action>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr VideoRecording_Action VideoRecording::ACTION_UNKNOWN;
constexpr VideoRecording_Action VideoRecording::ACTION_STARTED;
constexpr VideoRecording_Action VideoRecording::ACTION_STOPPED;
constexpr VideoRecording_Action VideoRecording::Action_MIN;
constexpr VideoRecording_Action VideoRecording::Action_MAX;
constexpr int VideoRecording::Action_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class Resolution::_Internal {
 public:
};

Resolution::Resolution(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Resolution)
}
Resolution::Resolution(const Resolution& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Resolution* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.width_){}
    , decltype(_impl_.height_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.width_, &from._impl_.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.height_) -
    reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.height_));
  // @@protoc_insertion_point(copy_constructor:proto.Resolution)
}

inline void Resolution::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.width_){0}
    , decltype(_impl_.height_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Resolution::~Resolution() {
  // @@protoc_insertion_point(destructor:proto.Resolution)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Resolution::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Resolution::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Resolution::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Resolution)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.height_) -
      reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.height_));
  _internal_metadata_.Clear<std::string>();
}

const char* Resolution::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Resolution::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Resolution)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 width = 1;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_width(), target);
  }

  // int32 height = 2;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Resolution)
  return target;
}

size_t Resolution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Resolution)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 width = 1;
  if (this->_internal_width() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_width());
  }

  // int32 height = 2;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Resolution::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Resolution*>(
      &from));
}

void Resolution::MergeFrom(const Resolution& from) {
  Resolution* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Resolution)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_width() != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Resolution::CopyFrom(const Resolution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Resolution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Resolution::IsInitialized() const {
  return true;
}

void Resolution::InternalSwap(Resolution* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Resolution, _impl_.height_)
      + sizeof(Resolution::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(Resolution, _impl_.width_)>(
          reinterpret_cast<char*>(&_impl_.width_),
          reinterpret_cast<char*>(&other->_impl_.width_));
}

std::string Resolution::GetTypeName() const {
  return "proto.Resolution";
}


// ===================================================================

class Point::_Internal {
 public:
};

Point::Point(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Point)
}
Point::Point(const Point& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Point* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:proto.Point)
}

inline void Point::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:proto.Point)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Point::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Point::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Point)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<std::string>();
}

const char* Point::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Point::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Point)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Point)
  return target;
}

size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Point)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Point*>(
      &from));
}

void Point::MergeFrom(const Point& from) {
  Point* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Point)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  return true;
}

void Point::InternalSwap(Point* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point, _impl_.y_)
      + sizeof(Point::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(Point, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

std::string Point::GetTypeName() const {
  return "proto.Point";
}


// ===================================================================

class Screen::_Internal {
 public:
  static const ::proto::Point& position(const Screen* msg);
  static const ::proto::Resolution& resolution(const Screen* msg);
  static const ::proto::Point& dpi(const Screen* msg);
};

const ::proto::Point&
Screen::_Internal::position(const Screen* msg) {
  return *msg->_impl_.position_;
}
const ::proto::Resolution&
Screen::_Internal::resolution(const Screen* msg) {
  return *msg->_impl_.resolution_;
}
const ::proto::Point&
Screen::_Internal::dpi(const Screen* msg) {
  return *msg->_impl_.dpi_;
}
Screen::Screen(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Screen)
}
Screen::Screen(const Screen& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Screen* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.title_){}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.resolution_){nullptr}
    , decltype(_impl_.dpi_){nullptr}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_position()) {
    _this->_impl_.position_ = new ::proto::Point(*from._impl_.position_);
  }
  if (from._internal_has_resolution()) {
    _this->_impl_.resolution_ = new ::proto::Resolution(*from._impl_.resolution_);
  }
  if (from._internal_has_dpi()) {
    _this->_impl_.dpi_ = new ::proto::Point(*from._impl_.dpi_);
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:proto.Screen)
}

inline void Screen::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.title_){}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.resolution_){nullptr}
    , decltype(_impl_.dpi_){nullptr}
    , decltype(_impl_.id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Screen::~Screen() {
  // @@protoc_insertion_point(destructor:proto.Screen)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Screen::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.title_.Destroy();
  if (this != internal_default_instance()) delete _impl_.position_;
  if (this != internal_default_instance()) delete _impl_.resolution_;
  if (this != internal_default_instance()) delete _impl_.dpi_;
}

void Screen::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Screen::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Screen)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.title_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.resolution_ != nullptr) {
    delete _impl_.resolution_;
  }
  _impl_.resolution_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.dpi_ != nullptr) {
    delete _impl_.dpi_;
  }
  _impl_.dpi_ = nullptr;
  _impl_.id_ = int64_t{0};
  _internal_metadata_.Clear<std::string>();
}

const char* Screen::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // .proto.Point position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Resolution resolution = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_resolution(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.Point dpi = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_dpi(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Screen::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Screen)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // string title = 2;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.Screen.title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  // .proto.Point position = 3;
  if (this->_internal_has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // .proto.Resolution resolution = 4;
  if (this->_internal_has_resolution()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::resolution(this),
        _Internal::resolution(this).GetCachedSize(), target, stream);
  }

  // .proto.Point dpi = 5;
  if (this->_internal_has_dpi()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::dpi(this),
        _Internal::dpi(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Screen)
  return target;
}

size_t Screen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Screen)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string title = 2;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // .proto.Point position = 3;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.position_);
  }

  // .proto.Resolution resolution = 4;
  if (this->_internal_has_resolution()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.resolution_);
  }

  // .proto.Point dpi = 5;
  if (this->_internal_has_dpi()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dpi_);
  }

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Screen::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Screen*>(
      &from));
}

void Screen::MergeFrom(const Screen& from) {
  Screen* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Screen)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (from._internal_has_position()) {
    _this->_internal_mutable_position()->::proto::Point::MergeFrom(
        from._internal_position());
  }
  if (from._internal_has_resolution()) {
    _this->_internal_mutable_resolution()->::proto::Resolution::MergeFrom(
        from._internal_resolution());
  }
  if (from._internal_has_dpi()) {
    _this->_internal_mutable_dpi()->::proto::Point::MergeFrom(
        from._internal_dpi());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Screen::CopyFrom(const Screen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Screen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Screen::IsInitialized() const {
  return true;
}

void Screen::InternalSwap(Screen* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Screen, _impl_.id_)
      + sizeof(Screen::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(Screen, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

std::string Screen::GetTypeName() const {
  return "proto.Screen";
}


// ===================================================================

class ScreenList::_Internal {
 public:
};

ScreenList::ScreenList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.ScreenList)
}
ScreenList::ScreenList(const ScreenList& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ScreenList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.screen_){from._impl_.screen_}
    , decltype(_impl_.resolution_){from._impl_.resolution_}
    , decltype(_impl_.current_screen_){}
    , decltype(_impl_.primary_screen_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.current_screen_, &from._impl_.current_screen_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.primary_screen_) -
    reinterpret_cast<char*>(&_impl_.current_screen_)) + sizeof(_impl_.primary_screen_));
  // @@protoc_insertion_point(copy_constructor:proto.ScreenList)
}

inline void ScreenList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.screen_){arena}
    , decltype(_impl_.resolution_){arena}
    , decltype(_impl_.current_screen_){int64_t{0}}
    , decltype(_impl_.primary_screen_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ScreenList::~ScreenList() {
  // @@protoc_insertion_point(destructor:proto.ScreenList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScreenList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.screen_.~RepeatedPtrField();
  _impl_.resolution_.~RepeatedPtrField();
}

void ScreenList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScreenList::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ScreenList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.screen_.Clear();
  _impl_.resolution_.Clear();
  ::memset(&_impl_.current_screen_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.primary_screen_) -
      reinterpret_cast<char*>(&_impl_.current_screen_)) + sizeof(_impl_.primary_screen_));
  _internal_metadata_.Clear<std::string>();
}

const char* ScreenList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .proto.Screen screen = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_screen(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 current_screen = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.current_screen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 primary_screen = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.primary_screen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .proto.Resolution resolution = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_resolution(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ScreenList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ScreenList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.Screen screen = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_screen_size()); i < n; i++) {
    const auto& repfield = this->_internal_screen(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 current_screen = 2;
  if (this->_internal_current_screen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_current_screen(), target);
  }

  // int64 primary_screen = 3;
  if (this->_internal_primary_screen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_primary_screen(), target);
  }

  // repeated .proto.Resolution resolution = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_resolution_size()); i < n; i++) {
    const auto& repfield = this->_internal_resolution(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ScreenList)
  return target;
}

size_t ScreenList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ScreenList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.Screen screen = 1;
  total_size += 1UL * this->_internal_screen_size();
  for (const auto& msg : this->_impl_.screen_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .proto.Resolution resolution = 4;
  total_size += 1UL * this->_internal_resolution_size();
  for (const auto& msg : this->_impl_.resolution_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 current_screen = 2;
  if (this->_internal_current_screen() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_current_screen());
  }

  // int64 primary_screen = 3;
  if (this->_internal_primary_screen() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_primary_screen());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScreenList::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ScreenList*>(
      &from));
}

void ScreenList::MergeFrom(const ScreenList& from) {
  ScreenList* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.ScreenList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.screen_.MergeFrom(from._impl_.screen_);
  _this->_impl_.resolution_.MergeFrom(from._impl_.resolution_);
  if (from._internal_current_screen() != 0) {
    _this->_internal_set_current_screen(from._internal_current_screen());
  }
  if (from._internal_primary_screen() != 0) {
    _this->_internal_set_primary_screen(from._internal_primary_screen());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ScreenList::CopyFrom(const ScreenList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ScreenList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScreenList::IsInitialized() const {
  return true;
}

void ScreenList::InternalSwap(ScreenList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.screen_.InternalSwap(&other->_impl_.screen_);
  _impl_.resolution_.InternalSwap(&other->_impl_.resolution_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScreenList, _impl_.primary_screen_)
      + sizeof(ScreenList::_impl_.primary_screen_)
      - PROTOBUF_FIELD_OFFSET(ScreenList, _impl_.current_screen_)>(
          reinterpret_cast<char*>(&_impl_.current_screen_),
          reinterpret_cast<char*>(&other->_impl_.current_screen_));
}

std::string ScreenList::GetTypeName() const {
  return "proto.ScreenList";
}


// ===================================================================

class PreferredSize::_Internal {
 public:
};

PreferredSize::PreferredSize(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.PreferredSize)
}
PreferredSize::PreferredSize(const PreferredSize& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  PreferredSize* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.width_){}
    , decltype(_impl_.height_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.width_, &from._impl_.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.height_) -
    reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.height_));
  // @@protoc_insertion_point(copy_constructor:proto.PreferredSize)
}

inline void PreferredSize::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.width_){0}
    , decltype(_impl_.height_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PreferredSize::~PreferredSize() {
  // @@protoc_insertion_point(destructor:proto.PreferredSize)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PreferredSize::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PreferredSize::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PreferredSize::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PreferredSize)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.height_) -
      reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.height_));
  _internal_metadata_.Clear<std::string>();
}

const char* PreferredSize::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PreferredSize::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.PreferredSize)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 width = 1;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_width(), target);
  }

  // int32 height = 2;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.PreferredSize)
  return target;
}

size_t PreferredSize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PreferredSize)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 width = 1;
  if (this->_internal_width() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_width());
  }

  // int32 height = 2;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PreferredSize::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PreferredSize*>(
      &from));
}

void PreferredSize::MergeFrom(const PreferredSize& from) {
  PreferredSize* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.PreferredSize)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_width() != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PreferredSize::CopyFrom(const PreferredSize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PreferredSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreferredSize::IsInitialized() const {
  return true;
}

void PreferredSize::InternalSwap(PreferredSize* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PreferredSize, _impl_.height_)
      + sizeof(PreferredSize::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(PreferredSize, _impl_.width_)>(
          reinterpret_cast<char*>(&_impl_.width_),
          reinterpret_cast<char*>(&other->_impl_.width_));
}

std::string PreferredSize::GetTypeName() const {
  return "proto.PreferredSize";
}


// ===================================================================

class Pause::_Internal {
 public:
};

Pause::Pause(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Pause)
}
Pause::Pause(const Pause& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Pause* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.enable_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _this->_impl_.enable_ = from._impl_.enable_;
  // @@protoc_insertion_point(copy_constructor:proto.Pause)
}

inline void Pause::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.enable_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Pause::~Pause() {
  // @@protoc_insertion_point(destructor:proto.Pause)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Pause::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Pause::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Pause::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Pause)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.enable_ = false;
  _internal_metadata_.Clear<std::string>();
}

const char* Pause::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool enable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Pause::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Pause)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->_internal_enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_enable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Pause)
  return target;
}

size_t Pause::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Pause)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->_internal_enable() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pause::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Pause*>(
      &from));
}

void Pause::MergeFrom(const Pause& from) {
  Pause* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Pause)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_enable() != 0) {
    _this->_internal_set_enable(from._internal_enable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Pause::CopyFrom(const Pause& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Pause)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pause::IsInitialized() const {
  return true;
}

void Pause::InternalSwap(Pause* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.enable_, other->_impl_.enable_);
}

std::string Pause::GetTypeName() const {
  return "proto.Pause";
}


// ===================================================================

class PowerControl::_Internal {
 public:
};

PowerControl::PowerControl(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.PowerControl)
}
PowerControl::PowerControl(const PowerControl& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  PowerControl* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.action_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _this->_impl_.action_ = from._impl_.action_;
  // @@protoc_insertion_point(copy_constructor:proto.PowerControl)
}

inline void PowerControl::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.action_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PowerControl::~PowerControl() {
  // @@protoc_insertion_point(destructor:proto.PowerControl)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PowerControl::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PowerControl::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PowerControl::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PowerControl)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.action_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* PowerControl::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.PowerControl.Action action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_action(static_cast<::proto::PowerControl_Action>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PowerControl::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.PowerControl)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.PowerControl.Action action = 1;
  if (this->_internal_action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.PowerControl)
  return target;
}

size_t PowerControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PowerControl)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.PowerControl.Action action = 1;
  if (this->_internal_action() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_action());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PowerControl::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PowerControl*>(
      &from));
}

void PowerControl::MergeFrom(const PowerControl& from) {
  PowerControl* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.PowerControl)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_action() != 0) {
    _this->_internal_set_action(from._internal_action());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PowerControl::CopyFrom(const PowerControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PowerControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PowerControl::IsInitialized() const {
  return true;
}

void PowerControl::InternalSwap(PowerControl* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.action_, other->_impl_.action_);
}

std::string PowerControl::GetTypeName() const {
  return "proto.PowerControl";
}


// ===================================================================

class VideoRecording::_Internal {
 public:
};

VideoRecording::VideoRecording(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.VideoRecording)
}
VideoRecording::VideoRecording(const VideoRecording& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  VideoRecording* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.action_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _this->_impl_.action_ = from._impl_.action_;
  // @@protoc_insertion_point(copy_constructor:proto.VideoRecording)
}

inline void VideoRecording::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.action_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VideoRecording::~VideoRecording() {
  // @@protoc_insertion_point(destructor:proto.VideoRecording)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VideoRecording::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VideoRecording::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VideoRecording::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.VideoRecording)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.action_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* VideoRecording::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.VideoRecording.Action action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_action(static_cast<::proto::VideoRecording_Action>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VideoRecording::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.VideoRecording)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.VideoRecording.Action action = 1;
  if (this->_internal_action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.VideoRecording)
  return target;
}

size_t VideoRecording::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.VideoRecording)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.VideoRecording.Action action = 1;
  if (this->_internal_action() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_action());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VideoRecording::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const VideoRecording*>(
      &from));
}

void VideoRecording::MergeFrom(const VideoRecording& from) {
  VideoRecording* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.VideoRecording)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_action() != 0) {
    _this->_internal_set_action(from._internal_action());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void VideoRecording::CopyFrom(const VideoRecording& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.VideoRecording)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoRecording::IsInitialized() const {
  return true;
}

void VideoRecording::InternalSwap(VideoRecording* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.action_, other->_impl_.action_);
}

std::string VideoRecording::GetTypeName() const {
  return "proto.VideoRecording";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::Resolution*
Arena::CreateMaybeMessage< ::proto::Resolution >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Resolution >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Point*
Arena::CreateMaybeMessage< ::proto::Point >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Point >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Screen*
Arena::CreateMaybeMessage< ::proto::Screen >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Screen >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::ScreenList*
Arena::CreateMaybeMessage< ::proto::ScreenList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::ScreenList >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::PreferredSize*
Arena::CreateMaybeMessage< ::proto::PreferredSize >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::PreferredSize >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::Pause*
Arena::CreateMaybeMessage< ::proto::Pause >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Pause >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::PowerControl*
Arena::CreateMaybeMessage< ::proto::PowerControl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::PowerControl >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::VideoRecording*
Arena::CreateMaybeMessage< ::proto::VideoRecording >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::VideoRecording >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
