// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: text_chat.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_text_5fchat_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_text_5fchat_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_text_5fchat_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_text_5fchat_2eproto {
  static const uint32_t offsets[];
};
namespace proto {
class TextChat;
struct TextChatDefaultTypeInternal;
extern TextChatDefaultTypeInternal _TextChat_default_instance_;
class TextChatMessage;
struct TextChatMessageDefaultTypeInternal;
extern TextChatMessageDefaultTypeInternal _TextChatMessage_default_instance_;
class TextChatStatus;
struct TextChatStatusDefaultTypeInternal;
extern TextChatStatusDefaultTypeInternal _TextChatStatus_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::TextChat* Arena::CreateMaybeMessage<::proto::TextChat>(Arena*);
template<> ::proto::TextChatMessage* Arena::CreateMaybeMessage<::proto::TextChatMessage>(Arena*);
template<> ::proto::TextChatStatus* Arena::CreateMaybeMessage<::proto::TextChatStatus>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

enum TextChatStatus_Status : int {
  TextChatStatus_Status_STATUS_UNKNOWN = 0,
  TextChatStatus_Status_STATUS_STARTED = 1,
  TextChatStatus_Status_STATUS_STOPPED = 2,
  TextChatStatus_Status_STATUS_TYPING = 3,
  TextChatStatus_Status_STATUS_USER_DISCONNECTED = 4,
  TextChatStatus_Status_STATUS_USER_CONNECTED = 5,
  TextChatStatus_Status_TextChatStatus_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TextChatStatus_Status_TextChatStatus_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TextChatStatus_Status_IsValid(int value);
constexpr TextChatStatus_Status TextChatStatus_Status_Status_MIN = TextChatStatus_Status_STATUS_UNKNOWN;
constexpr TextChatStatus_Status TextChatStatus_Status_Status_MAX = TextChatStatus_Status_STATUS_USER_CONNECTED;
constexpr int TextChatStatus_Status_Status_ARRAYSIZE = TextChatStatus_Status_Status_MAX + 1;

const std::string& TextChatStatus_Status_Name(TextChatStatus_Status value);
template<typename T>
inline const std::string& TextChatStatus_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TextChatStatus_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TextChatStatus_Status_Name.");
  return TextChatStatus_Status_Name(static_cast<TextChatStatus_Status>(enum_t_value));
}
bool TextChatStatus_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TextChatStatus_Status* value);
// ===================================================================

class TextChatStatus final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:proto.TextChatStatus) */ {
 public:
  inline TextChatStatus() : TextChatStatus(nullptr) {}
  ~TextChatStatus() override;
  explicit PROTOBUF_CONSTEXPR TextChatStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TextChatStatus(const TextChatStatus& from);
  TextChatStatus(TextChatStatus&& from) noexcept
    : TextChatStatus() {
    *this = ::std::move(from);
  }

  inline TextChatStatus& operator=(const TextChatStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline TextChatStatus& operator=(TextChatStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const TextChatStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const TextChatStatus* internal_default_instance() {
    return reinterpret_cast<const TextChatStatus*>(
               &_TextChatStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TextChatStatus& a, TextChatStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(TextChatStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TextChatStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TextChatStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TextChatStatus>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const TextChatStatus& from);
  void MergeFrom(const TextChatStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TextChatStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.TextChatStatus";
  }
  protected:
  explicit TextChatStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef TextChatStatus_Status Status;
  static constexpr Status STATUS_UNKNOWN =
    TextChatStatus_Status_STATUS_UNKNOWN;
  static constexpr Status STATUS_STARTED =
    TextChatStatus_Status_STATUS_STARTED;
  static constexpr Status STATUS_STOPPED =
    TextChatStatus_Status_STATUS_STOPPED;
  static constexpr Status STATUS_TYPING =
    TextChatStatus_Status_STATUS_TYPING;
  static constexpr Status STATUS_USER_DISCONNECTED =
    TextChatStatus_Status_STATUS_USER_DISCONNECTED;
  static constexpr Status STATUS_USER_CONNECTED =
    TextChatStatus_Status_STATUS_USER_CONNECTED;
  static inline bool Status_IsValid(int value) {
    return TextChatStatus_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    TextChatStatus_Status_Status_MIN;
  static constexpr Status Status_MAX =
    TextChatStatus_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    TextChatStatus_Status_Status_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return TextChatStatus_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return TextChatStatus_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFieldNumber = 2,
    kTargetFieldNumber = 3,
    kTimestampFieldNumber = 1,
    kStatusFieldNumber = 4,
  };
  // string source = 2;
  void clear_source();
  const std::string& source() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_source(ArgT0&& arg0, ArgT... args);
  std::string* mutable_source();
  PROTOBUF_NODISCARD std::string* release_source();
  void set_allocated_source(std::string* source);
  private:
  const std::string& _internal_source() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source(const std::string& value);
  std::string* _internal_mutable_source();
  public:

  // string target = 3;
  void clear_target();
  const std::string& target() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_target(ArgT0&& arg0, ArgT... args);
  std::string* mutable_target();
  PROTOBUF_NODISCARD std::string* release_target();
  void set_allocated_target(std::string* target);
  private:
  const std::string& _internal_target() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target(const std::string& value);
  std::string* _internal_mutable_target();
  public:

  // int64 timestamp = 1;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // .proto.TextChatStatus.Status status = 4;
  void clear_status();
  ::proto::TextChatStatus_Status status() const;
  void set_status(::proto::TextChatStatus_Status value);
  private:
  ::proto::TextChatStatus_Status _internal_status() const;
  void _internal_set_status(::proto::TextChatStatus_Status value);
  public:

  // @@protoc_insertion_point(class_scope:proto.TextChatStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_;
    int64_t timestamp_;
    int status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_text_5fchat_2eproto;
};
// -------------------------------------------------------------------

class TextChatMessage final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:proto.TextChatMessage) */ {
 public:
  inline TextChatMessage() : TextChatMessage(nullptr) {}
  ~TextChatMessage() override;
  explicit PROTOBUF_CONSTEXPR TextChatMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TextChatMessage(const TextChatMessage& from);
  TextChatMessage(TextChatMessage&& from) noexcept
    : TextChatMessage() {
    *this = ::std::move(from);
  }

  inline TextChatMessage& operator=(const TextChatMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TextChatMessage& operator=(TextChatMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const TextChatMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const TextChatMessage* internal_default_instance() {
    return reinterpret_cast<const TextChatMessage*>(
               &_TextChatMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TextChatMessage& a, TextChatMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TextChatMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TextChatMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TextChatMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TextChatMessage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const TextChatMessage& from);
  void MergeFrom(const TextChatMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TextChatMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.TextChatMessage";
  }
  protected:
  explicit TextChatMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFieldNumber = 2,
    kTargetFieldNumber = 3,
    kTextFieldNumber = 4,
    kTimestampFieldNumber = 1,
  };
  // string source = 2;
  void clear_source();
  const std::string& source() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_source(ArgT0&& arg0, ArgT... args);
  std::string* mutable_source();
  PROTOBUF_NODISCARD std::string* release_source();
  void set_allocated_source(std::string* source);
  private:
  const std::string& _internal_source() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source(const std::string& value);
  std::string* _internal_mutable_source();
  public:

  // string target = 3;
  void clear_target();
  const std::string& target() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_target(ArgT0&& arg0, ArgT... args);
  std::string* mutable_target();
  PROTOBUF_NODISCARD std::string* release_target();
  void set_allocated_target(std::string* target);
  private:
  const std::string& _internal_target() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target(const std::string& value);
  std::string* _internal_mutable_target();
  public:

  // string text = 4;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // int64 timestamp = 1;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto.TextChatMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
    int64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_text_5fchat_2eproto;
};
// -------------------------------------------------------------------

class TextChat final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:proto.TextChat) */ {
 public:
  inline TextChat() : TextChat(nullptr) {}
  ~TextChat() override;
  explicit PROTOBUF_CONSTEXPR TextChat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TextChat(const TextChat& from);
  TextChat(TextChat&& from) noexcept
    : TextChat() {
    *this = ::std::move(from);
  }

  inline TextChat& operator=(const TextChat& from) {
    CopyFrom(from);
    return *this;
  }
  inline TextChat& operator=(TextChat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const TextChat& default_instance() {
    return *internal_default_instance();
  }
  static inline const TextChat* internal_default_instance() {
    return reinterpret_cast<const TextChat*>(
               &_TextChat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TextChat& a, TextChat& b) {
    a.Swap(&b);
  }
  inline void Swap(TextChat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TextChat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TextChat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TextChat>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const TextChat& from);
  void MergeFrom(const TextChat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TextChat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.TextChat";
  }
  protected:
  explicit TextChat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatStatusFieldNumber = 1,
    kChatMessageFieldNumber = 2,
  };
  // .proto.TextChatStatus chat_status = 1;
  bool has_chat_status() const;
  private:
  bool _internal_has_chat_status() const;
  public:
  void clear_chat_status();
  const ::proto::TextChatStatus& chat_status() const;
  PROTOBUF_NODISCARD ::proto::TextChatStatus* release_chat_status();
  ::proto::TextChatStatus* mutable_chat_status();
  void set_allocated_chat_status(::proto::TextChatStatus* chat_status);
  private:
  const ::proto::TextChatStatus& _internal_chat_status() const;
  ::proto::TextChatStatus* _internal_mutable_chat_status();
  public:
  void unsafe_arena_set_allocated_chat_status(
      ::proto::TextChatStatus* chat_status);
  ::proto::TextChatStatus* unsafe_arena_release_chat_status();

  // .proto.TextChatMessage chat_message = 2;
  bool has_chat_message() const;
  private:
  bool _internal_has_chat_message() const;
  public:
  void clear_chat_message();
  const ::proto::TextChatMessage& chat_message() const;
  PROTOBUF_NODISCARD ::proto::TextChatMessage* release_chat_message();
  ::proto::TextChatMessage* mutable_chat_message();
  void set_allocated_chat_message(::proto::TextChatMessage* chat_message);
  private:
  const ::proto::TextChatMessage& _internal_chat_message() const;
  ::proto::TextChatMessage* _internal_mutable_chat_message();
  public:
  void unsafe_arena_set_allocated_chat_message(
      ::proto::TextChatMessage* chat_message);
  ::proto::TextChatMessage* unsafe_arena_release_chat_message();

  // @@protoc_insertion_point(class_scope:proto.TextChat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::TextChatStatus* chat_status_;
    ::proto::TextChatMessage* chat_message_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_text_5fchat_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TextChatStatus

// int64 timestamp = 1;
inline void TextChatStatus::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t TextChatStatus::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t TextChatStatus::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.TextChatStatus.timestamp)
  return _internal_timestamp();
}
inline void TextChatStatus::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void TextChatStatus::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:proto.TextChatStatus.timestamp)
}

// string source = 2;
inline void TextChatStatus::clear_source() {
  _impl_.source_.ClearToEmpty();
}
inline const std::string& TextChatStatus::source() const {
  // @@protoc_insertion_point(field_get:proto.TextChatStatus.source)
  return _internal_source();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TextChatStatus::set_source(ArgT0&& arg0, ArgT... args) {
 
 _impl_.source_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.TextChatStatus.source)
}
inline std::string* TextChatStatus::mutable_source() {
  std::string* _s = _internal_mutable_source();
  // @@protoc_insertion_point(field_mutable:proto.TextChatStatus.source)
  return _s;
}
inline const std::string& TextChatStatus::_internal_source() const {
  return _impl_.source_.Get();
}
inline void TextChatStatus::_internal_set_source(const std::string& value) {
  
  _impl_.source_.Set(value, GetArenaForAllocation());
}
inline std::string* TextChatStatus::_internal_mutable_source() {
  
  return _impl_.source_.Mutable(GetArenaForAllocation());
}
inline std::string* TextChatStatus::release_source() {
  // @@protoc_insertion_point(field_release:proto.TextChatStatus.source)
  return _impl_.source_.Release();
}
inline void TextChatStatus::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    
  } else {
    
  }
  _impl_.source_.SetAllocated(source, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.source_.IsDefault()) {
    _impl_.source_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.TextChatStatus.source)
}

// string target = 3;
inline void TextChatStatus::clear_target() {
  _impl_.target_.ClearToEmpty();
}
inline const std::string& TextChatStatus::target() const {
  // @@protoc_insertion_point(field_get:proto.TextChatStatus.target)
  return _internal_target();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TextChatStatus::set_target(ArgT0&& arg0, ArgT... args) {
 
 _impl_.target_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.TextChatStatus.target)
}
inline std::string* TextChatStatus::mutable_target() {
  std::string* _s = _internal_mutable_target();
  // @@protoc_insertion_point(field_mutable:proto.TextChatStatus.target)
  return _s;
}
inline const std::string& TextChatStatus::_internal_target() const {
  return _impl_.target_.Get();
}
inline void TextChatStatus::_internal_set_target(const std::string& value) {
  
  _impl_.target_.Set(value, GetArenaForAllocation());
}
inline std::string* TextChatStatus::_internal_mutable_target() {
  
  return _impl_.target_.Mutable(GetArenaForAllocation());
}
inline std::string* TextChatStatus::release_target() {
  // @@protoc_insertion_point(field_release:proto.TextChatStatus.target)
  return _impl_.target_.Release();
}
inline void TextChatStatus::set_allocated_target(std::string* target) {
  if (target != nullptr) {
    
  } else {
    
  }
  _impl_.target_.SetAllocated(target, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.target_.IsDefault()) {
    _impl_.target_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.TextChatStatus.target)
}

// .proto.TextChatStatus.Status status = 4;
inline void TextChatStatus::clear_status() {
  _impl_.status_ = 0;
}
inline ::proto::TextChatStatus_Status TextChatStatus::_internal_status() const {
  return static_cast< ::proto::TextChatStatus_Status >(_impl_.status_);
}
inline ::proto::TextChatStatus_Status TextChatStatus::status() const {
  // @@protoc_insertion_point(field_get:proto.TextChatStatus.status)
  return _internal_status();
}
inline void TextChatStatus::_internal_set_status(::proto::TextChatStatus_Status value) {
  
  _impl_.status_ = value;
}
inline void TextChatStatus::set_status(::proto::TextChatStatus_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:proto.TextChatStatus.status)
}

// -------------------------------------------------------------------

// TextChatMessage

// int64 timestamp = 1;
inline void TextChatMessage::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t TextChatMessage::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t TextChatMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.TextChatMessage.timestamp)
  return _internal_timestamp();
}
inline void TextChatMessage::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void TextChatMessage::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:proto.TextChatMessage.timestamp)
}

// string source = 2;
inline void TextChatMessage::clear_source() {
  _impl_.source_.ClearToEmpty();
}
inline const std::string& TextChatMessage::source() const {
  // @@protoc_insertion_point(field_get:proto.TextChatMessage.source)
  return _internal_source();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TextChatMessage::set_source(ArgT0&& arg0, ArgT... args) {
 
 _impl_.source_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.TextChatMessage.source)
}
inline std::string* TextChatMessage::mutable_source() {
  std::string* _s = _internal_mutable_source();
  // @@protoc_insertion_point(field_mutable:proto.TextChatMessage.source)
  return _s;
}
inline const std::string& TextChatMessage::_internal_source() const {
  return _impl_.source_.Get();
}
inline void TextChatMessage::_internal_set_source(const std::string& value) {
  
  _impl_.source_.Set(value, GetArenaForAllocation());
}
inline std::string* TextChatMessage::_internal_mutable_source() {
  
  return _impl_.source_.Mutable(GetArenaForAllocation());
}
inline std::string* TextChatMessage::release_source() {
  // @@protoc_insertion_point(field_release:proto.TextChatMessage.source)
  return _impl_.source_.Release();
}
inline void TextChatMessage::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    
  } else {
    
  }
  _impl_.source_.SetAllocated(source, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.source_.IsDefault()) {
    _impl_.source_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.TextChatMessage.source)
}

// string target = 3;
inline void TextChatMessage::clear_target() {
  _impl_.target_.ClearToEmpty();
}
inline const std::string& TextChatMessage::target() const {
  // @@protoc_insertion_point(field_get:proto.TextChatMessage.target)
  return _internal_target();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TextChatMessage::set_target(ArgT0&& arg0, ArgT... args) {
 
 _impl_.target_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.TextChatMessage.target)
}
inline std::string* TextChatMessage::mutable_target() {
  std::string* _s = _internal_mutable_target();
  // @@protoc_insertion_point(field_mutable:proto.TextChatMessage.target)
  return _s;
}
inline const std::string& TextChatMessage::_internal_target() const {
  return _impl_.target_.Get();
}
inline void TextChatMessage::_internal_set_target(const std::string& value) {
  
  _impl_.target_.Set(value, GetArenaForAllocation());
}
inline std::string* TextChatMessage::_internal_mutable_target() {
  
  return _impl_.target_.Mutable(GetArenaForAllocation());
}
inline std::string* TextChatMessage::release_target() {
  // @@protoc_insertion_point(field_release:proto.TextChatMessage.target)
  return _impl_.target_.Release();
}
inline void TextChatMessage::set_allocated_target(std::string* target) {
  if (target != nullptr) {
    
  } else {
    
  }
  _impl_.target_.SetAllocated(target, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.target_.IsDefault()) {
    _impl_.target_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.TextChatMessage.target)
}

// string text = 4;
inline void TextChatMessage::clear_text() {
  _impl_.text_.ClearToEmpty();
}
inline const std::string& TextChatMessage::text() const {
  // @@protoc_insertion_point(field_get:proto.TextChatMessage.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TextChatMessage::set_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.TextChatMessage.text)
}
inline std::string* TextChatMessage::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:proto.TextChatMessage.text)
  return _s;
}
inline const std::string& TextChatMessage::_internal_text() const {
  return _impl_.text_.Get();
}
inline void TextChatMessage::_internal_set_text(const std::string& value) {
  
  _impl_.text_.Set(value, GetArenaForAllocation());
}
inline std::string* TextChatMessage::_internal_mutable_text() {
  
  return _impl_.text_.Mutable(GetArenaForAllocation());
}
inline std::string* TextChatMessage::release_text() {
  // @@protoc_insertion_point(field_release:proto.TextChatMessage.text)
  return _impl_.text_.Release();
}
inline void TextChatMessage::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  _impl_.text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.text_.IsDefault()) {
    _impl_.text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.TextChatMessage.text)
}

// -------------------------------------------------------------------

// TextChat

// .proto.TextChatStatus chat_status = 1;
inline bool TextChat::_internal_has_chat_status() const {
  return this != internal_default_instance() && _impl_.chat_status_ != nullptr;
}
inline bool TextChat::has_chat_status() const {
  return _internal_has_chat_status();
}
inline void TextChat::clear_chat_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.chat_status_ != nullptr) {
    delete _impl_.chat_status_;
  }
  _impl_.chat_status_ = nullptr;
}
inline const ::proto::TextChatStatus& TextChat::_internal_chat_status() const {
  const ::proto::TextChatStatus* p = _impl_.chat_status_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::TextChatStatus&>(
      ::proto::_TextChatStatus_default_instance_);
}
inline const ::proto::TextChatStatus& TextChat::chat_status() const {
  // @@protoc_insertion_point(field_get:proto.TextChat.chat_status)
  return _internal_chat_status();
}
inline void TextChat::unsafe_arena_set_allocated_chat_status(
    ::proto::TextChatStatus* chat_status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chat_status_);
  }
  _impl_.chat_status_ = chat_status;
  if (chat_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.TextChat.chat_status)
}
inline ::proto::TextChatStatus* TextChat::release_chat_status() {
  
  ::proto::TextChatStatus* temp = _impl_.chat_status_;
  _impl_.chat_status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::TextChatStatus* TextChat::unsafe_arena_release_chat_status() {
  // @@protoc_insertion_point(field_release:proto.TextChat.chat_status)
  
  ::proto::TextChatStatus* temp = _impl_.chat_status_;
  _impl_.chat_status_ = nullptr;
  return temp;
}
inline ::proto::TextChatStatus* TextChat::_internal_mutable_chat_status() {
  
  if (_impl_.chat_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::TextChatStatus>(GetArenaForAllocation());
    _impl_.chat_status_ = p;
  }
  return _impl_.chat_status_;
}
inline ::proto::TextChatStatus* TextChat::mutable_chat_status() {
  ::proto::TextChatStatus* _msg = _internal_mutable_chat_status();
  // @@protoc_insertion_point(field_mutable:proto.TextChat.chat_status)
  return _msg;
}
inline void TextChat::set_allocated_chat_status(::proto::TextChatStatus* chat_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.chat_status_;
  }
  if (chat_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(chat_status);
    if (message_arena != submessage_arena) {
      chat_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chat_status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.chat_status_ = chat_status;
  // @@protoc_insertion_point(field_set_allocated:proto.TextChat.chat_status)
}

// .proto.TextChatMessage chat_message = 2;
inline bool TextChat::_internal_has_chat_message() const {
  return this != internal_default_instance() && _impl_.chat_message_ != nullptr;
}
inline bool TextChat::has_chat_message() const {
  return _internal_has_chat_message();
}
inline void TextChat::clear_chat_message() {
  if (GetArenaForAllocation() == nullptr && _impl_.chat_message_ != nullptr) {
    delete _impl_.chat_message_;
  }
  _impl_.chat_message_ = nullptr;
}
inline const ::proto::TextChatMessage& TextChat::_internal_chat_message() const {
  const ::proto::TextChatMessage* p = _impl_.chat_message_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::TextChatMessage&>(
      ::proto::_TextChatMessage_default_instance_);
}
inline const ::proto::TextChatMessage& TextChat::chat_message() const {
  // @@protoc_insertion_point(field_get:proto.TextChat.chat_message)
  return _internal_chat_message();
}
inline void TextChat::unsafe_arena_set_allocated_chat_message(
    ::proto::TextChatMessage* chat_message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chat_message_);
  }
  _impl_.chat_message_ = chat_message;
  if (chat_message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.TextChat.chat_message)
}
inline ::proto::TextChatMessage* TextChat::release_chat_message() {
  
  ::proto::TextChatMessage* temp = _impl_.chat_message_;
  _impl_.chat_message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::TextChatMessage* TextChat::unsafe_arena_release_chat_message() {
  // @@protoc_insertion_point(field_release:proto.TextChat.chat_message)
  
  ::proto::TextChatMessage* temp = _impl_.chat_message_;
  _impl_.chat_message_ = nullptr;
  return temp;
}
inline ::proto::TextChatMessage* TextChat::_internal_mutable_chat_message() {
  
  if (_impl_.chat_message_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::TextChatMessage>(GetArenaForAllocation());
    _impl_.chat_message_ = p;
  }
  return _impl_.chat_message_;
}
inline ::proto::TextChatMessage* TextChat::mutable_chat_message() {
  ::proto::TextChatMessage* _msg = _internal_mutable_chat_message();
  // @@protoc_insertion_point(field_mutable:proto.TextChat.chat_message)
  return _msg;
}
inline void TextChat::set_allocated_chat_message(::proto::TextChatMessage* chat_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.chat_message_;
  }
  if (chat_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(chat_message);
    if (message_arena != submessage_arena) {
      chat_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chat_message, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.chat_message_ = chat_message;
  // @@protoc_insertion_point(field_set_allocated:proto.TextChat.chat_message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::proto::TextChatStatus_Status> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_text_5fchat_2eproto
